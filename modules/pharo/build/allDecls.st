#(
#('const cv.SORT_EVERY_ROW'  '0'  ()  ())
#('const cv.SORT_EVERY_COLUMN'  '1'  ()  ())
#('const cv.SORT_ASCENDING'  '0'  ()  ())
#('const cv.SORT_DESCENDING'  '16'  ()  ())
#('const cv.COVAR_SCRAMBLED'  '0'  ()  ())
#('const cv.COVAR_NORMAL'  '1'  ()  ())
#('const cv.COVAR_USE_AVG'  '2'  ()  ())
#('const cv.COVAR_SCALE'  '4'  ()  ())
#('const cv.COVAR_ROWS'  '8'  ()  ())
#('const cv.COVAR_COLS'  '16'  ()  ())
#('const cv.KMEANS_RANDOM_CENTERS'  '0'  ()  ())
#('const cv.KMEANS_PP_CENTERS'  '2'  ()  ())
#('const cv.KMEANS_USE_INITIAL_LABELS'  '1'  ()  ())
#('const cv.FILLED'  '-1'  ()  ())
#('const cv.LINE_4'  '4'  ()  ())
#('const cv.LINE_8'  '8'  ()  ())
#('const cv.LINE_AA'  '16'  ()  ())
#('const cv.FONT_HERSHEY_SIMPLEX'  '0'  ()  ())
#('const cv.FONT_HERSHEY_PLAIN'  '1'  ()  ())
#('const cv.FONT_HERSHEY_DUPLEX'  '2'  ()  ())
#('const cv.FONT_HERSHEY_COMPLEX'  '3'  ()  ())
#('const cv.FONT_HERSHEY_TRIPLEX'  '4'  ()  ())
#('const cv.FONT_HERSHEY_COMPLEX_SMALL'  '5'  ()  ())
#('const cv.FONT_HERSHEY_SCRIPT_SIMPLEX'  '6'  ()  ())
#('const cv.FONT_HERSHEY_SCRIPT_COMPLEX'  '7'  ()  ())
#('const cv.FONT_ITALIC'  '16'  ()  ())
#('const cv.REDUCE_SUM'  '0'  ()  ())
#('const cv.REDUCE_AVG'  '1'  ()  ())
#('const cv.REDUCE_MAX'  '2'  ()  ())
#('const cv.REDUCE_MIN'  '3'  ()  ())
#('cv.borderInterpolate'  'int'  ()  (('int'  'p'  ''  ())  ('int'  'len'  ''  ())  ('int'  'borderType'  ''  ()))  'int')
#('cv.copyMakeBorder'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'top'  ''  ())  ('int'  'bottom'  ''  ())  ('int'  'left'  ''  ())  ('int'  'right'  ''  ())  ('int'  'borderType'  ''  ())  ('Scalar'  'value'  'Scalar()'  ()))  'void')
#('cv.add'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ())  ('int'  'dtype'  '-1'  ()))  'void')
#('cv.subtract'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ())  ('int'  'dtype'  '-1'  ()))  'void')
#('cv.multiply'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('double'  'scale'  '1'  ())  ('int'  'dtype'  '-1'  ()))  'void')
#('cv.divide'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('double'  'scale'  '1'  ())  ('int'  'dtype'  '-1'  ()))  'void')
#('cv.divide'  'void'  ()  (('double'  'scale'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'dtype'  '-1'  ()))  'void')
#('cv.scaleAdd'  'void'  ()  (('Mat'  'src1'  ''  ())  ('double'  'alpha'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.addWeighted'  'void'  ()  (('Mat'  'src1'  ''  ())  ('double'  'alpha'  ''  ())  ('Mat'  'src2'  ''  ())  ('double'  'beta'  ''  ())  ('double'  'gamma'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'dtype'  '-1'  ()))  'void')
#('cv.convertScaleAbs'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('double'  'alpha'  '1'  ())  ('double'  'beta'  '0'  ()))  'void')
#('cv.LUT'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'lut'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.sum'  'Scalar'  ('=sumElems')  (('Mat'  'src'  ''  ()))  'Scalar')
#('cv.countNonZero'  'int'  ()  (('Mat'  'src'  ''  ()))  'int')
#('cv.findNonZero'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'idx'  ''  ('/O')))  'void')
#('cv.mean'  'Scalar'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'mask'  'Mat()'  ()))  'Scalar')
#('cv.meanStdDev'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'mean'  ''  ('/O'))  ('Mat'  'stddev'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.norm'  'double'  ()  (('Mat'  'src1'  ''  ())  ('int'  'normType'  'NORM_L2'  ())  ('Mat'  'mask'  'Mat()'  ()))  'double')
#('cv.norm'  'double'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('int'  'normType'  'NORM_L2'  ())  ('Mat'  'mask'  'Mat()'  ()))  'double')
#('cv.PSNR'  'double'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ()))  'double')
#('cv.batchDistance'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dist'  ''  ('/O'))  ('int'  'dtype'  ''  ())  ('Mat'  'nidx'  ''  ('/O'))  ('int'  'normType'  'NORM_L2'  ())  ('int'  'K'  '0'  ())  ('Mat'  'mask'  'Mat()'  ())  ('int'  'update'  '0'  ())  ('bool'  'crosscheck'  'false'  ()))  'void')
#('cv.normalize'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/IO'))  ('double'  'alpha'  '1'  ())  ('double'  'beta'  '0'  ())  ('int'  'norm_type'  'NORM_L2'  ())  ('int'  'dtype'  '-1'  ())  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.minMaxLoc'  'void'  ()  (('Mat'  'src'  ''  ())  ('double*'  'minVal'  ''  ('/O'))  ('double*'  'maxVal'  '0'  ('/O'))  ('Point*'  'minLoc'  '0'  ('/O'))  ('Point*'  'maxLoc'  '0'  ('/O'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.reduce'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'dim'  ''  ())  ('int'  'rtype'  ''  ())  ('int'  'dtype'  '-1'  ()))  'void')
#('cv.merge'  'void'  ()  (('vector_Mat'  'mv'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.split'  'void'  ()  (('Mat'  'm'  ''  ())  ('vector_Mat'  'mv'  ''  ('/O')))  'void')
#('cv.mixChannels'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('vector_Mat'  'dst'  ''  ('/IO'))  ('vector_int'  'fromTo'  ''  ()))  'void')
#('cv.extractChannel'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'coi'  ''  ()))  'void')
#('cv.insertChannel'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/IO'))  ('int'  'coi'  ''  ()))  'void')
#('cv.flip'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flipCode'  ''  ()))  'void')
#('cv.repeat'  'void'  ()  (('Mat'  'src'  ''  ())  ('int'  'ny'  ''  ())  ('int'  'nx'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.hconcat'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.vconcat'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.bitwise_and'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.bitwise_or'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.bitwise_xor'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.bitwise_not'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.absdiff'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.inRange'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'lowerb'  ''  ())  ('Mat'  'upperb'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.compare'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'cmpop'  ''  ()))  'void')
#('cv.min'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.max'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.sqrt'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.pow'  'void'  ()  (('Mat'  'src'  ''  ())  ('double'  'power'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.exp'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.log'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.polarToCart'  'void'  ()  (('Mat'  'magnitude'  ''  ())  ('Mat'  'angle'  ''  ())  ('Mat'  'x'  ''  ('/O'))  ('Mat'  'y'  ''  ('/O'))  ('bool'  'angleInDegrees'  'false'  ()))  'void')
#('cv.cartToPolar'  'void'  ()  (('Mat'  'x'  ''  ())  ('Mat'  'y'  ''  ())  ('Mat'  'magnitude'  ''  ('/O'))  ('Mat'  'angle'  ''  ('/O'))  ('bool'  'angleInDegrees'  'false'  ()))  'void')
#('cv.phase'  'void'  ()  (('Mat'  'x'  ''  ())  ('Mat'  'y'  ''  ())  ('Mat'  'angle'  ''  ('/O'))  ('bool'  'angleInDegrees'  'false'  ()))  'void')
#('cv.magnitude'  'void'  ()  (('Mat'  'x'  ''  ())  ('Mat'  'y'  ''  ())  ('Mat'  'magnitude'  ''  ('/O')))  'void')
#('cv.checkRange'  'bool'  ()  (('Mat'  'a'  ''  ())  ('bool'  'quiet'  'true'  ())  ('Point*'  'pos'  '0'  ('/O'))  ('double'  'minVal'  '-DBL_MAX'  ())  ('double'  'maxVal'  'DBL_MAX'  ()))  'bool')
#('cv.patchNaNs'  'void'  ()  (('Mat'  'a'  ''  ('/IO'))  ('double'  'val'  '0'  ()))  'void')
#('cv.gemm'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('double'  'alpha'  ''  ())  ('Mat'  'src3'  ''  ())  ('double'  'beta'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  '0'  ()))  'void')
#('cv.mulTransposed'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('bool'  'aTa'  ''  ())  ('Mat'  'delta'  'Mat()'  ())  ('double'  'scale'  '1'  ())  ('int'  'dtype'  '-1'  ()))  'void')
#('cv.transpose'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.transform'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'm'  ''  ()))  'void')
#('cv.perspectiveTransform'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'm'  ''  ()))  'void')
#('cv.completeSymm'  'void'  ()  (('Mat'  'mtx'  ''  ('/IO'))  ('bool'  'lowerToUpper'  'false'  ()))  'void')
#('cv.setIdentity'  'void'  ()  (('Mat'  'mtx'  ''  ('/IO'))  ('Scalar'  's'  'Scalar(1)'  ()))  'void')
#('cv.determinant'  'double'  ()  (('Mat'  'mtx'  ''  ()))  'double')
#('cv.trace'  'Scalar'  ()  (('Mat'  'mtx'  ''  ()))  'Scalar')
#('cv.invert'  'double'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  'DECOMP_LU'  ()))  'double')
#('cv.solve'  'bool'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  'DECOMP_LU'  ()))  'bool')
#('cv.sort'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  ''  ()))  'void')
#('cv.sortIdx'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  ''  ()))  'void')
#('cv.solveCubic'  'int'  ()  (('Mat'  'coeffs'  ''  ())  ('Mat'  'roots'  ''  ('/O')))  'int')
#('cv.solvePoly'  'double'  ()  (('Mat'  'coeffs'  ''  ())  ('Mat'  'roots'  ''  ('/O'))  ('int'  'maxIters'  '300'  ()))  'double')
#('cv.eigen'  'bool'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'eigenvalues'  ''  ('/O'))  ('Mat'  'eigenvectors'  'Mat()'  ('/O')))  'bool')
#('cv.calcCovarMatrix'  'void'  ()  (('Mat'  'samples'  ''  ())  ('Mat'  'covar'  ''  ('/O'))  ('Mat'  'mean'  ''  ('/IO'))  ('int'  'flags'  ''  ())  ('int'  'ctype'  'CV_64F'  ()))  'void')
#('cv.PCACompute'  'void'  ()  (('Mat'  'data'  ''  ())  ('Mat'  'mean'  ''  ('/IO'))  ('Mat'  'eigenvectors'  ''  ('/O'))  ('int'  'maxComponents'  '0'  ()))  'void')
#('cv.PCACompute'  'void'  ()  (('Mat'  'data'  ''  ())  ('Mat'  'mean'  ''  ('/IO'))  ('Mat'  'eigenvectors'  ''  ('/O'))  ('double'  'retainedVariance'  ''  ()))  'void')
#('cv.PCAProject'  'void'  ()  (('Mat'  'data'  ''  ())  ('Mat'  'mean'  ''  ())  ('Mat'  'eigenvectors'  ''  ())  ('Mat'  'result'  ''  ('/O')))  'void')
#('cv.PCABackProject'  'void'  ()  (('Mat'  'data'  ''  ())  ('Mat'  'mean'  ''  ())  ('Mat'  'eigenvectors'  ''  ())  ('Mat'  'result'  ''  ('/O')))  'void')
#('cv.SVDecomp'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'w'  ''  ('/O'))  ('Mat'  'u'  ''  ('/O'))  ('Mat'  'vt'  ''  ('/O'))  ('int'  'flags'  '0'  ()))  'void')
#('cv.SVBackSubst'  'void'  ()  (('Mat'  'w'  ''  ())  ('Mat'  'u'  ''  ())  ('Mat'  'vt'  ''  ())  ('Mat'  'rhs'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.Mahalanobis'  'double'  ()  (('Mat'  'v1'  ''  ())  ('Mat'  'v2'  ''  ())  ('Mat'  'icovar'  ''  ()))  'double')
#('cv.dft'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  '0'  ())  ('int'  'nonzeroRows'  '0'  ()))  'void')
#('cv.idft'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  '0'  ())  ('int'  'nonzeroRows'  '0'  ()))  'void')
#('cv.dct'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  '0'  ()))  'void')
#('cv.idct'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  '0'  ()))  'void')
#('cv.mulSpectrums'  'void'  ()  (('Mat'  'a'  ''  ())  ('Mat'  'b'  ''  ())  ('Mat'  'c'  ''  ('/O'))  ('int'  'flags'  ''  ())  ('bool'  'conjB'  'false'  ()))  'void')
#('cv.getOptimalDFTSize'  'int'  ()  (('int'  'vecsize'  ''  ()))  'int')
#('cv.randu'  'void'  ()  (('Mat'  'dst'  ''  ('/IO'))  ('Mat'  'low'  ''  ())  ('Mat'  'high'  ''  ()))  'void')
#('cv.randn'  'void'  ()  (('Mat'  'dst'  ''  ('/IO'))  ('Mat'  'mean'  ''  ())  ('Mat'  'stddev'  ''  ()))  'void')
#('cv.randShuffle'  'void'  ()  (('Mat'  'dst'  ''  ('/IO'))  ('double'  'iterFactor'  '1.'  ())  ('RNG*'  'rng'  '0'  ()))  'void')
#('const cv.PCA.DATA_AS_ROW'  '0'  ()  ())
#('const cv.PCA.DATA_AS_COL'  '1'  ()  ())
#('const cv.PCA.USE_AVG'  '2'  ()  ())
#('const cv.SVD.MODIFY_A'  '1'  ()  ())
#('const cv.SVD.NO_UV'  '2'  ()  ())
#('const cv.SVD.FULL_UV'  '4'  ()  ())
#('const cv.RNG.UNIFORM'  '0'  ()  ())
#('const cv.RNG.NORMAL'  '1'  ()  ())
#('cv.kmeans'  'double'  ()  (('Mat'  'data'  ''  ())  ('int'  'K'  ''  ())  ('Mat'  'bestLabels'  ''  ('/IO'))  ('TermCriteria'  'criteria'  ''  ())  ('int'  'attempts'  ''  ())  ('int'  'flags'  ''  ())  ('Mat'  'centers'  'Mat()'  ('/O')))  'double')
#('const cv.Formatter.FMT_DEFAULT'  '0'  ()  ())
#('const cv.Formatter.FMT_MATLAB'  '1'  ()  ())
#('const cv.Formatter.FMT_CSV'  '2'  ()  ())
#('const cv.Formatter.FMT_PYTHON'  '3'  ()  ())
#('const cv.Formatter.FMT_NUMPY'  '4'  ()  ())
#('const cv.Formatter.FMT_C'  '5'  ()  ())
#('class cv.Algorithm'  ''  ()  ())
#('cv.Algorithm.clear'  'void'  ()  ()  'void')
#('cv.Algorithm.save'  'void'  ()  (('String'  'filename'  ''  ()))  'void')
#('cv.Algorithm.getDefaultName'  'String'  ()  ()  'String')
#('const cv.Param.INT'  '0'  ()  ())
#('const cv.Param.BOOLEAN'  '1'  ()  ())
#('const cv.Param.REAL'  '2'  ()  ())
#('const cv.Param.STRING'  '3'  ()  ())
#('const cv.Param.MAT'  '4'  ()  ())
#('const cv.Param.MAT_VECTOR'  '5'  ()  ())
#('const cv.Param.ALGORITHM'  '6'  ()  ())
#('const cv.Param.FLOAT'  '7'  ()  ())
#('const cv.Param.UNSIGNED_INT'  '8'  ()  ())
#('const cv.Param.UINT64'  '9'  ()  ())
#('const cv.Param.UCHAR'  '11'  ()  ())
#('const cv.Error.StsOk'  '0'  ()  ())
#('const cv.Error.StsBackTrace'  '-1'  ()  ())
#('const cv.Error.StsError'  '-2'  ()  ())
#('const cv.Error.StsInternal'  '-3'  ()  ())
#('const cv.Error.StsNoMem'  '-4'  ()  ())
#('const cv.Error.StsBadArg'  '-5'  ()  ())
#('const cv.Error.StsBadFunc'  '-6'  ()  ())
#('const cv.Error.StsNoConv'  '-7'  ()  ())
#('const cv.Error.StsAutoTrace'  '-8'  ()  ())
#('const cv.Error.HeaderIsNull'  '-9'  ()  ())
#('const cv.Error.BadImageSize'  '-10'  ()  ())
#('const cv.Error.BadOffset'  '-11'  ()  ())
#('const cv.Error.BadDataPtr'  '-12'  ()  ())
#('const cv.Error.BadStep'  '-13'  ()  ())
#('const cv.Error.BadModelOrChSeq'  '-14'  ()  ())
#('const cv.Error.BadNumChannels'  '-15'  ()  ())
#('const cv.Error.BadNumChannel1U'  '-16'  ()  ())
#('const cv.Error.BadDepth'  '-17'  ()  ())
#('const cv.Error.BadAlphaChannel'  '-18'  ()  ())
#('const cv.Error.BadOrder'  '-19'  ()  ())
#('const cv.Error.BadOrigin'  '-20'  ()  ())
#('const cv.Error.BadAlign'  '-21'  ()  ())
#('const cv.Error.BadCallBack'  '-22'  ()  ())
#('const cv.Error.BadTileSize'  '-23'  ()  ())
#('const cv.Error.BadCOI'  '-24'  ()  ())
#('const cv.Error.BadROISize'  '-25'  ()  ())
#('const cv.Error.MaskIsTiled'  '-26'  ()  ())
#('const cv.Error.StsNullPtr'  '-27'  ()  ())
#('const cv.Error.StsVecLengthErr'  '-28'  ()  ())
#('const cv.Error.StsFilterStructContentErr'  '-29'  ()  ())
#('const cv.Error.StsKernelStructContentErr'  '-30'  ()  ())
#('const cv.Error.StsFilterOffsetErr'  '-31'  ()  ())
#('const cv.Error.StsBadSize'  '-201'  ()  ())
#('const cv.Error.StsDivByZero'  '-202'  ()  ())
#('const cv.Error.StsInplaceNotSupported'  '-203'  ()  ())
#('const cv.Error.StsObjectNotFound'  '-204'  ()  ())
#('const cv.Error.StsUnmatchedFormats'  '-205'  ()  ())
#('const cv.Error.StsBadFlag'  '-206'  ()  ())
#('const cv.Error.StsBadPoint'  '-207'  ()  ())
#('const cv.Error.StsBadMask'  '-208'  ()  ())
#('const cv.Error.StsUnmatchedSizes'  '-209'  ()  ())
#('const cv.Error.StsUnsupportedFormat'  '-210'  ()  ())
#('const cv.Error.StsOutOfRange'  '-211'  ()  ())
#('const cv.Error.StsParseError'  '-212'  ()  ())
#('const cv.Error.StsNotImplemented'  '-213'  ()  ())
#('const cv.Error.StsBadMemBlock'  '-214'  ()  ())
#('const cv.Error.StsAssert'  '-215'  ()  ())
#('const cv.Error.GpuNotSupported'  '-216'  ()  ())
#('const cv.Error.GpuApiCallError'  '-217'  ()  ())
#('const cv.Error.OpenGlNotSupported'  '-218'  ()  ())
#('const cv.Error.OpenGlApiCallError'  '-219'  ()  ())
#('const cv.Error.OpenCLApiCallError'  '-220'  ()  ())
#('const cv.Error.OpenCLDoubleNotSupported'  '-221'  ()  ())
#('const cv.Error.OpenCLInitError'  '-222'  ()  ())
#('const cv.Error.OpenCLNoAMDBlasFft'  '-223'  ()  ())
#('const cv.DECOMP_LU'  '0'  ()  ())
#('const cv.DECOMP_SVD'  '1'  ()  ())
#('const cv.DECOMP_EIG'  '2'  ()  ())
#('const cv.DECOMP_CHOLESKY'  '3'  ()  ())
#('const cv.DECOMP_QR'  '4'  ()  ())
#('const cv.DECOMP_NORMAL'  '16'  ()  ())
#('const cv.NORM_INF'  '1'  ()  ())
#('const cv.NORM_L1'  '2'  ()  ())
#('const cv.NORM_L2'  '4'  ()  ())
#('const cv.NORM_L2SQR'  '5'  ()  ())
#('const cv.NORM_HAMMING'  '6'  ()  ())
#('const cv.NORM_HAMMING2'  '7'  ()  ())
#('const cv.NORM_TYPE_MASK'  '7'  ()  ())
#('const cv.NORM_RELATIVE'  '8'  ()  ())
#('const cv.NORM_MINMAX'  '32'  ()  ())
#('const cv.CMP_EQ'  '0'  ()  ())
#('const cv.CMP_GT'  '1'  ()  ())
#('const cv.CMP_GE'  '2'  ()  ())
#('const cv.CMP_LT'  '3'  ()  ())
#('const cv.CMP_LE'  '4'  ()  ())
#('const cv.CMP_NE'  '5'  ()  ())
#('const cv.GEMM_1_T'  '1'  ()  ())
#('const cv.GEMM_2_T'  '2'  ()  ())
#('const cv.GEMM_3_T'  '4'  ()  ())
#('const cv.DFT_INVERSE'  '1'  ()  ())
#('const cv.DFT_SCALE'  '2'  ()  ())
#('const cv.DFT_ROWS'  '4'  ()  ())
#('const cv.DFT_COMPLEX_OUTPUT'  '16'  ()  ())
#('const cv.DFT_REAL_OUTPUT'  '32'  ()  ())
#('const cv.DCT_INVERSE'  'DFT_INVERSE'  ()  ())
#('const cv.DCT_ROWS'  'DFT_ROWS'  ()  ())
#('const cv.BORDER_CONSTANT'  '0'  ()  ())
#('const cv.BORDER_REPLICATE'  '1'  ()  ())
#('const cv.BORDER_REFLECT'  '2'  ()  ())
#('const cv.BORDER_WRAP'  '3'  ()  ())
#('const cv.BORDER_REFLECT_101'  '4'  ()  ())
#('const cv.BORDER_TRANSPARENT'  '5'  ()  ())
#('const cv.BORDER_REFLECT101'  'BORDER_REFLECT_101'  ()  ())
#('const cv.BORDER_DEFAULT'  'BORDER_REFLECT_101'  ()  ())
#('const cv.BORDER_ISOLATED'  '16'  ()  ())
#('const cv.Hamming.normType'  'NORM_HAMMING'  ()  ())
#('cv.cubeRoot'  'float'  ()  (('float'  'val'  ''  ()))  'float')
#('cv.fastAtan2'  'float'  ()  (('float'  'y'  ''  ())  ('float'  'x'  ''  ()))  'float')
#('const cv.ACCESS_READ'  '1<<24'  ()  ())
#('const cv.ACCESS_WRITE'  '1<<25'  ()  ())
#('const cv.ACCESS_RW'  '3<<24'  ()  ())
#('const cv.ACCESS_MASK'  'ACCESS_RW'  ()  ())
#('const cv.ACCESS_FAST'  '1<<26'  ()  ())
#('const cv._InputArray.KIND_SHIFT'  '16'  ()  ())
#('const cv._InputArray.FIXED_TYPE'  '0x8000 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.FIXED_SIZE'  '0x4000 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.KIND_MASK'  '31 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.NONE'  '0 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.MAT'  '1 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.MATX'  '2 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.STD_VECTOR'  '3 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.STD_VECTOR_VECTOR'  '4 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.STD_VECTOR_MAT'  '5 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.EXPR'  '6 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.OPENGL_BUFFER'  '7 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.CUDA_HOST_MEM'  '8 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.CUDA_GPU_MAT'  '9 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.UMAT'  '10 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.STD_VECTOR_UMAT'  '11 << KIND_SHIFT'  ()  ())
#('const cv._InputArray.STD_BOOL_VECTOR'  '12 << KIND_SHIFT'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_8U'  '1 << CV_8U'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_8S'  '1 << CV_8S'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_16U'  '1 << CV_16U'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_16S'  '1 << CV_16S'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_32S'  '1 << CV_32S'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_32F'  '1 << CV_32F'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_64F'  '1 << CV_64F'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_ALL'  '(DEPTH_MASK_64F<<1)-1'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_ALL_BUT_8S'  'DEPTH_MASK_ALL & ~DEPTH_MASK_8S'  ()  ())
#('const cv._OutputArray.DEPTH_MASK_FLT'  'DEPTH_MASK_32F + DEPTH_MASK_64F'  ()  ())
#('const cv.USAGE_DEFAULT'  '0'  ()  ())
#('const cv.USAGE_ALLOCATE_HOST_MEMORY'  '1 << 0'  ()  ())
#('const cv.USAGE_ALLOCATE_DEVICE_MEMORY'  '1 << 1'  ()  ())
#('const cv.USAGE_ALLOCATE_SHARED_MEMORY'  '1 << 2'  ()  ())
#('const cv.__UMAT_USAGE_FLAGS_32BIT'  '0x7fffffff'  ()  ())
#('const cv.UMatData.COPY_ON_MAP'  '1'  ()  ())
#('const cv.UMatData.HOST_COPY_OBSOLETE'  '2'  ()  ())
#('const cv.UMatData.DEVICE_COPY_OBSOLETE'  '4'  ()  ())
#('const cv.UMatData.TEMP_UMAT'  '8'  ()  ())
#('const cv.UMatData.TEMP_COPIED_UMAT'  '24'  ()  ())
#('const cv.UMatData.USER_ALLOCATED'  '32'  ()  ())
#('const cv.UMatData.DEVICE_MEM_MAPPED'  '64'  ()  ())
#('const cv.Mat.MAGIC_VAL'  '0x42FF0000'  ()  ())
#('const cv.Mat.AUTO_STEP'  '0'  ()  ())
#('const cv.Mat.CONTINUOUS_FLAG'  'CV_MAT_CONT_FLAG'  ()  ())
#('const cv.Mat.SUBMATRIX_FLAG'  'CV_SUBMAT_FLAG'  ()  ())
#('const cv.Mat.MAGIC_MASK'  '0xFFFF0000'  ()  ())
#('const cv.Mat.TYPE_MASK'  '0x00000FFF'  ()  ())
#('const cv.Mat.DEPTH_MASK'  '7'  ()  ())
#('const cv.UMat.MAGIC_VAL'  '0x42FF0000'  ()  ())
#('const cv.UMat.AUTO_STEP'  '0'  ()  ())
#('const cv.UMat.CONTINUOUS_FLAG'  'CV_MAT_CONT_FLAG'  ()  ())
#('const cv.UMat.SUBMATRIX_FLAG'  'CV_SUBMAT_FLAG'  ()  ())
#('const cv.UMat.MAGIC_MASK'  '0xFFFF0000'  ()  ())
#('const cv.UMat.TYPE_MASK'  '0x00000FFF'  ()  ())
#('const cv.UMat.DEPTH_MASK'  '7'  ()  ())
#('const cv.SparseMat.MAGIC_VAL'  '0x42FD0000'  ()  ())
#('const cv.SparseMat.MAX_DIM'  '32'  ()  ())
#('const cv.SparseMat.HASH_SCALE'  '0x5bd1e995'  ()  ())
#('const cv.SparseMat.HASH_BIT'  '0x80000000'  ()  ())
#('cv.ocl.haveOpenCL'  'bool'  ()  ()  'bool')
#('cv.ocl.useOpenCL'  'bool'  ()  ()  'bool')
#('cv.ocl.haveAmdBlas'  'bool'  ()  ()  'bool')
#('cv.ocl.haveAmdFft'  'bool'  ()  ()  'bool')
#('cv.ocl.setUseOpenCL'  'void'  ()  (('bool'  'flag'  ''  ()))  'void')
#('cv.ocl.finish'  'void'  ()  ()  'void')
#('const cv.ocl.Device.TYPE_DEFAULT'  '(1 << 0)'  ()  ())
#('const cv.ocl.Device.TYPE_CPU'  '(1 << 1)'  ()  ())
#('const cv.ocl.Device.TYPE_GPU'  '(1 << 2)'  ()  ())
#('const cv.ocl.Device.TYPE_ACCELERATOR'  '(1 << 3)'  ()  ())
#('const cv.ocl.Device.TYPE_DGPU'  'TYPE_GPU + (1 << 16)'  ()  ())
#('const cv.ocl.Device.TYPE_IGPU'  'TYPE_GPU + (1 << 17)'  ()  ())
#('const cv.ocl.Device.TYPE_ALL'  '0xFFFFFFFF'  ()  ())
#('const cv.ocl.Device.FP_DENORM'  '(1 << 0)'  ()  ())
#('const cv.ocl.Device.FP_INF_NAN'  '(1 << 1)'  ()  ())
#('const cv.ocl.Device.FP_ROUND_TO_NEAREST'  '(1 << 2)'  ()  ())
#('const cv.ocl.Device.FP_ROUND_TO_ZERO'  '(1 << 3)'  ()  ())
#('const cv.ocl.Device.FP_ROUND_TO_INF'  '(1 << 4)'  ()  ())
#('const cv.ocl.Device.FP_FMA'  '(1 << 5)'  ()  ())
#('const cv.ocl.Device.FP_SOFT_FLOAT'  '(1 << 6)'  ()  ())
#('const cv.ocl.Device.FP_CORRECTLY_ROUNDED_DIVIDE_SQRT'  '(1 << 7)'  ()  ())
#('const cv.ocl.Device.EXEC_KERNEL'  '(1 << 0)'  ()  ())
#('const cv.ocl.Device.EXEC_NATIVE_KERNEL'  '(1 << 1)'  ()  ())
#('const cv.ocl.Device.NO_CACHE'  '0'  ()  ())
#('const cv.ocl.Device.READ_ONLY_CACHE'  '1'  ()  ())
#('const cv.ocl.Device.READ_WRITE_CACHE'  '2'  ()  ())
#('const cv.ocl.Device.NO_LOCAL_MEM'  '0'  ()  ())
#('const cv.ocl.Device.LOCAL_IS_LOCAL'  '1'  ()  ())
#('const cv.ocl.Device.LOCAL_IS_GLOBAL'  '2'  ()  ())
#('const cv.ocl.Device.UNKNOWN_VENDOR'  '0'  ()  ())
#('const cv.ocl.Device.VENDOR_AMD'  '1'  ()  ())
#('const cv.ocl.Device.VENDOR_INTEL'  '2'  ()  ())
#('const cv.ocl.Device.VENDOR_NVIDIA'  '3'  ()  ())
#('const cv.ocl.KernelArg.LOCAL'  '1'  ()  ())
#('const cv.ocl.KernelArg.READ_ONLY'  '2'  ()  ())
#('const cv.ocl.KernelArg.WRITE_ONLY'  '4'  ()  ())
#('const cv.ocl.KernelArg.READ_WRITE'  '6'  ()  ())
#('const cv.ocl.KernelArg.CONSTANT'  '8'  ()  ())
#('const cv.ocl.KernelArg.PTR_ONLY'  '16'  ()  ())
#('const cv.ocl.KernelArg.NO_SIZE'  '256'  ()  ())
#('const cv.ocl.OCL_VECTOR_OWN'  '0'  ()  ())
#('const cv.ocl.OCL_VECTOR_MAX'  '1'  ()  ())
#('const cv.ocl.OCL_VECTOR_DEFAULT'  'OCL_VECTOR_OWN'  ()  ())
#('const cv.ogl.Buffer.ARRAY_BUFFER'  '0x8892'  ()  ())
#('const cv.ogl.Buffer.ELEMENT_ARRAY_BUFFER'  '0x8893'  ()  ())
#('const cv.ogl.Buffer.PIXEL_PACK_BUFFER'  '0x88EB'  ()  ())
#('const cv.ogl.Buffer.PIXEL_UNPACK_BUFFER'  '0x88EC'  ()  ())
#('const cv.ogl.Buffer.READ_ONLY'  '0x88B8'  ()  ())
#('const cv.ogl.Buffer.WRITE_ONLY'  '0x88B9'  ()  ())
#('const cv.ogl.Buffer.READ_WRITE'  '0x88BA'  ()  ())
#('const cv.ogl.Texture2D.NONE'  '0'  ()  ())
#('const cv.ogl.Texture2D.DEPTH_COMPONENT'  '0x1902'  ()  ())
#('const cv.ogl.Texture2D.RGB'  '0x1907'  ()  ())
#('const cv.ogl.Texture2D.RGBA'  '0x1908'  ()  ())
#('const cv.ogl.POINTS'  '0x0000'  ()  ())
#('const cv.ogl.LINES'  '0x0001'  ()  ())
#('const cv.ogl.LINE_LOOP'  '0x0002'  ()  ())
#('const cv.ogl.LINE_STRIP'  '0x0003'  ()  ())
#('const cv.ogl.TRIANGLES'  '0x0004'  ()  ())
#('const cv.ogl.TRIANGLE_STRIP'  '0x0005'  ()  ())
#('const cv.ogl.TRIANGLE_FAN'  '0x0006'  ()  ())
#('const cv.ogl.QUADS'  '0x0007'  ()  ())
#('const cv.ogl.QUAD_STRIP'  '0x0008'  ()  ())
#('const cv.ogl.POLYGON'  '0x0009'  ()  ())
#('const cv.SOLVELP_UNBOUNDED'  '-2'  ()  ())
#('const cv.SOLVELP_UNFEASIBLE'  '-1'  ()  ())
#('const cv.SOLVELP_SINGLE'  '0'  ()  ())
#('const cv.SOLVELP_MULTI'  '1'  ()  ())
#('cv.solveLP'  'int'  ()  (('Mat'  'Func'  ''  ())  ('Mat'  'Constr'  ''  ())  ('Mat'  'z'  ''  ()))  'int')
#('class cv.FileStorage'  ''  ()  ())
#('const cv.FileStorage.READ'  '0'  ()  ())
#('const cv.FileStorage.WRITE'  '1'  ()  ())
#('const cv.FileStorage.APPEND'  '2'  ()  ())
#('const cv.FileStorage.MEMORY'  '4'  ()  ())
#('const cv.FileStorage.FORMAT_MASK'  '(7<<3)'  ()  ())
#('const cv.FileStorage.FORMAT_AUTO'  '0'  ()  ())
#('const cv.FileStorage.FORMAT_XML'  '(1<<3)'  ()  ())
#('const cv.FileStorage.FORMAT_YAML'  '(2<<3)'  ()  ())
#('const cv.FileStorage.UNDEFINED'  '0'  ()  ())
#('const cv.FileStorage.VALUE_EXPECTED'  '1'  ()  ())
#('const cv.FileStorage.NAME_EXPECTED'  '2'  ()  ())
#('const cv.FileStorage.INSIDE_MAP'  '4'  ()  ())
#('cv.FileStorage.FileStorage'  ''  ()  ())
#('cv.FileStorage.FileStorage'  ''  ()  (('String'  'source'  ''  ())  ('int'  'flags'  ''  ())  ('String'  'encoding'  'String()'  ())))
#('cv.FileStorage.open'  'bool'  ()  (('String'  'filename'  ''  ())  ('int'  'flags'  ''  ())  ('String'  'encoding'  'String()'  ()))  'bool')
#('cv.FileStorage.isOpened'  'bool'  ()  ()  'bool')
#('cv.FileStorage.release'  'void'  ()  ()  'void')
#('cv.FileStorage.releaseAndGetString'  'String'  ()  ()  'String')
#('cv.FileStorage.getFirstTopLevelNode'  'FileNode'  ()  ()  'FileNode')
#('cv.FileStorage.root'  'FileNode'  ()  (('int'  'streamidx'  '0'  ()))  'FileNode')
#('cv.FileStorage.operator()'  'FileNode'  ()  (('c_string'  'nodename'  ''  ()))  'FileNode')
#('class cv.FileNode'  ''  ('/Simple')  ())
#('const cv.FileNode.NONE'  '0'  ()  ())
#('const cv.FileNode.INT'  '1'  ()  ())
#('const cv.FileNode.REAL'  '2'  ()  ())
#('const cv.FileNode.FLOAT'  'REAL'  ()  ())
#('const cv.FileNode.STR'  '3'  ()  ())
#('const cv.FileNode.STRING'  'STR'  ()  ())
#('const cv.FileNode.REF'  '4'  ()  ())
#('const cv.FileNode.SEQ'  '5'  ()  ())
#('const cv.FileNode.MAP'  '6'  ()  ())
#('const cv.FileNode.TYPE_MASK'  '7'  ()  ())
#('const cv.FileNode.FLOW'  '8'  ()  ())
#('const cv.FileNode.USER'  '16'  ()  ())
#('const cv.FileNode.EMPTY'  '32'  ()  ())
#('const cv.FileNode.NAMED'  '64'  ()  ())
#('cv.FileNode.FileNode'  ''  ()  ())
#('cv.FileNode.operator()'  'FileNode'  ()  (('c_string'  'nodename'  ''  ()))  'FileNode')
#('cv.FileNode.operator()'  'FileNode'  ()  (('int'  'i'  ''  ()))  'FileNode')
#('cv.FileNode.type'  'int'  ()  ()  'int')
#('cv.FileNode.empty'  'bool'  ()  ()  'bool')
#('cv.FileNode.isNone'  'bool'  ()  ()  'bool')
#('cv.FileNode.isSeq'  'bool'  ()  ()  'bool')
#('cv.FileNode.isMap'  'bool'  ()  ()  'bool')
#('cv.FileNode.isInt'  'bool'  ()  ()  'bool')
#('cv.FileNode.isReal'  'bool'  ()  ()  'bool')
#('cv.FileNode.isString'  'bool'  ()  ()  'bool')
#('cv.FileNode.isNamed'  'bool'  ()  ()  'bool')
#('cv.FileNode.name'  'String'  ()  ()  'String')
#('cv.FileNode.size'  'size_t'  ()  ()  'size_t')
#('class cv.KeyPoint'  ''  ('/Simple')  (('Point2f'  'pt'  ''  ('/RW'))  ('float'  'size'  ''  ('/RW'))  ('float'  'angle'  ''  ('/RW'))  ('float'  'response'  ''  ('/RW'))  ('int'  'octave'  ''  ('/RW'))  ('int'  'class_id'  ''  ('/RW'))))
#('cv.KeyPoint.KeyPoint'  ''  ()  ())
#('cv.KeyPoint.KeyPoint'  ''  ()  (('float'  'x'  ''  ())  ('float'  'y'  ''  ())  ('float'  '_size'  ''  ())  ('float'  '_angle'  '-1'  ())  ('float'  '_response'  '0'  ())  ('int'  '_octave'  '0'  ())  ('int'  '_class_id'  '-1'  ())))
#('cv.KeyPoint.convert'  'void'  ('/S')  (('vector_KeyPoint'  'keypoints'  ''  ())  ('vector_Point2f'  'points2f'  ''  ('/O'))  ('vector_int'  'keypointIndexes'  'std::vector<int>()'  ()))  'void')
#('cv.KeyPoint.convert'  'void'  ('/S')  (('vector_Point2f'  'points2f'  ''  ())  ('vector_KeyPoint'  'keypoints'  ''  ('/O'))  ('float'  'size'  '1'  ())  ('float'  'response'  '1'  ())  ('int'  'octave'  '0'  ())  ('int'  'class_id'  '-1'  ()))  'void')
#('cv.KeyPoint.overlap'  'float'  ('/S')  (('KeyPoint'  'kp1'  ''  ())  ('KeyPoint'  'kp2'  ''  ()))  'float')
#('class cv.DMatch'  ''  ('/Simple')  (('int'  'queryIdx'  ''  ('/RW'))  ('int'  'trainIdx'  ''  ('/RW'))  ('int'  'imgIdx'  ''  ('/RW'))  ('float'  'distance'  ''  ('/RW'))))
#('cv.DMatch.DMatch'  ''  ()  ())
#('cv.DMatch.DMatch'  ''  ()  (('int'  '_queryIdx'  ''  ())  ('int'  '_trainIdx'  ''  ())  ('float'  '_distance'  ''  ())))
#('cv.DMatch.DMatch'  ''  ()  (('int'  '_queryIdx'  ''  ())  ('int'  '_trainIdx'  ''  ())  ('int'  '_imgIdx'  ''  ())  ('float'  '_distance'  ''  ())))
#('const cv.TermCriteria.COUNT'  '1'  ()  ())
#('const cv.TermCriteria.MAX_ITER'  'COUNT'  ()  ())
#('const cv.TermCriteria.EPS'  '2'  ()  ())
#('class cv.Moments'  ''  ('/Map')  (('double'  'm00'  ''  ('/RW'))  ('double'  'm10'  ''  ('/RW'))  ('double'  'm01'  ''  ('/RW'))  ('double'  'm20'  ''  ('/RW'))  ('double'  'm11'  ''  ('/RW'))  ('double'  'm02'  ''  ('/RW'))  ('double'  'm30'  ''  ('/RW'))  ('double'  'm21'  ''  ('/RW'))  ('double'  'm12'  ''  ('/RW'))  ('double'  'm03'  ''  ('/RW'))  ('double'  'mu20'  ''  ('/RW'))  ('double'  'mu11'  ''  ('/RW'))  ('double'  'mu02'  ''  ('/RW'))  ('double'  'mu30'  ''  ('/RW'))  ('double'  'mu21'  ''  ('/RW'))  ('double'  'mu12'  ''  ('/RW'))  ('double'  'mu03'  ''  ('/RW'))  ('double'  'nu20'  ''  ('/RW'))  ('double'  'nu11'  ''  ('/RW'))  ('double'  'nu02'  ''  ('/RW'))  ('double'  'nu30'  ''  ('/RW'))  ('double'  'nu21'  ''  ('/RW'))  ('double'  'nu12'  ''  ('/RW'))  ('double'  'nu03'  ''  ('/RW'))))
#('cv.getBuildInformation'  'String'  ()  ()  'String')
#('cv.getTickCount'  'int64'  ()  ()  'int64')
#('cv.getTickFrequency'  'double'  ()  ()  'double')
#('cv.getCPUTickCount'  'int64'  ()  ()  'int64')
#('const cv.CPU_MMX'  '1'  ()  ())
#('const cv.CPU_SSE'  '2'  ()  ())
#('const cv.CPU_SSE2'  '3'  ()  ())
#('const cv.CPU_SSE3'  '4'  ()  ())
#('const cv.CPU_SSSE3'  '5'  ()  ())
#('const cv.CPU_SSE4_1'  '6'  ()  ())
#('const cv.CPU_SSE4_2'  '7'  ()  ())
#('const cv.CPU_POPCNT'  '8'  ()  ())
#('const cv.CPU_AVX'  '10'  ()  ())
#('const cv.CPU_AVX2'  '11'  ()  ())
#('const cv.CPU_FMA3'  '12'  ()  ())
#('const cv.CPU_AVX_512F'  '13'  ()  ())
#('const cv.CPU_AVX_512BW'  '14'  ()  ())
#('const cv.CPU_AVX_512CD'  '15'  ()  ())
#('const cv.CPU_AVX_512DQ'  '16'  ()  ())
#('const cv.CPU_AVX_512ER'  '17'  ()  ())
#('const cv.CPU_AVX_512IFMA512'  '18'  ()  ())
#('const cv.CPU_AVX_512PF'  '19'  ()  ())
#('const cv.CPU_AVX_512VBMI'  '20'  ()  ())
#('const cv.CPU_AVX_512VL'  '21'  ()  ())
#('const cv.CPU_NEON'  '100'  ()  ())
#('cv.checkHardwareSupport'  'bool'  ()  (('int'  'feature'  ''  ()))  'bool')
#('cv.getNumberOfCPUs'  'int'  ()  ()  'int')
#('cv.setUseOptimized'  'void'  ()  (('bool'  'onoff'  ''  ()))  'void')
#('cv.useOptimized'  'bool'  ()  ()  'bool')
#('class cv.flann.Index'  ''  ()  ())
#('cv.flann.Index.Index'  ''  ()  ())
#('cv.flann.Index.Index'  ''  ()  (('Mat'  'features'  ''  ())  ('IndexParams'  'params'  ''  ())  ('cvflann_flann_distance_t'  'distType'  'cvflann::FLANN_DIST_L2'  ())))
#('cv.flann.Index.build'  'void'  ()  (('Mat'  'features'  ''  ())  ('IndexParams'  'params'  ''  ())  ('cvflann_flann_distance_t'  'distType'  'cvflann::FLANN_DIST_L2'  ()))  'void')
#('cv.flann.Index.knnSearch'  'void'  ()  (('Mat'  'query'  ''  ())  ('Mat'  'indices'  ''  ('/O'))  ('Mat'  'dists'  ''  ('/O'))  ('int'  'knn'  ''  ())  ('SearchParams'  'params'  'SearchParams()'  ()))  'void')
#('cv.flann.Index.radiusSearch'  'int'  ()  (('Mat'  'query'  ''  ())  ('Mat'  'indices'  ''  ('/O'))  ('Mat'  'dists'  ''  ('/O'))  ('double'  'radius'  ''  ())  ('int'  'maxResults'  ''  ())  ('SearchParams'  'params'  'SearchParams()'  ()))  'int')
#('cv.flann.Index.save'  'void'  ()  (('String'  'filename'  ''  ()))  'void')
#('cv.flann.Index.load'  'bool'  ()  (('Mat'  'features'  ''  ())  ('String'  'filename'  ''  ()))  'bool')
#('cv.flann.Index.release'  'void'  ()  ()  'void')
#('cv.flann.Index.getDistance'  'cvflann_flann_distance_t'  ()  ()  'cvflann::flann_distance_t')
#('cv.flann.Index.getAlgorithm'  'cvflann_flann_algorithm_t'  ()  ()  'cvflann::flann_algorithm_t')
#('const cv.MORPH_ERODE'  '0'  ()  ())
#('const cv.MORPH_DILATE'  '1'  ()  ())
#('const cv.MORPH_OPEN'  '2'  ()  ())
#('const cv.MORPH_CLOSE'  '3'  ()  ())
#('const cv.MORPH_GRADIENT'  '4'  ()  ())
#('const cv.MORPH_TOPHAT'  '5'  ()  ())
#('const cv.MORPH_BLACKHAT'  '6'  ()  ())
#('const cv.MORPH_RECT'  '0'  ()  ())
#('const cv.MORPH_CROSS'  '1'  ()  ())
#('const cv.MORPH_ELLIPSE'  '2'  ()  ())
#('const cv.INTER_NEAREST'  '0'  ()  ())
#('const cv.INTER_LINEAR'  '1'  ()  ())
#('const cv.INTER_CUBIC'  '2'  ()  ())
#('const cv.INTER_AREA'  '3'  ()  ())
#('const cv.INTER_LANCZOS4'  '4'  ()  ())
#('const cv.INTER_MAX'  '7'  ()  ())
#('const cv.WARP_FILL_OUTLIERS'  '8'  ()  ())
#('const cv.WARP_INVERSE_MAP'  '16'  ()  ())
#('const cv.INTER_BITS'  '5'  ()  ())
#('const cv.INTER_BITS2'  'INTER_BITS * 2'  ()  ())
#('const cv.INTER_TAB_SIZE'  '1 << INTER_BITS'  ()  ())
#('const cv.INTER_TAB_SIZE2'  'INTER_TAB_SIZE * INTER_TAB_SIZE'  ()  ())
#('const cv.DIST_USER'  '-1'  ()  ())
#('const cv.DIST_L1'  '1'  ()  ())
#('const cv.DIST_L2'  '2'  ()  ())
#('const cv.DIST_C'  '3'  ()  ())
#('const cv.DIST_L12'  '4'  ()  ())
#('const cv.DIST_FAIR'  '5'  ()  ())
#('const cv.DIST_WELSCH'  '6'  ()  ())
#('const cv.DIST_HUBER'  '7'  ()  ())
#('const cv.DIST_MASK_3'  '3'  ()  ())
#('const cv.DIST_MASK_5'  '5'  ()  ())
#('const cv.DIST_MASK_PRECISE'  '0'  ()  ())
#('const cv.THRESH_BINARY'  '0'  ()  ())
#('const cv.THRESH_BINARY_INV'  '1'  ()  ())
#('const cv.THRESH_TRUNC'  '2'  ()  ())
#('const cv.THRESH_TOZERO'  '3'  ()  ())
#('const cv.THRESH_TOZERO_INV'  '4'  ()  ())
#('const cv.THRESH_MASK'  '7'  ()  ())
#('const cv.THRESH_OTSU'  '8'  ()  ())
#('const cv.THRESH_TRIANGLE'  '16'  ()  ())
#('const cv.ADAPTIVE_THRESH_MEAN_C'  '0'  ()  ())
#('const cv.ADAPTIVE_THRESH_GAUSSIAN_C'  '1'  ()  ())
#('const cv.PROJ_SPHERICAL_ORTHO'  '0'  ()  ())
#('const cv.PROJ_SPHERICAL_EQRECT'  '1'  ()  ())
#('const cv.GC_BGD'  '0'  ()  ())
#('const cv.GC_FGD'  '1'  ()  ())
#('const cv.GC_PR_BGD'  '2'  ()  ())
#('const cv.GC_PR_FGD'  '3'  ()  ())
#('const cv.GC_INIT_WITH_RECT'  '0'  ()  ())
#('const cv.GC_INIT_WITH_MASK'  '1'  ()  ())
#('const cv.GC_EVAL'  '2'  ()  ())
#('const cv.DIST_LABEL_CCOMP'  '0'  ()  ())
#('const cv.DIST_LABEL_PIXEL'  '1'  ()  ())
#('const cv.FLOODFILL_FIXED_RANGE'  '1 << 16'  ()  ())
#('const cv.FLOODFILL_MASK_ONLY'  '1 << 17'  ()  ())
#('const cv.CC_STAT_LEFT'  '0'  ()  ())
#('const cv.CC_STAT_TOP'  '1'  ()  ())
#('const cv.CC_STAT_WIDTH'  '2'  ()  ())
#('const cv.CC_STAT_HEIGHT'  '3'  ()  ())
#('const cv.CC_STAT_AREA'  '4'  ()  ())
#('const cv.CC_STAT_MAX'  '5'  ()  ())
#('const cv.RETR_EXTERNAL'  '0'  ()  ())
#('const cv.RETR_LIST'  '1'  ()  ())
#('const cv.RETR_CCOMP'  '2'  ()  ())
#('const cv.RETR_TREE'  '3'  ()  ())
#('const cv.RETR_FLOODFILL'  '4'  ()  ())
#('const cv.CHAIN_APPROX_NONE'  '1'  ()  ())
#('const cv.CHAIN_APPROX_SIMPLE'  '2'  ()  ())
#('const cv.CHAIN_APPROX_TC89_L1'  '3'  ()  ())
#('const cv.CHAIN_APPROX_TC89_KCOS'  '4'  ()  ())
#('const cv.HOUGH_STANDARD'  '0'  ()  ())
#('const cv.HOUGH_PROBABILISTIC'  '1'  ()  ())
#('const cv.HOUGH_MULTI_SCALE'  '2'  ()  ())
#('const cv.HOUGH_GRADIENT'  '3'  ()  ())
#('const cv.LSD_REFINE_NONE'  '0'  ()  ())
#('const cv.LSD_REFINE_STD'  '1'  ()  ())
#('const cv.LSD_REFINE_ADV'  '2'  ()  ())
#('const cv.HISTCMP_CORREL'  '0'  ()  ())
#('const cv.HISTCMP_CHISQR'  '1'  ()  ())
#('const cv.HISTCMP_INTERSECT'  '2'  ()  ())
#('const cv.HISTCMP_BHATTACHARYYA'  '3'  ()  ())
#('const cv.HISTCMP_HELLINGER'  'HISTCMP_BHATTACHARYYA'  ()  ())
#('const cv.HISTCMP_CHISQR_ALT'  '4'  ()  ())
#('const cv.HISTCMP_KL_DIV'  '5'  ()  ())
#('const cv.COLOR_BGR2BGRA'  '0'  ()  ())
#('const cv.COLOR_RGB2RGBA'  'COLOR_BGR2BGRA'  ()  ())
#('const cv.COLOR_BGRA2BGR'  '1'  ()  ())
#('const cv.COLOR_RGBA2RGB'  'COLOR_BGRA2BGR'  ()  ())
#('const cv.COLOR_BGR2RGBA'  '2'  ()  ())
#('const cv.COLOR_RGB2BGRA'  'COLOR_BGR2RGBA'  ()  ())
#('const cv.COLOR_RGBA2BGR'  '3'  ()  ())
#('const cv.COLOR_BGRA2RGB'  'COLOR_RGBA2BGR'  ()  ())
#('const cv.COLOR_BGR2RGB'  '4'  ()  ())
#('const cv.COLOR_RGB2BGR'  'COLOR_BGR2RGB'  ()  ())
#('const cv.COLOR_BGRA2RGBA'  '5'  ()  ())
#('const cv.COLOR_RGBA2BGRA'  'COLOR_BGRA2RGBA'  ()  ())
#('const cv.COLOR_BGR2GRAY'  '6'  ()  ())
#('const cv.COLOR_RGB2GRAY'  '7'  ()  ())
#('const cv.COLOR_GRAY2BGR'  '8'  ()  ())
#('const cv.COLOR_GRAY2RGB'  'COLOR_GRAY2BGR'  ()  ())
#('const cv.COLOR_GRAY2BGRA'  '9'  ()  ())
#('const cv.COLOR_GRAY2RGBA'  'COLOR_GRAY2BGRA'  ()  ())
#('const cv.COLOR_BGRA2GRAY'  '10'  ()  ())
#('const cv.COLOR_RGBA2GRAY'  '11'  ()  ())
#('const cv.COLOR_BGR2BGR565'  '12'  ()  ())
#('const cv.COLOR_RGB2BGR565'  '13'  ()  ())
#('const cv.COLOR_BGR5652BGR'  '14'  ()  ())
#('const cv.COLOR_BGR5652RGB'  '15'  ()  ())
#('const cv.COLOR_BGRA2BGR565'  '16'  ()  ())
#('const cv.COLOR_RGBA2BGR565'  '17'  ()  ())
#('const cv.COLOR_BGR5652BGRA'  '18'  ()  ())
#('const cv.COLOR_BGR5652RGBA'  '19'  ()  ())
#('const cv.COLOR_GRAY2BGR565'  '20'  ()  ())
#('const cv.COLOR_BGR5652GRAY'  '21'  ()  ())
#('const cv.COLOR_BGR2BGR555'  '22'  ()  ())
#('const cv.COLOR_RGB2BGR555'  '23'  ()  ())
#('const cv.COLOR_BGR5552BGR'  '24'  ()  ())
#('const cv.COLOR_BGR5552RGB'  '25'  ()  ())
#('const cv.COLOR_BGRA2BGR555'  '26'  ()  ())
#('const cv.COLOR_RGBA2BGR555'  '27'  ()  ())
#('const cv.COLOR_BGR5552BGRA'  '28'  ()  ())
#('const cv.COLOR_BGR5552RGBA'  '29'  ()  ())
#('const cv.COLOR_GRAY2BGR555'  '30'  ()  ())
#('const cv.COLOR_BGR5552GRAY'  '31'  ()  ())
#('const cv.COLOR_BGR2XYZ'  '32'  ()  ())
#('const cv.COLOR_RGB2XYZ'  '33'  ()  ())
#('const cv.COLOR_XYZ2BGR'  '34'  ()  ())
#('const cv.COLOR_XYZ2RGB'  '35'  ()  ())
#('const cv.COLOR_BGR2YCrCb'  '36'  ()  ())
#('const cv.COLOR_RGB2YCrCb'  '37'  ()  ())
#('const cv.COLOR_YCrCb2BGR'  '38'  ()  ())
#('const cv.COLOR_YCrCb2RGB'  '39'  ()  ())
#('const cv.COLOR_BGR2HSV'  '40'  ()  ())
#('const cv.COLOR_RGB2HSV'  '41'  ()  ())
#('const cv.COLOR_BGR2Lab'  '44'  ()  ())
#('const cv.COLOR_RGB2Lab'  '45'  ()  ())
#('const cv.COLOR_BGR2Luv'  '50'  ()  ())
#('const cv.COLOR_RGB2Luv'  '51'  ()  ())
#('const cv.COLOR_BGR2HLS'  '52'  ()  ())
#('const cv.COLOR_RGB2HLS'  '53'  ()  ())
#('const cv.COLOR_HSV2BGR'  '54'  ()  ())
#('const cv.COLOR_HSV2RGB'  '55'  ()  ())
#('const cv.COLOR_Lab2BGR'  '56'  ()  ())
#('const cv.COLOR_Lab2RGB'  '57'  ()  ())
#('const cv.COLOR_Luv2BGR'  '58'  ()  ())
#('const cv.COLOR_Luv2RGB'  '59'  ()  ())
#('const cv.COLOR_HLS2BGR'  '60'  ()  ())
#('const cv.COLOR_HLS2RGB'  '61'  ()  ())
#('const cv.COLOR_BGR2HSV_FULL'  '66'  ()  ())
#('const cv.COLOR_RGB2HSV_FULL'  '67'  ()  ())
#('const cv.COLOR_BGR2HLS_FULL'  '68'  ()  ())
#('const cv.COLOR_RGB2HLS_FULL'  '69'  ()  ())
#('const cv.COLOR_HSV2BGR_FULL'  '70'  ()  ())
#('const cv.COLOR_HSV2RGB_FULL'  '71'  ()  ())
#('const cv.COLOR_HLS2BGR_FULL'  '72'  ()  ())
#('const cv.COLOR_HLS2RGB_FULL'  '73'  ()  ())
#('const cv.COLOR_LBGR2Lab'  '74'  ()  ())
#('const cv.COLOR_LRGB2Lab'  '75'  ()  ())
#('const cv.COLOR_LBGR2Luv'  '76'  ()  ())
#('const cv.COLOR_LRGB2Luv'  '77'  ()  ())
#('const cv.COLOR_Lab2LBGR'  '78'  ()  ())
#('const cv.COLOR_Lab2LRGB'  '79'  ()  ())
#('const cv.COLOR_Luv2LBGR'  '80'  ()  ())
#('const cv.COLOR_Luv2LRGB'  '81'  ()  ())
#('const cv.COLOR_BGR2YUV'  '82'  ()  ())
#('const cv.COLOR_RGB2YUV'  '83'  ()  ())
#('const cv.COLOR_YUV2BGR'  '84'  ()  ())
#('const cv.COLOR_YUV2RGB'  '85'  ()  ())
#('const cv.COLOR_YUV2RGB_NV12'  '90'  ()  ())
#('const cv.COLOR_YUV2BGR_NV12'  '91'  ()  ())
#('const cv.COLOR_YUV2RGB_NV21'  '92'  ()  ())
#('const cv.COLOR_YUV2BGR_NV21'  '93'  ()  ())
#('const cv.COLOR_YUV420sp2RGB'  'COLOR_YUV2RGB_NV21'  ()  ())
#('const cv.COLOR_YUV420sp2BGR'  'COLOR_YUV2BGR_NV21'  ()  ())
#('const cv.COLOR_YUV2RGBA_NV12'  '94'  ()  ())
#('const cv.COLOR_YUV2BGRA_NV12'  '95'  ()  ())
#('const cv.COLOR_YUV2RGBA_NV21'  '96'  ()  ())
#('const cv.COLOR_YUV2BGRA_NV21'  '97'  ()  ())
#('const cv.COLOR_YUV420sp2RGBA'  'COLOR_YUV2RGBA_NV21'  ()  ())
#('const cv.COLOR_YUV420sp2BGRA'  'COLOR_YUV2BGRA_NV21'  ()  ())
#('const cv.COLOR_YUV2RGB_YV12'  '98'  ()  ())
#('const cv.COLOR_YUV2BGR_YV12'  '99'  ()  ())
#('const cv.COLOR_YUV2RGB_IYUV'  '100'  ()  ())
#('const cv.COLOR_YUV2BGR_IYUV'  '101'  ()  ())
#('const cv.COLOR_YUV2RGB_I420'  'COLOR_YUV2RGB_IYUV'  ()  ())
#('const cv.COLOR_YUV2BGR_I420'  'COLOR_YUV2BGR_IYUV'  ()  ())
#('const cv.COLOR_YUV420p2RGB'  'COLOR_YUV2RGB_YV12'  ()  ())
#('const cv.COLOR_YUV420p2BGR'  'COLOR_YUV2BGR_YV12'  ()  ())
#('const cv.COLOR_YUV2RGBA_YV12'  '102'  ()  ())
#('const cv.COLOR_YUV2BGRA_YV12'  '103'  ()  ())
#('const cv.COLOR_YUV2RGBA_IYUV'  '104'  ()  ())
#('const cv.COLOR_YUV2BGRA_IYUV'  '105'  ()  ())
#('const cv.COLOR_YUV2RGBA_I420'  'COLOR_YUV2RGBA_IYUV'  ()  ())
#('const cv.COLOR_YUV2BGRA_I420'  'COLOR_YUV2BGRA_IYUV'  ()  ())
#('const cv.COLOR_YUV420p2RGBA'  'COLOR_YUV2RGBA_YV12'  ()  ())
#('const cv.COLOR_YUV420p2BGRA'  'COLOR_YUV2BGRA_YV12'  ()  ())
#('const cv.COLOR_YUV2GRAY_420'  '106'  ()  ())
#('const cv.COLOR_YUV2GRAY_NV21'  'COLOR_YUV2GRAY_420'  ()  ())
#('const cv.COLOR_YUV2GRAY_NV12'  'COLOR_YUV2GRAY_420'  ()  ())
#('const cv.COLOR_YUV2GRAY_YV12'  'COLOR_YUV2GRAY_420'  ()  ())
#('const cv.COLOR_YUV2GRAY_IYUV'  'COLOR_YUV2GRAY_420'  ()  ())
#('const cv.COLOR_YUV2GRAY_I420'  'COLOR_YUV2GRAY_420'  ()  ())
#('const cv.COLOR_YUV420sp2GRAY'  'COLOR_YUV2GRAY_420'  ()  ())
#('const cv.COLOR_YUV420p2GRAY'  'COLOR_YUV2GRAY_420'  ()  ())
#('const cv.COLOR_YUV2RGB_UYVY'  '107'  ()  ())
#('const cv.COLOR_YUV2BGR_UYVY'  '108'  ()  ())
#('const cv.COLOR_YUV2RGB_Y422'  'COLOR_YUV2RGB_UYVY'  ()  ())
#('const cv.COLOR_YUV2BGR_Y422'  'COLOR_YUV2BGR_UYVY'  ()  ())
#('const cv.COLOR_YUV2RGB_UYNV'  'COLOR_YUV2RGB_UYVY'  ()  ())
#('const cv.COLOR_YUV2BGR_UYNV'  'COLOR_YUV2BGR_UYVY'  ()  ())
#('const cv.COLOR_YUV2RGBA_UYVY'  '111'  ()  ())
#('const cv.COLOR_YUV2BGRA_UYVY'  '112'  ()  ())
#('const cv.COLOR_YUV2RGBA_Y422'  'COLOR_YUV2RGBA_UYVY'  ()  ())
#('const cv.COLOR_YUV2BGRA_Y422'  'COLOR_YUV2BGRA_UYVY'  ()  ())
#('const cv.COLOR_YUV2RGBA_UYNV'  'COLOR_YUV2RGBA_UYVY'  ()  ())
#('const cv.COLOR_YUV2BGRA_UYNV'  'COLOR_YUV2BGRA_UYVY'  ()  ())
#('const cv.COLOR_YUV2RGB_YUY2'  '115'  ()  ())
#('const cv.COLOR_YUV2BGR_YUY2'  '116'  ()  ())
#('const cv.COLOR_YUV2RGB_YVYU'  '117'  ()  ())
#('const cv.COLOR_YUV2BGR_YVYU'  '118'  ()  ())
#('const cv.COLOR_YUV2RGB_YUYV'  'COLOR_YUV2RGB_YUY2'  ()  ())
#('const cv.COLOR_YUV2BGR_YUYV'  'COLOR_YUV2BGR_YUY2'  ()  ())
#('const cv.COLOR_YUV2RGB_YUNV'  'COLOR_YUV2RGB_YUY2'  ()  ())
#('const cv.COLOR_YUV2BGR_YUNV'  'COLOR_YUV2BGR_YUY2'  ()  ())
#('const cv.COLOR_YUV2RGBA_YUY2'  '119'  ()  ())
#('const cv.COLOR_YUV2BGRA_YUY2'  '120'  ()  ())
#('const cv.COLOR_YUV2RGBA_YVYU'  '121'  ()  ())
#('const cv.COLOR_YUV2BGRA_YVYU'  '122'  ()  ())
#('const cv.COLOR_YUV2RGBA_YUYV'  'COLOR_YUV2RGBA_YUY2'  ()  ())
#('const cv.COLOR_YUV2BGRA_YUYV'  'COLOR_YUV2BGRA_YUY2'  ()  ())
#('const cv.COLOR_YUV2RGBA_YUNV'  'COLOR_YUV2RGBA_YUY2'  ()  ())
#('const cv.COLOR_YUV2BGRA_YUNV'  'COLOR_YUV2BGRA_YUY2'  ()  ())
#('const cv.COLOR_YUV2GRAY_UYVY'  '123'  ()  ())
#('const cv.COLOR_YUV2GRAY_YUY2'  '124'  ()  ())
#('const cv.COLOR_YUV2GRAY_Y422'  'COLOR_YUV2GRAY_UYVY'  ()  ())
#('const cv.COLOR_YUV2GRAY_UYNV'  'COLOR_YUV2GRAY_UYVY'  ()  ())
#('const cv.COLOR_YUV2GRAY_YVYU'  'COLOR_YUV2GRAY_YUY2'  ()  ())
#('const cv.COLOR_YUV2GRAY_YUYV'  'COLOR_YUV2GRAY_YUY2'  ()  ())
#('const cv.COLOR_YUV2GRAY_YUNV'  'COLOR_YUV2GRAY_YUY2'  ()  ())
#('const cv.COLOR_RGBA2mRGBA'  '125'  ()  ())
#('const cv.COLOR_mRGBA2RGBA'  '126'  ()  ())
#('const cv.COLOR_RGB2YUV_I420'  '127'  ()  ())
#('const cv.COLOR_BGR2YUV_I420'  '128'  ()  ())
#('const cv.COLOR_RGB2YUV_IYUV'  'COLOR_RGB2YUV_I420'  ()  ())
#('const cv.COLOR_BGR2YUV_IYUV'  'COLOR_BGR2YUV_I420'  ()  ())
#('const cv.COLOR_RGBA2YUV_I420'  '129'  ()  ())
#('const cv.COLOR_BGRA2YUV_I420'  '130'  ()  ())
#('const cv.COLOR_RGBA2YUV_IYUV'  'COLOR_RGBA2YUV_I420'  ()  ())
#('const cv.COLOR_BGRA2YUV_IYUV'  'COLOR_BGRA2YUV_I420'  ()  ())
#('const cv.COLOR_RGB2YUV_YV12'  '131'  ()  ())
#('const cv.COLOR_BGR2YUV_YV12'  '132'  ()  ())
#('const cv.COLOR_RGBA2YUV_YV12'  '133'  ()  ())
#('const cv.COLOR_BGRA2YUV_YV12'  '134'  ()  ())
#('const cv.COLOR_BayerBG2BGR'  '46'  ()  ())
#('const cv.COLOR_BayerGB2BGR'  '47'  ()  ())
#('const cv.COLOR_BayerRG2BGR'  '48'  ()  ())
#('const cv.COLOR_BayerGR2BGR'  '49'  ()  ())
#('const cv.COLOR_BayerBG2RGB'  'COLOR_BayerRG2BGR'  ()  ())
#('const cv.COLOR_BayerGB2RGB'  'COLOR_BayerGR2BGR'  ()  ())
#('const cv.COLOR_BayerRG2RGB'  'COLOR_BayerBG2BGR'  ()  ())
#('const cv.COLOR_BayerGR2RGB'  'COLOR_BayerGB2BGR'  ()  ())
#('const cv.COLOR_BayerBG2GRAY'  '86'  ()  ())
#('const cv.COLOR_BayerGB2GRAY'  '87'  ()  ())
#('const cv.COLOR_BayerRG2GRAY'  '88'  ()  ())
#('const cv.COLOR_BayerGR2GRAY'  '89'  ()  ())
#('const cv.COLOR_BayerBG2BGR_VNG'  '62'  ()  ())
#('const cv.COLOR_BayerGB2BGR_VNG'  '63'  ()  ())
#('const cv.COLOR_BayerRG2BGR_VNG'  '64'  ()  ())
#('const cv.COLOR_BayerGR2BGR_VNG'  '65'  ()  ())
#('const cv.COLOR_BayerBG2RGB_VNG'  'COLOR_BayerRG2BGR_VNG'  ()  ())
#('const cv.COLOR_BayerGB2RGB_VNG'  'COLOR_BayerGR2BGR_VNG'  ()  ())
#('const cv.COLOR_BayerRG2RGB_VNG'  'COLOR_BayerBG2BGR_VNG'  ()  ())
#('const cv.COLOR_BayerGR2RGB_VNG'  'COLOR_BayerGB2BGR_VNG'  ()  ())
#('const cv.COLOR_BayerBG2BGR_EA'  '135'  ()  ())
#('const cv.COLOR_BayerGB2BGR_EA'  '136'  ()  ())
#('const cv.COLOR_BayerRG2BGR_EA'  '137'  ()  ())
#('const cv.COLOR_BayerGR2BGR_EA'  '138'  ()  ())
#('const cv.COLOR_BayerBG2RGB_EA'  'COLOR_BayerRG2BGR_EA'  ()  ())
#('const cv.COLOR_BayerGB2RGB_EA'  'COLOR_BayerGR2BGR_EA'  ()  ())
#('const cv.COLOR_BayerRG2RGB_EA'  'COLOR_BayerBG2BGR_EA'  ()  ())
#('const cv.COLOR_BayerGR2RGB_EA'  'COLOR_BayerGB2BGR_EA'  ()  ())
#('const cv.COLOR_COLORCVT_MAX'  '139'  ()  ())
#('const cv.INTERSECT_NONE'  '0'  ()  ())
#('const cv.INTERSECT_PARTIAL'  '1'  ()  ())
#('const cv.INTERSECT_FULL'  '2'  ()  ())
#('class cv.CLAHE'  ': cv::Algorithm'  ()  ())
#('cv.CLAHE.apply'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.CLAHE.setClipLimit'  'void'  ()  (('double'  'clipLimit'  ''  ()))  'void')
#('cv.CLAHE.getClipLimit'  'double'  ()  ()  'double')
#('cv.CLAHE.setTilesGridSize'  'void'  ()  (('Size'  'tileGridSize'  ''  ()))  'void')
#('cv.CLAHE.getTilesGridSize'  'Size'  ()  ()  'Size')
#('cv.CLAHE.collectGarbage'  'void'  ()  ()  'void')
#('class cv.Subdiv2D'  ''  ()  ())
#('const cv.Subdiv2D.PTLOC_ERROR'  '-2'  ()  ())
#('const cv.Subdiv2D.PTLOC_OUTSIDE_RECT'  '-1'  ()  ())
#('const cv.Subdiv2D.PTLOC_INSIDE'  '0'  ()  ())
#('const cv.Subdiv2D.PTLOC_VERTEX'  '1'  ()  ())
#('const cv.Subdiv2D.PTLOC_ON_EDGE'  '2'  ()  ())
#('const cv.Subdiv2D.NEXT_AROUND_ORG'  '0x00'  ()  ())
#('const cv.Subdiv2D.NEXT_AROUND_DST'  '0x22'  ()  ())
#('const cv.Subdiv2D.PREV_AROUND_ORG'  '0x11'  ()  ())
#('const cv.Subdiv2D.PREV_AROUND_DST'  '0x33'  ()  ())
#('const cv.Subdiv2D.NEXT_AROUND_LEFT'  '0x13'  ()  ())
#('const cv.Subdiv2D.NEXT_AROUND_RIGHT'  '0x31'  ()  ())
#('const cv.Subdiv2D.PREV_AROUND_LEFT'  '0x20'  ()  ())
#('const cv.Subdiv2D.PREV_AROUND_RIGHT'  '0x02'  ()  ())
#('cv.Subdiv2D.Subdiv2D'  ''  ()  ())
#('cv.Subdiv2D.Subdiv2D'  ''  ()  (('Rect'  'rect'  ''  ())))
#('cv.Subdiv2D.initDelaunay'  'void'  ()  (('Rect'  'rect'  ''  ()))  'void')
#('cv.Subdiv2D.insert'  'int'  ()  (('Point2f'  'pt'  ''  ()))  'int')
#('cv.Subdiv2D.insert'  'void'  ()  (('vector_Point2f'  'ptvec'  ''  ()))  'void')
#('cv.Subdiv2D.locate'  'int'  ()  (('Point2f'  'pt'  ''  ())  ('int'  'edge'  ''  ('/O'))  ('int'  'vertex'  ''  ('/O')))  'int')
#('cv.Subdiv2D.findNearest'  'int'  ()  (('Point2f'  'pt'  ''  ())  ('Point2f*'  'nearestPt'  '0'  ('/O')))  'int')
#('cv.Subdiv2D.getEdgeList'  'void'  ()  (('vector_Vec4f'  'edgeList'  ''  ('/O')))  'void')
#('cv.Subdiv2D.getTriangleList'  'void'  ()  (('vector_Vec6f'  'triangleList'  ''  ('/O')))  'void')
#('cv.Subdiv2D.getVoronoiFacetList'  'void'  ()  (('vector_int'  'idx'  ''  ())  ('vector_vector_Point2f'  'facetList'  ''  ('/O'))  ('vector_Point2f'  'facetCenters'  ''  ('/O')))  'void')
#('cv.Subdiv2D.getVertex'  'Point2f'  ()  (('int'  'vertex'  ''  ())  ('int*'  'firstEdge'  '0'  ('/O')))  'Point2f')
#('cv.Subdiv2D.getEdge'  'int'  ()  (('int'  'edge'  ''  ())  ('int'  'nextEdgeType'  ''  ()))  'int')
#('cv.Subdiv2D.nextEdge'  'int'  ()  (('int'  'edge'  ''  ()))  'int')
#('cv.Subdiv2D.rotateEdge'  'int'  ()  (('int'  'edge'  ''  ())  ('int'  'rotate'  ''  ()))  'int')
#('cv.Subdiv2D.symEdge'  'int'  ()  (('int'  'edge'  ''  ()))  'int')
#('cv.Subdiv2D.edgeOrg'  'int'  ()  (('int'  'edge'  ''  ())  ('Point2f*'  'orgpt'  '0'  ('/O')))  'int')
#('cv.Subdiv2D.edgeDst'  'int'  ()  (('int'  'edge'  ''  ())  ('Point2f*'  'dstpt'  '0'  ('/O')))  'int')
#('class cv.LineSegmentDetector'  ': cv::Algorithm'  ()  ())
#('cv.LineSegmentDetector.detect'  'void'  ()  (('Mat'  '_image'  ''  ())  ('Mat'  '_lines'  ''  ('/O'))  ('Mat'  'width'  'Mat()'  ('/O'))  ('Mat'  'prec'  'Mat()'  ('/O'))  ('Mat'  'nfa'  'Mat()'  ('/O')))  'void')
#('cv.LineSegmentDetector.drawSegments'  'void'  ()  (('Mat'  '_image'  ''  ('/IO'))  ('Mat'  'lines'  ''  ()))  'void')
#('cv.LineSegmentDetector.compareSegments'  'int'  ()  (('Size'  'size'  ''  ())  ('Mat'  'lines1'  ''  ())  ('Mat'  'lines2'  ''  ())  ('Mat'  '_image'  'Mat()'  ('/IO')))  'int')
#('cv.createLineSegmentDetector'  'Ptr_LineSegmentDetector'  ()  (('int'  '_refine'  'LSD_REFINE_STD'  ())  ('double'  '_scale'  '0.8'  ())  ('double'  '_sigma_scale'  '0.6'  ())  ('double'  '_quant'  '2.0'  ())  ('double'  '_ang_th'  '22.5'  ())  ('double'  '_log_eps'  '0'  ())  ('double'  '_density_th'  '0.7'  ())  ('int'  '_n_bins'  '1024'  ()))  'Ptr<LineSegmentDetector>')
#('cv.getGaussianKernel'  'Mat'  ()  (('int'  'ksize'  ''  ())  ('double'  'sigma'  ''  ())  ('int'  'ktype'  'CV_64F'  ()))  'Mat')
#('cv.getDerivKernels'  'void'  ()  (('Mat'  'kx'  ''  ('/O'))  ('Mat'  'ky'  ''  ('/O'))  ('int'  'dx'  ''  ())  ('int'  'dy'  ''  ())  ('int'  'ksize'  ''  ())  ('bool'  'normalize'  'false'  ())  ('int'  'ktype'  'CV_32F'  ()))  'void')
#('cv.getGaborKernel'  'Mat'  ()  (('Size'  'ksize'  ''  ())  ('double'  'sigma'  ''  ())  ('double'  'theta'  ''  ())  ('double'  'lambd'  ''  ())  ('double'  'gamma'  ''  ())  ('double'  'psi'  'CV_PI*0.5'  ())  ('int'  'ktype'  'CV_64F'  ()))  'Mat')
#('cv.getStructuringElement'  'Mat'  ()  (('int'  'shape'  ''  ())  ('Size'  'ksize'  ''  ())  ('Point'  'anchor'  'Point(-1 -1)'  ()))  'Mat')
#('cv.medianBlur'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'ksize'  ''  ()))  'void')
#('cv.GaussianBlur'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Size'  'ksize'  ''  ())  ('double'  'sigmaX'  ''  ())  ('double'  'sigmaY'  '0'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.bilateralFilter'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'd'  ''  ())  ('double'  'sigmaColor'  ''  ())  ('double'  'sigmaSpace'  ''  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.boxFilter'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'ddepth'  ''  ())  ('Size'  'ksize'  ''  ())  ('Point'  'anchor'  'Point(-1 -1)'  ())  ('bool'  'normalize'  'true'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.sqrBoxFilter'  'void'  ()  (('Mat'  '_src'  ''  ())  ('Mat'  '_dst'  ''  ('/O'))  ('int'  'ddepth'  ''  ())  ('Size'  'ksize'  ''  ())  ('Point'  'anchor'  'Point(-1  -1)'  ())  ('bool'  'normalize'  'true'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.blur'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Size'  'ksize'  ''  ())  ('Point'  'anchor'  'Point(-1 -1)'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.filter2D'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'ddepth'  ''  ())  ('Mat'  'kernel'  ''  ())  ('Point'  'anchor'  'Point(-1 -1)'  ())  ('double'  'delta'  '0'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.sepFilter2D'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'ddepth'  ''  ())  ('Mat'  'kernelX'  ''  ())  ('Mat'  'kernelY'  ''  ())  ('Point'  'anchor'  'Point(-1 -1)'  ())  ('double'  'delta'  '0'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.Sobel'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'ddepth'  ''  ())  ('int'  'dx'  ''  ())  ('int'  'dy'  ''  ())  ('int'  'ksize'  '3'  ())  ('double'  'scale'  '1'  ())  ('double'  'delta'  '0'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.Scharr'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'ddepth'  ''  ())  ('int'  'dx'  ''  ())  ('int'  'dy'  ''  ())  ('double'  'scale'  '1'  ())  ('double'  'delta'  '0'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.Laplacian'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'ddepth'  ''  ())  ('int'  'ksize'  '1'  ())  ('double'  'scale'  '1'  ())  ('double'  'delta'  '0'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.Canny'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'edges'  ''  ('/O'))  ('double'  'threshold1'  ''  ())  ('double'  'threshold2'  ''  ())  ('int'  'apertureSize'  '3'  ())  ('bool'  'L2gradient'  'false'  ()))  'void')
#('cv.cornerMinEigenVal'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'blockSize'  ''  ())  ('int'  'ksize'  '3'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.cornerHarris'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'blockSize'  ''  ())  ('int'  'ksize'  ''  ())  ('double'  'k'  ''  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.cornerEigenValsAndVecs'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'blockSize'  ''  ())  ('int'  'ksize'  ''  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.preCornerDetect'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'ksize'  ''  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.cornerSubPix'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'corners'  ''  ('/IO'))  ('Size'  'winSize'  ''  ())  ('Size'  'zeroZone'  ''  ())  ('TermCriteria'  'criteria'  ''  ()))  'void')
#('cv.goodFeaturesToTrack'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'corners'  ''  ('/O'))  ('int'  'maxCorners'  ''  ())  ('double'  'qualityLevel'  ''  ())  ('double'  'minDistance'  ''  ())  ('Mat'  'mask'  'Mat()'  ())  ('int'  'blockSize'  '3'  ())  ('bool'  'useHarrisDetector'  'false'  ())  ('double'  'k'  '0.04'  ()))  'void')
#('cv.HoughLines'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'lines'  ''  ('/O'))  ('double'  'rho'  ''  ())  ('double'  'theta'  ''  ())  ('int'  'threshold'  ''  ())  ('double'  'srn'  '0'  ())  ('double'  'stn'  '0'  ())  ('double'  'min_theta'  '0'  ())  ('double'  'max_theta'  'CV_PI'  ()))  'void')
#('cv.HoughLinesP'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'lines'  ''  ('/O'))  ('double'  'rho'  ''  ())  ('double'  'theta'  ''  ())  ('int'  'threshold'  ''  ())  ('double'  'minLineLength'  '0'  ())  ('double'  'maxLineGap'  '0'  ()))  'void')
#('cv.HoughCircles'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'circles'  ''  ('/O'))  ('int'  'method'  ''  ())  ('double'  'dp'  ''  ())  ('double'  'minDist'  ''  ())  ('double'  'param1'  '100'  ())  ('double'  'param2'  '100'  ())  ('int'  'minRadius'  '0'  ())  ('int'  'maxRadius'  '0'  ()))  'void')
#('cv.erode'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'kernel'  ''  ())  ('Point'  'anchor'  'Point(-1 -1)'  ())  ('int'  'iterations'  '1'  ())  ('int'  'borderType'  'BORDER_CONSTANT'  ())  ('Scalar'  'borderValue'  'morphologyDefaultBorderValue()'  ()))  'void')
#('cv.dilate'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'kernel'  ''  ())  ('Point'  'anchor'  'Point(-1 -1)'  ())  ('int'  'iterations'  '1'  ())  ('int'  'borderType'  'BORDER_CONSTANT'  ())  ('Scalar'  'borderValue'  'morphologyDefaultBorderValue()'  ()))  'void')
#('cv.morphologyEx'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'op'  ''  ())  ('Mat'  'kernel'  ''  ())  ('Point'  'anchor'  'Point(-1 -1)'  ())  ('int'  'iterations'  '1'  ())  ('int'  'borderType'  'BORDER_CONSTANT'  ())  ('Scalar'  'borderValue'  'morphologyDefaultBorderValue()'  ()))  'void')
#('cv.resize'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Size'  'dsize'  ''  ())  ('double'  'fx'  '0'  ())  ('double'  'fy'  '0'  ())  ('int'  'interpolation'  'INTER_LINEAR'  ()))  'void')
#('cv.warpAffine'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'M'  ''  ())  ('Size'  'dsize'  ''  ())  ('int'  'flags'  'INTER_LINEAR'  ())  ('int'  'borderMode'  'BORDER_CONSTANT'  ())  ('Scalar'  'borderValue'  'Scalar()'  ()))  'void')
#('cv.warpPerspective'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'M'  ''  ())  ('Size'  'dsize'  ''  ())  ('int'  'flags'  'INTER_LINEAR'  ())  ('int'  'borderMode'  'BORDER_CONSTANT'  ())  ('Scalar'  'borderValue'  'Scalar()'  ()))  'void')
#('cv.remap'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'map1'  ''  ())  ('Mat'  'map2'  ''  ())  ('int'  'interpolation'  ''  ())  ('int'  'borderMode'  'BORDER_CONSTANT'  ())  ('Scalar'  'borderValue'  'Scalar()'  ()))  'void')
#('cv.convertMaps'  'void'  ()  (('Mat'  'map1'  ''  ())  ('Mat'  'map2'  ''  ())  ('Mat'  'dstmap1'  ''  ('/O'))  ('Mat'  'dstmap2'  ''  ('/O'))  ('int'  'dstmap1type'  ''  ())  ('bool'  'nninterpolation'  'false'  ()))  'void')
#('cv.getRotationMatrix2D'  'Mat'  ()  (('Point2f'  'center'  ''  ())  ('double'  'angle'  ''  ())  ('double'  'scale'  ''  ()))  'Mat')
#('cv.invertAffineTransform'  'void'  ()  (('Mat'  'M'  ''  ())  ('Mat'  'iM'  ''  ('/O')))  'void')
#('cv.getPerspectiveTransform'  'Mat'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ()))  'Mat')
#('cv.getAffineTransform'  'Mat'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ()))  'Mat')
#('cv.getRectSubPix'  'void'  ()  (('Mat'  'image'  ''  ())  ('Size'  'patchSize'  ''  ())  ('Point2f'  'center'  ''  ())  ('Mat'  'patch'  ''  ('/O'))  ('int'  'patchType'  '-1'  ()))  'void')
#('cv.logPolar'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Point2f'  'center'  ''  ())  ('double'  'M'  ''  ())  ('int'  'flags'  ''  ()))  'void')
#('cv.linearPolar'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Point2f'  'center'  ''  ())  ('double'  'maxRadius'  ''  ())  ('int'  'flags'  ''  ()))  'void')
#('cv.integral'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'sum'  ''  ('/O'))  ('int'  'sdepth'  '-1'  ()))  'void')
#('cv.integral'  'void'  ('=integral2')  (('Mat'  'src'  ''  ())  ('Mat'  'sum'  ''  ('/O'))  ('Mat'  'sqsum'  ''  ('/O'))  ('int'  'sdepth'  '-1'  ())  ('int'  'sqdepth'  '-1'  ()))  'void')
#('cv.integral'  'void'  ('=integral3')  (('Mat'  'src'  ''  ())  ('Mat'  'sum'  ''  ('/O'))  ('Mat'  'sqsum'  ''  ('/O'))  ('Mat'  'tilted'  ''  ('/O'))  ('int'  'sdepth'  '-1'  ())  ('int'  'sqdepth'  '-1'  ()))  'void')
#('cv.accumulate'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/IO'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.accumulateSquare'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/IO'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.accumulateProduct'  'void'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'dst'  ''  ('/IO'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.accumulateWeighted'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/IO'))  ('double'  'alpha'  ''  ())  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.phaseCorrelate'  'Point2d'  ()  (('Mat'  'src1'  ''  ())  ('Mat'  'src2'  ''  ())  ('Mat'  'window'  'Mat()'  ())  ('double*'  'response'  '0'  ('/O')))  'Point2d')
#('cv.createHanningWindow'  'void'  ()  (('Mat'  'dst'  ''  ('/O'))  ('Size'  'winSize'  ''  ())  ('int'  'type'  ''  ()))  'void')
#('cv.threshold'  'double'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('double'  'thresh'  ''  ())  ('double'  'maxval'  ''  ())  ('int'  'type'  ''  ()))  'double')
#('cv.adaptiveThreshold'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('double'  'maxValue'  ''  ())  ('int'  'adaptiveMethod'  ''  ())  ('int'  'thresholdType'  ''  ())  ('int'  'blockSize'  ''  ())  ('double'  'C'  ''  ()))  'void')
#('cv.pyrDown'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Size'  'dstsize'  'Size()'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.pyrUp'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Size'  'dstsize'  'Size()'  ())  ('int'  'borderType'  'BORDER_DEFAULT'  ()))  'void')
#('cv.undistort'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'cameraMatrix'  ''  ())  ('Mat'  'distCoeffs'  ''  ())  ('Mat'  'newCameraMatrix'  'Mat()'  ()))  'void')
#('cv.initUndistortRectifyMap'  'void'  ()  (('Mat'  'cameraMatrix'  ''  ())  ('Mat'  'distCoeffs'  ''  ())  ('Mat'  'R'  ''  ())  ('Mat'  'newCameraMatrix'  ''  ())  ('Size'  'size'  ''  ())  ('int'  'm1type'  ''  ())  ('Mat'  'map1'  ''  ('/O'))  ('Mat'  'map2'  ''  ('/O')))  'void')
#('cv.initWideAngleProjMap'  'float'  ()  (('Mat'  'cameraMatrix'  ''  ())  ('Mat'  'distCoeffs'  ''  ())  ('Size'  'imageSize'  ''  ())  ('int'  'destImageWidth'  ''  ())  ('int'  'm1type'  ''  ())  ('Mat'  'map1'  ''  ('/O'))  ('Mat'  'map2'  ''  ('/O'))  ('int'  'projType'  'PROJ_SPHERICAL_EQRECT'  ())  ('double'  'alpha'  '0'  ()))  'float')
#('cv.getDefaultNewCameraMatrix'  'Mat'  ()  (('Mat'  'cameraMatrix'  ''  ())  ('Size'  'imgsize'  'Size()'  ())  ('bool'  'centerPrincipalPoint'  'false'  ()))  'Mat')
#('cv.undistortPoints'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'cameraMatrix'  ''  ())  ('Mat'  'distCoeffs'  ''  ())  ('Mat'  'R'  'Mat()'  ())  ('Mat'  'P'  'Mat()'  ()))  'void')
#('cv.calcHist'  'void'  ()  (('vector_Mat'  'images'  ''  ())  ('vector_int'  'channels'  ''  ())  ('Mat'  'mask'  ''  ())  ('Mat'  'hist'  ''  ('/O'))  ('vector_int'  'histSize'  ''  ())  ('vector_float'  'ranges'  ''  ())  ('bool'  'accumulate'  'false'  ()))  'void')
#('cv.calcBackProject'  'void'  ()  (('vector_Mat'  'images'  ''  ())  ('vector_int'  'channels'  ''  ())  ('Mat'  'hist'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('vector_float'  'ranges'  ''  ())  ('double'  'scale'  ''  ()))  'void')
#('cv.compareHist'  'double'  ()  (('Mat'  'H1'  ''  ())  ('Mat'  'H2'  ''  ())  ('int'  'method'  ''  ()))  'double')
#('cv.equalizeHist'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.watershed'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'markers'  ''  ('/IO')))  'void')
#('cv.pyrMeanShiftFiltering'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('double'  'sp'  ''  ())  ('double'  'sr'  ''  ())  ('int'  'maxLevel'  '1'  ())  ('TermCriteria'  'termcrit'  'TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS 5 1)'  ()))  'void')
#('cv.grabCut'  'void'  ()  (('Mat'  'img'  ''  ())  ('Mat'  'mask'  ''  ('/IO'))  ('Rect'  'rect'  ''  ())  ('Mat'  'bgdModel'  ''  ('/IO'))  ('Mat'  'fgdModel'  ''  ('/IO'))  ('int'  'iterCount'  ''  ())  ('int'  'mode'  'GC_EVAL'  ()))  'void')
#('cv.distanceTransform'  'void'  ('=distanceTransformWithLabels')  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'labels'  ''  ('/O'))  ('int'  'distanceType'  ''  ())  ('int'  'maskSize'  ''  ())  ('int'  'labelType'  'DIST_LABEL_CCOMP'  ()))  'void')
#('cv.distanceTransform'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'distanceType'  ''  ())  ('int'  'maskSize'  ''  ())  ('int'  'dstType'  'CV_32F'  ()))  'void')
#('cv.floodFill'  'int'  ()  (('Mat'  'image'  ''  ('/IO'))  ('Mat'  'mask'  ''  ('/IO'))  ('Point'  'seedPoint'  ''  ())  ('Scalar'  'newVal'  ''  ())  ('Rect*'  'rect'  '0'  ('/O'))  ('Scalar'  'loDiff'  'Scalar()'  ())  ('Scalar'  'upDiff'  'Scalar()'  ())  ('int'  'flags'  '4'  ()))  'int')
#('cv.cvtColor'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'code'  ''  ())  ('int'  'dstCn'  '0'  ()))  'void')
#('cv.demosaicing'  'void'  ()  (('Mat'  '_src'  ''  ())  ('Mat'  '_dst'  ''  ('/O'))  ('int'  'code'  ''  ())  ('int'  'dcn'  '0'  ()))  'void')
#('cv.moments'  'Moments'  ()  (('Mat'  'array'  ''  ())  ('bool'  'binaryImage'  'false'  ()))  'Moments')
#('cv.HuMoments'  'void'  ()  (('Moments'  'm'  ''  ())  ('Mat'  'hu'  ''  ('/O')))  'void')
#('const cv.TM_SQDIFF'  '0'  ()  ())
#('const cv.TM_SQDIFF_NORMED'  '1'  ()  ())
#('const cv.TM_CCORR'  '2'  ()  ())
#('const cv.TM_CCORR_NORMED'  '3'  ()  ())
#('const cv.TM_CCOEFF'  '4'  ()  ())
#('const cv.TM_CCOEFF_NORMED'  '5'  ()  ())
#('cv.matchTemplate'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'templ'  ''  ())  ('Mat'  'result'  ''  ('/O'))  ('int'  'method'  ''  ())  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.connectedComponents'  'int'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'labels'  ''  ('/O'))  ('int'  'connectivity'  '8'  ())  ('int'  'ltype'  'CV_32S'  ()))  'int')
#('cv.connectedComponentsWithStats'  'int'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'labels'  ''  ('/O'))  ('Mat'  'stats'  ''  ('/O'))  ('Mat'  'centroids'  ''  ('/O'))  ('int'  'connectivity'  '8'  ())  ('int'  'ltype'  'CV_32S'  ()))  'int')
#('cv.findContours'  'void'  ()  (('Mat'  'image'  ''  ('/IO'))  ('vector_Mat'  'contours'  ''  ('/O'))  ('Mat'  'hierarchy'  ''  ('/O'))  ('int'  'mode'  ''  ())  ('int'  'method'  ''  ())  ('Point'  'offset'  'Point()'  ()))  'void')
#('cv.approxPolyDP'  'void'  ()  (('Mat'  'curve'  ''  ())  ('Mat'  'approxCurve'  ''  ('/O'))  ('double'  'epsilon'  ''  ())  ('bool'  'closed'  ''  ()))  'void')
#('cv.arcLength'  'double'  ()  (('Mat'  'curve'  ''  ())  ('bool'  'closed'  ''  ()))  'double')
#('cv.boundingRect'  'Rect'  ()  (('Mat'  'points'  ''  ()))  'Rect')
#('cv.contourArea'  'double'  ()  (('Mat'  'contour'  ''  ())  ('bool'  'oriented'  'false'  ()))  'double')
#('cv.minAreaRect'  'RotatedRect'  ()  (('Mat'  'points'  ''  ()))  'RotatedRect')
#('cv.boxPoints'  'void'  ()  (('RotatedRect'  'box'  ''  ())  ('Mat'  'points'  ''  ('/O')))  'void')
#('cv.minEnclosingCircle'  'void'  ()  (('Mat'  'points'  ''  ())  ('Point2f'  'center'  ''  ('/O'))  ('float'  'radius'  ''  ('/O')))  'void')
#('cv.minEnclosingTriangle'  'double'  ()  (('Mat'  'points'  ''  ())  ('Mat'  'triangle'  ''  ('/O'  '/O')))  'double')
#('cv.matchShapes'  'double'  ()  (('Mat'  'contour1'  ''  ())  ('Mat'  'contour2'  ''  ())  ('int'  'method'  ''  ())  ('double'  'parameter'  ''  ()))  'double')
#('cv.convexHull'  'void'  ()  (('Mat'  'points'  ''  ())  ('Mat'  'hull'  ''  ('/O'))  ('bool'  'clockwise'  'false'  ())  ('bool'  'returnPoints'  'true'  ()))  'void')
#('cv.convexityDefects'  'void'  ()  (('Mat'  'contour'  ''  ())  ('Mat'  'convexhull'  ''  ())  ('Mat'  'convexityDefects'  ''  ('/O')))  'void')
#('cv.isContourConvex'  'bool'  ()  (('Mat'  'contour'  ''  ()))  'bool')
#('cv.intersectConvexConvex'  'float'  ()  (('Mat'  '_p1'  ''  ())  ('Mat'  '_p2'  ''  ())  ('Mat'  '_p12'  ''  ('/O'))  ('bool'  'handleNested'  'true'  ()))  'float')
#('cv.fitEllipse'  'RotatedRect'  ()  (('Mat'  'points'  ''  ()))  'RotatedRect')
#('cv.fitLine'  'void'  ()  (('Mat'  'points'  ''  ())  ('Mat'  'line'  ''  ('/O'))  ('int'  'distType'  ''  ())  ('double'  'param'  ''  ())  ('double'  'reps'  ''  ())  ('double'  'aeps'  ''  ()))  'void')
#('cv.pointPolygonTest'  'double'  ()  (('Mat'  'contour'  ''  ())  ('Point2f'  'pt'  ''  ())  ('bool'  'measureDist'  ''  ()))  'double')
#('cv.rotatedRectangleIntersection'  'int'  ()  (('RotatedRect'  'rect1'  ''  ())  ('RotatedRect'  'rect2'  ''  ())  ('Mat'  'intersectingRegion'  ''  ('/O')))  'int')
#('cv.createCLAHE'  'Ptr_CLAHE'  ()  (('double'  'clipLimit'  '40.0'  ())  ('Size'  'tileGridSize'  'Size(8  8)'  ()))  'Ptr<CLAHE>')
#('const cv.COLORMAP_AUTUMN'  '0'  ()  ())
#('const cv.COLORMAP_BONE'  '1'  ()  ())
#('const cv.COLORMAP_JET'  '2'  ()  ())
#('const cv.COLORMAP_WINTER'  '3'  ()  ())
#('const cv.COLORMAP_RAINBOW'  '4'  ()  ())
#('const cv.COLORMAP_OCEAN'  '5'  ()  ())
#('const cv.COLORMAP_SUMMER'  '6'  ()  ())
#('const cv.COLORMAP_SPRING'  '7'  ()  ())
#('const cv.COLORMAP_COOL'  '8'  ()  ())
#('const cv.COLORMAP_HSV'  '9'  ()  ())
#('const cv.COLORMAP_PINK'  '10'  ()  ())
#('const cv.COLORMAP_HOT'  '11'  ()  ())
#('cv.applyColorMap'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'colormap'  ''  ()))  'void')
#('cv.line'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('Point'  'pt1'  ''  ())  ('Point'  'pt2'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'lineType'  'LINE_8'  ())  ('int'  'shift'  '0'  ()))  'void')
#('cv.arrowedLine'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('Point'  'pt1'  ''  ())  ('Point'  'pt2'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'line_type'  '8'  ())  ('int'  'shift'  '0'  ())  ('double'  'tipLength'  '0.1'  ()))  'void')
#('cv.rectangle'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('Point'  'pt1'  ''  ())  ('Point'  'pt2'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'lineType'  'LINE_8'  ())  ('int'  'shift'  '0'  ()))  'void')
#('cv.circle'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('Point'  'center'  ''  ())  ('int'  'radius'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'lineType'  'LINE_8'  ())  ('int'  'shift'  '0'  ()))  'void')
#('cv.ellipse'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('Point'  'center'  ''  ())  ('Size'  'axes'  ''  ())  ('double'  'angle'  ''  ())  ('double'  'startAngle'  ''  ())  ('double'  'endAngle'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'lineType'  'LINE_8'  ())  ('int'  'shift'  '0'  ()))  'void')
#('cv.ellipse'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('RotatedRect'  'box'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'lineType'  'LINE_8'  ()))  'void')
#('cv.fillConvexPoly'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('Mat'  'points'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'lineType'  'LINE_8'  ())  ('int'  'shift'  '0'  ()))  'void')
#('cv.fillPoly'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('vector_Mat'  'pts'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'lineType'  'LINE_8'  ())  ('int'  'shift'  '0'  ())  ('Point'  'offset'  'Point()'  ()))  'void')
#('cv.polylines'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('vector_Mat'  'pts'  ''  ())  ('bool'  'isClosed'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'lineType'  'LINE_8'  ())  ('int'  'shift'  '0'  ()))  'void')
#('cv.drawContours'  'void'  ()  (('Mat'  'image'  ''  ('/IO'))  ('vector_Mat'  'contours'  ''  ())  ('int'  'contourIdx'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'lineType'  'LINE_8'  ())  ('Mat'  'hierarchy'  'Mat()'  ())  ('int'  'maxLevel'  'INT_MAX'  ())  ('Point'  'offset'  'Point()'  ()))  'void')
#('cv.clipLine'  'bool'  ()  (('Rect'  'imgRect'  ''  ())  ('Point'  'pt1'  ''  ('/O'  '/IO'))  ('Point'  'pt2'  ''  ('/O'  '/IO')))  'bool')
#('cv.ellipse2Poly'  'void'  ()  (('Point'  'center'  ''  ())  ('Size'  'axes'  ''  ())  ('int'  'angle'  ''  ())  ('int'  'arcStart'  ''  ())  ('int'  'arcEnd'  ''  ())  ('int'  'delta'  ''  ())  ('vector_Point'  'pts'  ''  ('/O')))  'void')
#('cv.putText'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('String'  'text'  ''  ())  ('Point'  'org'  ''  ())  ('int'  'fontFace'  ''  ())  ('double'  'fontScale'  ''  ())  ('Scalar'  'color'  ''  ())  ('int'  'thickness'  '1'  ())  ('int'  'lineType'  'LINE_8'  ())  ('bool'  'bottomLeftOrigin'  'false'  ()))  'void')
#('cv.getTextSize'  'Size'  ()  (('String'  'text'  ''  ())  ('int'  'fontFace'  ''  ())  ('double'  'fontScale'  ''  ())  ('int'  'thickness'  ''  ())  ('int*'  'baseLine'  ''  ('/O')))  'Size')
#('const cv.ml.VAR_NUMERICAL'  '0'  ()  ())
#('const cv.ml.VAR_ORDERED'  '0'  ()  ())
#('const cv.ml.VAR_CATEGORICAL'  '1'  ()  ())
#('const cv.ml.TEST_ERROR'  '0'  ()  ())
#('const cv.ml.TRAIN_ERROR'  '1'  ()  ())
#('const cv.ml.ROW_SAMPLE'  '0'  ()  ())
#('const cv.ml.COL_SAMPLE'  '1'  ()  ())
#('class cv.ml.TrainData'  ''  ()  ())
#('cv.ml.TrainData.getLayout'  'int'  ()  ()  'int')
#('cv.ml.TrainData.getNTrainSamples'  'int'  ()  ()  'int')
#('cv.ml.TrainData.getNTestSamples'  'int'  ()  ()  'int')
#('cv.ml.TrainData.getNSamples'  'int'  ()  ()  'int')
#('cv.ml.TrainData.getNVars'  'int'  ()  ()  'int')
#('cv.ml.TrainData.getNAllVars'  'int'  ()  ()  'int')
#('cv.ml.TrainData.getSample'  'void'  ()  (('Mat'  'varIdx'  ''  ())  ('int'  'sidx'  ''  ())  ('float*'  'buf'  ''  ()))  'void')
#('cv.ml.TrainData.getSamples'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getMissing'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getTrainSamples'  'Mat'  ()  (('int'  'layout'  'ROW_SAMPLE'  ())  ('bool'  'compressSamples'  'true'  ())  ('bool'  'compressVars'  'true'  ()))  'Mat')
#('cv.ml.TrainData.getTrainResponses'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getTrainNormCatResponses'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getTestResponses'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getTestNormCatResponses'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getResponses'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getNormCatResponses'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getSampleWeights'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getTrainSampleWeights'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getTestSampleWeights'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getVarIdx'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getVarType'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getResponseType'  'int'  ()  ()  'int')
#('cv.ml.TrainData.getTrainSampleIdx'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getTestSampleIdx'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getValues'  'void'  ()  (('int'  'vi'  ''  ())  ('Mat'  'sidx'  ''  ())  ('float*'  'values'  ''  ()))  'void')
#('cv.ml.TrainData.getDefaultSubstValues'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getCatCount'  'int'  ()  (('int'  'vi'  ''  ()))  'int')
#('cv.ml.TrainData.getClassLabels'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getCatOfs'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.getCatMap'  'Mat'  ()  ()  'Mat')
#('cv.ml.TrainData.setTrainTestSplit'  'void'  ()  (('int'  'count'  ''  ())  ('bool'  'shuffle'  'true'  ()))  'void')
#('cv.ml.TrainData.setTrainTestSplitRatio'  'void'  ()  (('double'  'ratio'  ''  ())  ('bool'  'shuffle'  'true'  ()))  'void')
#('cv.ml.TrainData.shuffleTrainTest'  'void'  ()  ()  'void')
#('cv.ml.TrainData.getSubVector'  'Mat'  ('/S')  (('Mat'  'vec'  ''  ())  ('Mat'  'idx'  ''  ()))  'Mat')
#('cv.ml.TrainData.create'  'Ptr_TrainData'  ('/S')  (('Mat'  'samples'  ''  ())  ('int'  'layout'  ''  ())  ('Mat'  'responses'  ''  ())  ('Mat'  'varIdx'  'Mat()'  ())  ('Mat'  'sampleIdx'  'Mat()'  ())  ('Mat'  'sampleWeights'  'Mat()'  ())  ('Mat'  'varType'  'Mat()'  ()))  'Ptr<TrainData>')
#('class cv.ml.StatModel'  ': cv::Algorithm'  ()  ())
#('const cv.ml.StatModel.UPDATE_MODEL'  '1'  ()  ())
#('const cv.ml.StatModel.RAW_OUTPUT'  '1'  ()  ())
#('const cv.ml.StatModel.COMPRESSED_INPUT'  '2'  ()  ())
#('const cv.ml.StatModel.PREPROCESSED_INPUT'  '4'  ()  ())
#('cv.ml.StatModel.getVarCount'  'int'  ()  ()  'int')
#('cv.ml.StatModel.empty'  'bool'  ()  ()  'bool')
#('cv.ml.StatModel.isTrained'  'bool'  ()  ()  'bool')
#('cv.ml.StatModel.isClassifier'  'bool'  ()  ()  'bool')
#('cv.ml.StatModel.train'  'bool'  ()  (('Ptr_TrainData'  'trainData'  ''  ())  ('int'  'flags'  '0'  ()))  'bool')
#('cv.ml.StatModel.train'  'bool'  ()  (('Mat'  'samples'  ''  ())  ('int'  'layout'  ''  ())  ('Mat'  'responses'  ''  ()))  'bool')
#('cv.ml.StatModel.calcError'  'float'  ()  (('Ptr_TrainData'  'data'  ''  ())  ('bool'  'test'  ''  ())  ('Mat'  'resp'  ''  ('/O')))  'float')
#('cv.ml.StatModel.predict'  'float'  ()  (('Mat'  'samples'  ''  ())  ('Mat'  'results'  'Mat()'  ('/O'))  ('int'  'flags'  '0'  ()))  'float')
#('class cv.ml.NormalBayesClassifier'  ': cv::ml::StatModel'  ()  ())
#('cv.ml.NormalBayesClassifier.predictProb'  'float'  ()  (('Mat'  'inputs'  ''  ())  ('Mat'  'outputs'  ''  ('/O'))  ('Mat'  'outputProbs'  ''  ('/O'))  ('int'  'flags'  '0'  ()))  'float')
#('cv.ml.NormalBayesClassifier.create'  'Ptr_NormalBayesClassifier'  ('/S')  ()  'Ptr<NormalBayesClassifier>')
#('class cv.ml.KNearest'  ': cv::ml::StatModel'  ()  ())
#('cv.ml.KNearest.getDefaultK'  'int'  ()  ()  'int')
#('cv.ml.KNearest.setDefaultK'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.KNearest.getIsClassifier'  'bool'  ()  ()  'bool')
#('cv.ml.KNearest.setIsClassifier'  'void'  ()  (('bool'  'val'  ''  ()))  'void')
#('cv.ml.KNearest.getEmax'  'int'  ()  ()  'int')
#('cv.ml.KNearest.setEmax'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.KNearest.getAlgorithmType'  'int'  ()  ()  'int')
#('cv.ml.KNearest.setAlgorithmType'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.KNearest.findNearest'  'float'  ()  (('Mat'  'samples'  ''  ())  ('int'  'k'  ''  ())  ('Mat'  'results'  ''  ('/O'))  ('Mat'  'neighborResponses'  'Mat()'  ('/O'))  ('Mat'  'dist'  'Mat()'  ('/O')))  'float')
#('const cv.ml.KNearest.BRUTE_FORCE'  '1'  ()  ())
#('const cv.ml.KNearest.KDTREE'  '2'  ()  ())
#('cv.ml.KNearest.create'  'Ptr_KNearest'  ('/S')  ()  'Ptr<KNearest>')
#('class cv.ml.SVM'  ': cv::ml::StatModel'  ()  ())
#('cv.ml.SVM.getType'  'int'  ()  ()  'int')
#('cv.ml.SVM.setType'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getGamma'  'double'  ()  ()  'double')
#('cv.ml.SVM.setGamma'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getCoef0'  'double'  ()  ()  'double')
#('cv.ml.SVM.setCoef0'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getDegree'  'double'  ()  ()  'double')
#('cv.ml.SVM.setDegree'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getC'  'double'  ()  ()  'double')
#('cv.ml.SVM.setC'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getNu'  'double'  ()  ()  'double')
#('cv.ml.SVM.setNu'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getP'  'double'  ()  ()  'double')
#('cv.ml.SVM.setP'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getClassWeights'  'Mat'  ()  ()  'cv::Mat')
#('cv.ml.SVM.setClassWeights'  'void'  ()  (('Mat'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getTermCriteria'  'TermCriteria'  ()  ()  'cv::TermCriteria')
#('cv.ml.SVM.setTermCriteria'  'void'  ()  (('TermCriteria'  'val'  ''  ()))  'void')
#('cv.ml.SVM.getKernelType'  'int'  ()  ()  'int')
#('cv.ml.SVM.setKernel'  'void'  ()  (('int'  'kernelType'  ''  ()))  'void')
#('const cv.ml.SVM.C_SVC'  '100'  ()  ())
#('const cv.ml.SVM.NU_SVC'  '101'  ()  ())
#('const cv.ml.SVM.ONE_CLASS'  '102'  ()  ())
#('const cv.ml.SVM.EPS_SVR'  '103'  ()  ())
#('const cv.ml.SVM.NU_SVR'  '104'  ()  ())
#('const cv.ml.SVM.CUSTOM'  '-1'  ()  ())
#('const cv.ml.SVM.LINEAR'  '0'  ()  ())
#('const cv.ml.SVM.POLY'  '1'  ()  ())
#('const cv.ml.SVM.RBF'  '2'  ()  ())
#('const cv.ml.SVM.SIGMOID'  '3'  ()  ())
#('const cv.ml.SVM.CHI2'  '4'  ()  ())
#('const cv.ml.SVM.INTER'  '5'  ()  ())
#('const cv.ml.SVM.C'  '0'  ()  ())
#('const cv.ml.SVM.GAMMA'  '1'  ()  ())
#('const cv.ml.SVM.P'  '2'  ()  ())
#('const cv.ml.SVM.NU'  '3'  ()  ())
#('const cv.ml.SVM.COEF'  '4'  ()  ())
#('const cv.ml.SVM.DEGREE'  '5'  ()  ())
#('cv.ml.SVM.getSupportVectors'  'Mat'  ()  ()  'Mat')
#('cv.ml.SVM.getDecisionFunction'  'double'  ()  (('int'  'i'  ''  ())  ('Mat'  'alpha'  ''  ('/O'))  ('Mat'  'svidx'  ''  ('/O')))  'double')
#('cv.ml.SVM.create'  'Ptr_SVM'  ('/S')  ()  'Ptr<SVM>')
#('class cv.ml.EM'  ': cv::ml::StatModel'  ()  ())
#('const cv.ml.EM.COV_MAT_SPHERICAL'  '0'  ()  ())
#('const cv.ml.EM.COV_MAT_DIAGONAL'  '1'  ()  ())
#('const cv.ml.EM.COV_MAT_GENERIC'  '2'  ()  ())
#('const cv.ml.EM.COV_MAT_DEFAULT'  'COV_MAT_DIAGONAL'  ()  ())
#('const cv.ml.EM.DEFAULT_NCLUSTERS'  '5'  ()  ())
#('const cv.ml.EM.DEFAULT_MAX_ITERS'  '100'  ()  ())
#('const cv.ml.EM.START_E_STEP'  '1'  ()  ())
#('const cv.ml.EM.START_M_STEP'  '2'  ()  ())
#('const cv.ml.EM.START_AUTO_STEP'  '0'  ()  ())
#('cv.ml.EM.getClustersNumber'  'int'  ()  ()  'int')
#('cv.ml.EM.setClustersNumber'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.EM.getCovarianceMatrixType'  'int'  ()  ()  'int')
#('cv.ml.EM.setCovarianceMatrixType'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.EM.getTermCriteria'  'TermCriteria'  ()  ()  'TermCriteria')
#('cv.ml.EM.setTermCriteria'  'void'  ()  (('TermCriteria'  'val'  ''  ()))  'void')
#('cv.ml.EM.getWeights'  'Mat'  ()  ()  'Mat')
#('cv.ml.EM.getMeans'  'Mat'  ()  ()  'Mat')
#('cv.ml.EM.predict2'  'Vec2d'  ()  (('Mat'  'sample'  ''  ())  ('Mat'  'probs'  ''  ('/O')))  'Vec2d')
#('cv.ml.EM.trainEM'  'bool'  ()  (('Mat'  'samples'  ''  ())  ('Mat'  'logLikelihoods'  'Mat()'  ('/O'))  ('Mat'  'labels'  'Mat()'  ('/O'))  ('Mat'  'probs'  'Mat()'  ('/O')))  'bool')
#('cv.ml.EM.trainE'  'bool'  ()  (('Mat'  'samples'  ''  ())  ('Mat'  'means0'  ''  ())  ('Mat'  'covs0'  'Mat()'  ())  ('Mat'  'weights0'  'Mat()'  ())  ('Mat'  'logLikelihoods'  'Mat()'  ('/O'))  ('Mat'  'labels'  'Mat()'  ('/O'))  ('Mat'  'probs'  'Mat()'  ('/O')))  'bool')
#('cv.ml.EM.trainM'  'bool'  ()  (('Mat'  'samples'  ''  ())  ('Mat'  'probs0'  ''  ())  ('Mat'  'logLikelihoods'  'Mat()'  ('/O'))  ('Mat'  'labels'  'Mat()'  ('/O'))  ('Mat'  'probs'  'Mat()'  ('/O')))  'bool')
#('cv.ml.EM.create'  'Ptr_EM'  ('/S')  ()  'Ptr<EM>')
#('class cv.ml.DTrees'  ': cv::ml::StatModel'  ()  ())
#('const cv.ml.DTrees.PREDICT_AUTO'  '0'  ()  ())
#('const cv.ml.DTrees.PREDICT_SUM'  '(1<<8)'  ()  ())
#('const cv.ml.DTrees.PREDICT_MAX_VOTE'  '(2<<8)'  ()  ())
#('const cv.ml.DTrees.PREDICT_MASK'  '(3<<8)'  ()  ())
#('cv.ml.DTrees.getMaxCategories'  'int'  ()  ()  'int')
#('cv.ml.DTrees.setMaxCategories'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.getMaxDepth'  'int'  ()  ()  'int')
#('cv.ml.DTrees.setMaxDepth'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.getMinSampleCount'  'int'  ()  ()  'int')
#('cv.ml.DTrees.setMinSampleCount'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.getCVFolds'  'int'  ()  ()  'int')
#('cv.ml.DTrees.setCVFolds'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.getUseSurrogates'  'bool'  ()  ()  'bool')
#('cv.ml.DTrees.setUseSurrogates'  'void'  ()  (('bool'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.getUse1SERule'  'bool'  ()  ()  'bool')
#('cv.ml.DTrees.setUse1SERule'  'void'  ()  (('bool'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.getTruncatePrunedTree'  'bool'  ()  ()  'bool')
#('cv.ml.DTrees.setTruncatePrunedTree'  'void'  ()  (('bool'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.getRegressionAccuracy'  'float'  ()  ()  'float')
#('cv.ml.DTrees.setRegressionAccuracy'  'void'  ()  (('float'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.getPriors'  'Mat'  ()  ()  'cv::Mat')
#('cv.ml.DTrees.setPriors'  'void'  ()  (('Mat'  'val'  ''  ()))  'void')
#('cv.ml.DTrees.create'  'Ptr_DTrees'  ('/S')  ()  'Ptr<DTrees>')
#('class cv.ml.RTrees'  ': cv::ml::DTrees'  ()  ())
#('cv.ml.RTrees.getCalculateVarImportance'  'bool'  ()  ()  'bool')
#('cv.ml.RTrees.setCalculateVarImportance'  'void'  ()  (('bool'  'val'  ''  ()))  'void')
#('cv.ml.RTrees.getActiveVarCount'  'int'  ()  ()  'int')
#('cv.ml.RTrees.setActiveVarCount'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.RTrees.getTermCriteria'  'TermCriteria'  ()  ()  'TermCriteria')
#('cv.ml.RTrees.setTermCriteria'  'void'  ()  (('TermCriteria'  'val'  ''  ()))  'void')
#('cv.ml.RTrees.getVarImportance'  'Mat'  ()  ()  'Mat')
#('cv.ml.RTrees.create'  'Ptr_RTrees'  ('/S')  ()  'Ptr<RTrees>')
#('class cv.ml.Boost'  ': cv::ml::DTrees'  ()  ())
#('cv.ml.Boost.getBoostType'  'int'  ()  ()  'int')
#('cv.ml.Boost.setBoostType'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.Boost.getWeakCount'  'int'  ()  ()  'int')
#('cv.ml.Boost.setWeakCount'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.Boost.getWeightTrimRate'  'double'  ()  ()  'double')
#('cv.ml.Boost.setWeightTrimRate'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('const cv.ml.Boost.DISCRETE'  '0'  ()  ())
#('const cv.ml.Boost.REAL'  '1'  ()  ())
#('const cv.ml.Boost.LOGIT'  '2'  ()  ())
#('const cv.ml.Boost.GENTLE'  '3'  ()  ())
#('cv.ml.Boost.create'  'Ptr_Boost'  ('/S')  ()  'Ptr<Boost>')
#('class cv.ml.ANN_MLP'  ': cv::ml::StatModel'  ()  ())
#('const cv.ml.ANN_MLP.BACKPROP'  '0'  ()  ())
#('const cv.ml.ANN_MLP.RPROP'  '1'  ()  ())
#('cv.ml.ANN_MLP.setTrainMethod'  'void'  ()  (('int'  'method'  ''  ())  ('double'  'param1'  '0'  ())  ('double'  'param2'  '0'  ()))  'void')
#('cv.ml.ANN_MLP.getTrainMethod'  'int'  ()  ()  'int')
#('cv.ml.ANN_MLP.setActivationFunction'  'void'  ()  (('int'  'type'  ''  ())  ('double'  'param1'  '0'  ())  ('double'  'param2'  '0'  ()))  'void')
#('cv.ml.ANN_MLP.setLayerSizes'  'void'  ()  (('Mat'  '_layer_sizes'  ''  ()))  'void')
#('cv.ml.ANN_MLP.getLayerSizes'  'Mat'  ()  ()  'cv::Mat')
#('cv.ml.ANN_MLP.getTermCriteria'  'TermCriteria'  ()  ()  'TermCriteria')
#('cv.ml.ANN_MLP.setTermCriteria'  'void'  ()  (('TermCriteria'  'val'  ''  ()))  'void')
#('cv.ml.ANN_MLP.getBackpropWeightScale'  'double'  ()  ()  'double')
#('cv.ml.ANN_MLP.setBackpropWeightScale'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.ANN_MLP.getBackpropMomentumScale'  'double'  ()  ()  'double')
#('cv.ml.ANN_MLP.setBackpropMomentumScale'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.ANN_MLP.getRpropDW0'  'double'  ()  ()  'double')
#('cv.ml.ANN_MLP.setRpropDW0'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.ANN_MLP.getRpropDWPlus'  'double'  ()  ()  'double')
#('cv.ml.ANN_MLP.setRpropDWPlus'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.ANN_MLP.getRpropDWMinus'  'double'  ()  ()  'double')
#('cv.ml.ANN_MLP.setRpropDWMinus'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.ANN_MLP.getRpropDWMin'  'double'  ()  ()  'double')
#('cv.ml.ANN_MLP.setRpropDWMin'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.ANN_MLP.getRpropDWMax'  'double'  ()  ()  'double')
#('cv.ml.ANN_MLP.setRpropDWMax'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('const cv.ml.ANN_MLP.IDENTITY'  '0'  ()  ())
#('const cv.ml.ANN_MLP.SIGMOID_SYM'  '1'  ()  ())
#('const cv.ml.ANN_MLP.GAUSSIAN'  '2'  ()  ())
#('const cv.ml.ANN_MLP.UPDATE_WEIGHTS'  '1'  ()  ())
#('const cv.ml.ANN_MLP.NO_INPUT_SCALE'  '2'  ()  ())
#('const cv.ml.ANN_MLP.NO_OUTPUT_SCALE'  '4'  ()  ())
#('cv.ml.ANN_MLP.getWeights'  'Mat'  ()  (('int'  'layerIdx'  ''  ()))  'Mat')
#('cv.ml.ANN_MLP.create'  'Ptr_ANN_MLP'  ('/S')  ()  'Ptr<ANN_MLP>')
#('class cv.ml.LogisticRegression'  ': cv::ml::StatModel'  ()  ())
#('cv.ml.LogisticRegression.getLearningRate'  'double'  ()  ()  'double')
#('cv.ml.LogisticRegression.setLearningRate'  'void'  ()  (('double'  'val'  ''  ()))  'void')
#('cv.ml.LogisticRegression.getIterations'  'int'  ()  ()  'int')
#('cv.ml.LogisticRegression.setIterations'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.LogisticRegression.getRegularization'  'int'  ()  ()  'int')
#('cv.ml.LogisticRegression.setRegularization'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.LogisticRegression.getTrainMethod'  'int'  ()  ()  'int')
#('cv.ml.LogisticRegression.setTrainMethod'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.LogisticRegression.getMiniBatchSize'  'int'  ()  ()  'int')
#('cv.ml.LogisticRegression.setMiniBatchSize'  'void'  ()  (('int'  'val'  ''  ()))  'void')
#('cv.ml.LogisticRegression.getTermCriteria'  'TermCriteria'  ()  ()  'TermCriteria')
#('cv.ml.LogisticRegression.setTermCriteria'  'void'  ()  (('TermCriteria'  'val'  ''  ()))  'void')
#('const cv.ml.LogisticRegression.REG_DISABLE'  '-1'  ()  ())
#('const cv.ml.LogisticRegression.REG_L1'  '0'  ()  ())
#('const cv.ml.LogisticRegression.REG_L2'  '1'  ()  ())
#('const cv.ml.LogisticRegression.BATCH'  '0'  ()  ())
#('const cv.ml.LogisticRegression.MINI_BATCH'  '1'  ()  ())
#('cv.ml.LogisticRegression.predict'  'float'  ()  (('Mat'  'samples'  ''  ())  ('Mat'  'results'  'Mat()'  ('/O'))  ('int'  'flags'  '0'  ()))  'float')
#('cv.ml.LogisticRegression.get_learnt_thetas'  'Mat'  ()  ()  'Mat')
#('cv.ml.LogisticRegression.create'  'Ptr_LogisticRegression'  ('/S')  ()  'Ptr<LogisticRegression>')
#('const cv.INPAINT_NS'  '0'  ()  ())
#('const cv.INPAINT_TELEA'  '1'  ()  ())
#('const cv.NORMAL_CLONE'  '1'  ()  ())
#('const cv.MIXED_CLONE'  '2'  ()  ())
#('const cv.MONOCHROME_TRANSFER'  '3'  ()  ())
#('const cv.RECURS_FILTER'  '1'  ()  ())
#('const cv.NORMCONV_FILTER'  '2'  ()  ())
#('cv.inpaint'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'inpaintMask'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('double'  'inpaintRadius'  ''  ())  ('int'  'flags'  ''  ()))  'void')
#('cv.fastNlMeansDenoising'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('float'  'h'  '3'  ())  ('int'  'templateWindowSize'  '7'  ())  ('int'  'searchWindowSize'  '21'  ()))  'void')
#('cv.fastNlMeansDenoising'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('vector_float'  'h'  ''  ())  ('int'  'templateWindowSize'  '7'  ())  ('int'  'searchWindowSize'  '21'  ())  ('int'  'normType'  'NORM_L2'  ()))  'void')
#('cv.fastNlMeansDenoisingColored'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('float'  'h'  '3'  ())  ('float'  'hColor'  '3'  ())  ('int'  'templateWindowSize'  '7'  ())  ('int'  'searchWindowSize'  '21'  ()))  'void')
#('cv.fastNlMeansDenoisingMulti'  'void'  ()  (('vector_Mat'  'srcImgs'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'imgToDenoiseIndex'  ''  ())  ('int'  'temporalWindowSize'  ''  ())  ('float'  'h'  '3'  ())  ('int'  'templateWindowSize'  '7'  ())  ('int'  'searchWindowSize'  '21'  ()))  'void')
#('cv.fastNlMeansDenoisingMulti'  'void'  ()  (('vector_Mat'  'srcImgs'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'imgToDenoiseIndex'  ''  ())  ('int'  'temporalWindowSize'  ''  ())  ('vector_float'  'h'  ''  ())  ('int'  'templateWindowSize'  '7'  ())  ('int'  'searchWindowSize'  '21'  ())  ('int'  'normType'  'NORM_L2'  ()))  'void')
#('cv.fastNlMeansDenoisingColoredMulti'  'void'  ()  (('vector_Mat'  'srcImgs'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'imgToDenoiseIndex'  ''  ())  ('int'  'temporalWindowSize'  ''  ())  ('float'  'h'  '3'  ())  ('float'  'hColor'  '3'  ())  ('int'  'templateWindowSize'  '7'  ())  ('int'  'searchWindowSize'  '21'  ()))  'void')
#('cv.denoise_TVL1'  'void'  ()  (('vector_Mat'  'observations'  ''  ())  ('Mat'  'result'  ''  ())  ('double'  'lambda'  '1.0'  ())  ('int'  'niters'  '30'  ()))  'void')
#('const cv.LDR_SIZE'  '256'  ()  ())
#('class cv.Tonemap'  ': cv::Algorithm'  ()  ())
#('cv.Tonemap.process'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.Tonemap.getGamma'  'float'  ()  ()  'float')
#('cv.Tonemap.setGamma'  'void'  ()  (('float'  'gamma'  ''  ()))  'void')
#('cv.createTonemap'  'Ptr_Tonemap'  ()  (('float'  'gamma'  '1.0f'  ()))  'Ptr<Tonemap>')
#('class cv.TonemapDrago'  ': cv::Tonemap'  ()  ())
#('cv.TonemapDrago.getSaturation'  'float'  ()  ()  'float')
#('cv.TonemapDrago.setSaturation'  'void'  ()  (('float'  'saturation'  ''  ()))  'void')
#('cv.TonemapDrago.getBias'  'float'  ()  ()  'float')
#('cv.TonemapDrago.setBias'  'void'  ()  (('float'  'bias'  ''  ()))  'void')
#('cv.createTonemapDrago'  'Ptr_TonemapDrago'  ()  (('float'  'gamma'  '1.0f'  ())  ('float'  'saturation'  '1.0f'  ())  ('float'  'bias'  '0.85f'  ()))  'Ptr<TonemapDrago>')
#('class cv.TonemapDurand'  ': cv::Tonemap'  ()  ())
#('cv.TonemapDurand.getSaturation'  'float'  ()  ()  'float')
#('cv.TonemapDurand.setSaturation'  'void'  ()  (('float'  'saturation'  ''  ()))  'void')
#('cv.TonemapDurand.getContrast'  'float'  ()  ()  'float')
#('cv.TonemapDurand.setContrast'  'void'  ()  (('float'  'contrast'  ''  ()))  'void')
#('cv.TonemapDurand.getSigmaSpace'  'float'  ()  ()  'float')
#('cv.TonemapDurand.setSigmaSpace'  'void'  ()  (('float'  'sigma_space'  ''  ()))  'void')
#('cv.TonemapDurand.getSigmaColor'  'float'  ()  ()  'float')
#('cv.TonemapDurand.setSigmaColor'  'void'  ()  (('float'  'sigma_color'  ''  ()))  'void')
#('cv.createTonemapDurand'  'Ptr_TonemapDurand'  ()  (('float'  'gamma'  '1.0f'  ())  ('float'  'contrast'  '4.0f'  ())  ('float'  'saturation'  '1.0f'  ())  ('float'  'sigma_space'  '2.0f'  ())  ('float'  'sigma_color'  '2.0f'  ()))  'Ptr<TonemapDurand>')
#('class cv.TonemapReinhard'  ': cv::Tonemap'  ()  ())
#('cv.TonemapReinhard.getIntensity'  'float'  ()  ()  'float')
#('cv.TonemapReinhard.setIntensity'  'void'  ()  (('float'  'intensity'  ''  ()))  'void')
#('cv.TonemapReinhard.getLightAdaptation'  'float'  ()  ()  'float')
#('cv.TonemapReinhard.setLightAdaptation'  'void'  ()  (('float'  'light_adapt'  ''  ()))  'void')
#('cv.TonemapReinhard.getColorAdaptation'  'float'  ()  ()  'float')
#('cv.TonemapReinhard.setColorAdaptation'  'void'  ()  (('float'  'color_adapt'  ''  ()))  'void')
#('cv.createTonemapReinhard'  'Ptr_TonemapReinhard'  ()  (('float'  'gamma'  '1.0f'  ())  ('float'  'intensity'  '0.0f'  ())  ('float'  'light_adapt'  '1.0f'  ())  ('float'  'color_adapt'  '0.0f'  ()))  'Ptr<TonemapReinhard>')
#('class cv.TonemapMantiuk'  ': cv::Tonemap'  ()  ())
#('cv.TonemapMantiuk.getScale'  'float'  ()  ()  'float')
#('cv.TonemapMantiuk.setScale'  'void'  ()  (('float'  'scale'  ''  ()))  'void')
#('cv.TonemapMantiuk.getSaturation'  'float'  ()  ()  'float')
#('cv.TonemapMantiuk.setSaturation'  'void'  ()  (('float'  'saturation'  ''  ()))  'void')
#('cv.createTonemapMantiuk'  'Ptr_TonemapMantiuk'  ()  (('float'  'gamma'  '1.0f'  ())  ('float'  'scale'  '0.7f'  ())  ('float'  'saturation'  '1.0f'  ()))  'Ptr<TonemapMantiuk>')
#('class cv.AlignExposures'  ': cv::Algorithm'  ()  ())
#('cv.AlignExposures.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('vector_Mat'  'dst'  ''  ())  ('Mat'  'times'  ''  ())  ('Mat'  'response'  ''  ()))  'void')
#('class cv.AlignMTB'  ': cv::AlignExposures'  ()  ())
#('cv.AlignMTB.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('vector_Mat'  'dst'  ''  ())  ('Mat'  'times'  ''  ())  ('Mat'  'response'  ''  ()))  'void')
#('cv.AlignMTB.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('vector_Mat'  'dst'  ''  ()))  'void')
#('cv.AlignMTB.calculateShift'  'Point'  ()  (('Mat'  'img0'  ''  ())  ('Mat'  'img1'  ''  ()))  'Point')
#('cv.AlignMTB.shiftMat'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Point'  'shift'  ''  ()))  'void')
#('cv.AlignMTB.computeBitmaps'  'void'  ()  (('Mat'  'img'  ''  ())  ('Mat'  'tb'  ''  ('/O'))  ('Mat'  'eb'  ''  ('/O')))  'void')
#('cv.AlignMTB.getMaxBits'  'int'  ()  ()  'int')
#('cv.AlignMTB.setMaxBits'  'void'  ()  (('int'  'max_bits'  ''  ()))  'void')
#('cv.AlignMTB.getExcludeRange'  'int'  ()  ()  'int')
#('cv.AlignMTB.setExcludeRange'  'void'  ()  (('int'  'exclude_range'  ''  ()))  'void')
#('cv.AlignMTB.getCut'  'bool'  ()  ()  'bool')
#('cv.AlignMTB.setCut'  'void'  ()  (('bool'  'value'  ''  ()))  'void')
#('cv.createAlignMTB'  'Ptr_AlignMTB'  ()  (('int'  'max_bits'  '6'  ())  ('int'  'exclude_range'  '4'  ())  ('bool'  'cut'  'true'  ()))  'Ptr<AlignMTB>')
#('class cv.CalibrateCRF'  ': cv::Algorithm'  ()  ())
#('cv.CalibrateCRF.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'times'  ''  ()))  'void')
#('class cv.CalibrateDebevec'  ': cv::CalibrateCRF'  ()  ())
#('cv.CalibrateDebevec.getLambda'  'float'  ()  ()  'float')
#('cv.CalibrateDebevec.setLambda'  'void'  ()  (('float'  'lambda'  ''  ()))  'void')
#('cv.CalibrateDebevec.getSamples'  'int'  ()  ()  'int')
#('cv.CalibrateDebevec.setSamples'  'void'  ()  (('int'  'samples'  ''  ()))  'void')
#('cv.CalibrateDebevec.getRandom'  'bool'  ()  ()  'bool')
#('cv.CalibrateDebevec.setRandom'  'void'  ()  (('bool'  'random'  ''  ()))  'void')
#('cv.createCalibrateDebevec'  'Ptr_CalibrateDebevec'  ()  (('int'  'samples'  '70'  ())  ('float'  'lambda'  '10.0f'  ())  ('bool'  'random'  'false'  ()))  'Ptr<CalibrateDebevec>')
#('class cv.CalibrateRobertson'  ': cv::CalibrateCRF'  ()  ())
#('cv.CalibrateRobertson.getMaxIter'  'int'  ()  ()  'int')
#('cv.CalibrateRobertson.setMaxIter'  'void'  ()  (('int'  'max_iter'  ''  ()))  'void')
#('cv.CalibrateRobertson.getThreshold'  'float'  ()  ()  'float')
#('cv.CalibrateRobertson.setThreshold'  'void'  ()  (('float'  'threshold'  ''  ()))  'void')
#('cv.CalibrateRobertson.getRadiance'  'Mat'  ()  ()  'Mat')
#('cv.createCalibrateRobertson'  'Ptr_CalibrateRobertson'  ()  (('int'  'max_iter'  '30'  ())  ('float'  'threshold'  '0.01f'  ()))  'Ptr<CalibrateRobertson>')
#('class cv.MergeExposures'  ': cv::Algorithm'  ()  ())
#('cv.MergeExposures.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'times'  ''  ())  ('Mat'  'response'  ''  ()))  'void')
#('class cv.MergeDebevec'  ': cv::MergeExposures'  ()  ())
#('cv.MergeDebevec.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'times'  ''  ())  ('Mat'  'response'  ''  ()))  'void')
#('cv.MergeDebevec.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'times'  ''  ()))  'void')
#('cv.createMergeDebevec'  'Ptr_MergeDebevec'  ()  ()  'Ptr<MergeDebevec>')
#('class cv.MergeMertens'  ': cv::MergeExposures'  ()  ())
#('cv.MergeMertens.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'times'  ''  ())  ('Mat'  'response'  ''  ()))  'void')
#('cv.MergeMertens.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.MergeMertens.getContrastWeight'  'float'  ()  ()  'float')
#('cv.MergeMertens.setContrastWeight'  'void'  ()  (('float'  'contrast_weiht'  ''  ()))  'void')
#('cv.MergeMertens.getSaturationWeight'  'float'  ()  ()  'float')
#('cv.MergeMertens.setSaturationWeight'  'void'  ()  (('float'  'saturation_weight'  ''  ()))  'void')
#('cv.MergeMertens.getExposureWeight'  'float'  ()  ()  'float')
#('cv.MergeMertens.setExposureWeight'  'void'  ()  (('float'  'exposure_weight'  ''  ()))  'void')
#('cv.createMergeMertens'  'Ptr_MergeMertens'  ()  (('float'  'contrast_weight'  '1.0f'  ())  ('float'  'saturation_weight'  '1.0f'  ())  ('float'  'exposure_weight'  '0.0f'  ()))  'Ptr<MergeMertens>')
#('class cv.MergeRobertson'  ': cv::MergeExposures'  ()  ())
#('cv.MergeRobertson.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'times'  ''  ())  ('Mat'  'response'  ''  ()))  'void')
#('cv.MergeRobertson.process'  'void'  ()  (('vector_Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'times'  ''  ()))  'void')
#('cv.createMergeRobertson'  'Ptr_MergeRobertson'  ()  ()  'Ptr<MergeRobertson>')
#('cv.decolor'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'grayscale'  ''  ('/O'))  ('Mat'  'color_boost'  ''  ('/O')))  'void')
#('cv.seamlessClone'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ())  ('Mat'  'mask'  ''  ())  ('Point'  'p'  ''  ())  ('Mat'  'blend'  ''  ('/O'))  ('int'  'flags'  ''  ()))  'void')
#('cv.colorChange'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'mask'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('float'  'red_mul'  '1.0f'  ())  ('float'  'green_mul'  '1.0f'  ())  ('float'  'blue_mul'  '1.0f'  ()))  'void')
#('cv.illuminationChange'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'mask'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('float'  'alpha'  '0.2f'  ())  ('float'  'beta'  '0.4f'  ()))  'void')
#('cv.textureFlattening'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'mask'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('float'  'low_threshold'  '30'  ())  ('float'  'high_threshold'  '45'  ())  ('int'  'kernel_size'  '3'  ()))  'void')
#('cv.edgePreservingFilter'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('int'  'flags'  '1'  ())  ('float'  'sigma_s'  '60'  ())  ('float'  'sigma_r'  '0.4f'  ()))  'void')
#('cv.detailEnhance'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('float'  'sigma_s'  '10'  ())  ('float'  'sigma_r'  '0.15f'  ()))  'void')
#('cv.pencilSketch'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst1'  ''  ('/O'))  ('Mat'  'dst2'  ''  ('/O'))  ('float'  'sigma_s'  '60'  ())  ('float'  'sigma_r'  '0.07f'  ())  ('float'  'shade_factor'  '0.02f'  ()))  'void')
#('cv.stylization'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('float'  'sigma_s'  '60'  ())  ('float'  'sigma_r'  '0.45f'  ()))  'void')
#('class cv.BackgroundSubtractor'  ': cv::Algorithm'  ()  ())
#('cv.BackgroundSubtractor.apply'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'fgmask'  ''  ('/O'))  ('double'  'learningRate'  '-1'  ()))  'void')
#('cv.BackgroundSubtractor.getBackgroundImage'  'void'  ()  (('Mat'  'backgroundImage'  ''  ('/O')))  'void')
#('class cv.BackgroundSubtractorMOG2'  ': cv::BackgroundSubtractor'  ()  ())
#('cv.BackgroundSubtractorMOG2.getHistory'  'int'  ()  ()  'int')
#('cv.BackgroundSubtractorMOG2.setHistory'  'void'  ()  (('int'  'history'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getNMixtures'  'int'  ()  ()  'int')
#('cv.BackgroundSubtractorMOG2.setNMixtures'  'void'  ()  (('int'  'nmixtures'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getBackgroundRatio'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorMOG2.setBackgroundRatio'  'void'  ()  (('double'  'ratio'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getVarThreshold'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorMOG2.setVarThreshold'  'void'  ()  (('double'  'varThreshold'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getVarThresholdGen'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorMOG2.setVarThresholdGen'  'void'  ()  (('double'  'varThresholdGen'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getVarInit'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorMOG2.setVarInit'  'void'  ()  (('double'  'varInit'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getVarMin'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorMOG2.setVarMin'  'void'  ()  (('double'  'varMin'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getVarMax'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorMOG2.setVarMax'  'void'  ()  (('double'  'varMax'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getComplexityReductionThreshold'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorMOG2.setComplexityReductionThreshold'  'void'  ()  (('double'  'ct'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getDetectShadows'  'bool'  ()  ()  'bool')
#('cv.BackgroundSubtractorMOG2.setDetectShadows'  'void'  ()  (('bool'  'detectShadows'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getShadowValue'  'int'  ()  ()  'int')
#('cv.BackgroundSubtractorMOG2.setShadowValue'  'void'  ()  (('int'  'value'  ''  ()))  'void')
#('cv.BackgroundSubtractorMOG2.getShadowThreshold'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorMOG2.setShadowThreshold'  'void'  ()  (('double'  'threshold'  ''  ()))  'void')
#('cv.createBackgroundSubtractorMOG2'  'Ptr_BackgroundSubtractorMOG2'  ()  (('int'  'history'  '500'  ())  ('double'  'varThreshold'  '16'  ())  ('bool'  'detectShadows'  'true'  ()))  'Ptr<BackgroundSubtractorMOG2>')
#('class cv.BackgroundSubtractorKNN'  ': cv::BackgroundSubtractor'  ()  ())
#('cv.BackgroundSubtractorKNN.getHistory'  'int'  ()  ()  'int')
#('cv.BackgroundSubtractorKNN.setHistory'  'void'  ()  (('int'  'history'  ''  ()))  'void')
#('cv.BackgroundSubtractorKNN.getNSamples'  'int'  ()  ()  'int')
#('cv.BackgroundSubtractorKNN.setNSamples'  'void'  ()  (('int'  '_nN'  ''  ()))  'void')
#('cv.BackgroundSubtractorKNN.getDist2Threshold'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorKNN.setDist2Threshold'  'void'  ()  (('double'  '_dist2Threshold'  ''  ()))  'void')
#('cv.BackgroundSubtractorKNN.getkNNSamples'  'int'  ()  ()  'int')
#('cv.BackgroundSubtractorKNN.setkNNSamples'  'void'  ()  (('int'  '_nkNN'  ''  ()))  'void')
#('cv.BackgroundSubtractorKNN.getDetectShadows'  'bool'  ()  ()  'bool')
#('cv.BackgroundSubtractorKNN.setDetectShadows'  'void'  ()  (('bool'  'detectShadows'  ''  ()))  'void')
#('cv.BackgroundSubtractorKNN.getShadowValue'  'int'  ()  ()  'int')
#('cv.BackgroundSubtractorKNN.setShadowValue'  'void'  ()  (('int'  'value'  ''  ()))  'void')
#('cv.BackgroundSubtractorKNN.getShadowThreshold'  'double'  ()  ()  'double')
#('cv.BackgroundSubtractorKNN.setShadowThreshold'  'void'  ()  (('double'  'threshold'  ''  ()))  'void')
#('cv.createBackgroundSubtractorKNN'  'Ptr_BackgroundSubtractorKNN'  ()  (('int'  'history'  '500'  ())  ('double'  'dist2Threshold'  '400.0'  ())  ('bool'  'detectShadows'  'true'  ()))  'Ptr<BackgroundSubtractorKNN>')
#('const cv.OPTFLOW_USE_INITIAL_FLOW'  '4'  ()  ())
#('const cv.OPTFLOW_LK_GET_MIN_EIGENVALS'  '8'  ()  ())
#('const cv.OPTFLOW_FARNEBACK_GAUSSIAN'  '256'  ()  ())
#('cv.CamShift'  'RotatedRect'  ()  (('Mat'  'probImage'  ''  ())  ('Rect'  'window'  ''  ('/IO'))  ('TermCriteria'  'criteria'  ''  ()))  'RotatedRect')
#('cv.meanShift'  'int'  ()  (('Mat'  'probImage'  ''  ())  ('Rect'  'window'  ''  ('/IO'))  ('TermCriteria'  'criteria'  ''  ()))  'int')
#('cv.buildOpticalFlowPyramid'  'int'  ()  (('Mat'  'img'  ''  ())  ('vector_Mat'  'pyramid'  ''  ('/O'))  ('Size'  'winSize'  ''  ())  ('int'  'maxLevel'  ''  ())  ('bool'  'withDerivatives'  'true'  ())  ('int'  'pyrBorder'  'BORDER_REFLECT_101'  ())  ('int'  'derivBorder'  'BORDER_CONSTANT'  ())  ('bool'  'tryReuseInputImage'  'true'  ()))  'int')
#('cv.calcOpticalFlowPyrLK'  'void'  ()  (('Mat'  'prevImg'  ''  ())  ('Mat'  'nextImg'  ''  ())  ('Mat'  'prevPts'  ''  ())  ('Mat'  'nextPts'  ''  ('/IO'))  ('Mat'  'status'  ''  ('/O'))  ('Mat'  'err'  ''  ('/O'))  ('Size'  'winSize'  'Size(21 21)'  ())  ('int'  'maxLevel'  '3'  ())  ('TermCriteria'  'criteria'  'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS  30  0.01)'  ())  ('int'  'flags'  '0'  ())  ('double'  'minEigThreshold'  '1e-4'  ()))  'void')
#('cv.calcOpticalFlowFarneback'  'void'  ()  (('Mat'  'prev'  ''  ())  ('Mat'  'next'  ''  ())  ('Mat'  'flow'  ''  ('/IO'))  ('double'  'pyr_scale'  ''  ())  ('int'  'levels'  ''  ())  ('int'  'winsize'  ''  ())  ('int'  'iterations'  ''  ())  ('int'  'poly_n'  ''  ())  ('double'  'poly_sigma'  ''  ())  ('int'  'flags'  ''  ()))  'void')
#('cv.estimateRigidTransform'  'Mat'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ())  ('bool'  'fullAffine'  ''  ()))  'Mat')
#('const cv.MOTION_TRANSLATION'  '0'  ()  ())
#('const cv.MOTION_EUCLIDEAN'  '1'  ()  ())
#('const cv.MOTION_AFFINE'  '2'  ()  ())
#('const cv.MOTION_HOMOGRAPHY'  '3'  ()  ())
#('cv.findTransformECC'  'double'  ()  (('Mat'  'templateImage'  ''  ())  ('Mat'  'inputImage'  ''  ())  ('Mat'  'warpMatrix'  ''  ('/IO'))  ('int'  'motionType'  'MOTION_AFFINE'  ())  ('TermCriteria'  'criteria'  'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS  50  0.001)'  ()))  'double')
#('class cv.KalmanFilter'  ''  ()  (('Mat'  'statePre'  ''  ('/RW'))  ('Mat'  'statePost'  ''  ('/RW'))  ('Mat'  'transitionMatrix'  ''  ('/RW'))  ('Mat'  'controlMatrix'  ''  ('/RW'))  ('Mat'  'measurementMatrix'  ''  ('/RW'))  ('Mat'  'processNoiseCov'  ''  ('/RW'))  ('Mat'  'measurementNoiseCov'  ''  ('/RW'))  ('Mat'  'errorCovPre'  ''  ('/RW'))  ('Mat'  'gain'  ''  ('/RW'))  ('Mat'  'errorCovPost'  ''  ('/RW'))))
#('cv.KalmanFilter.KalmanFilter'  ''  ()  ())
#('cv.KalmanFilter.KalmanFilter'  ''  ()  (('int'  'dynamParams'  ''  ())  ('int'  'measureParams'  ''  ())  ('int'  'controlParams'  '0'  ())  ('int'  'type'  'CV_32F'  ())))
#('cv.KalmanFilter.predict'  'Mat'  ()  (('Mat'  'control'  'Mat()'  ()))  'Mat')
#('cv.KalmanFilter.correct'  'Mat'  ()  (('Mat'  'measurement'  ''  ()))  'Mat')
#('class cv.DenseOpticalFlow'  ': cv::Algorithm'  ()  ())
#('cv.DenseOpticalFlow.calc'  'void'  ()  (('Mat'  'I0'  ''  ())  ('Mat'  'I1'  ''  ())  ('Mat'  'flow'  ''  ('/IO')))  'void')
#('cv.DenseOpticalFlow.collectGarbage'  'void'  ()  ()  'void')
#('class cv.DualTVL1OpticalFlow'  ': cv::DenseOpticalFlow'  ()  ())
#('cv.createOptFlow_DualTVL1'  'Ptr_DualTVL1OpticalFlow'  ()  ()  'Ptr<DualTVL1OpticalFlow>')
#('const cv.IMREAD_UNCHANGED'  '-1'  ()  ())
#('const cv.IMREAD_GRAYSCALE'  '0'  ()  ())
#('const cv.IMREAD_COLOR'  '1'  ()  ())
#('const cv.IMREAD_ANYDEPTH'  '2'  ()  ())
#('const cv.IMREAD_ANYCOLOR'  '4'  ()  ())
#('const cv.IMREAD_LOAD_GDAL'  '8'  ()  ())
#('const cv.IMWRITE_JPEG_QUALITY'  '1'  ()  ())
#('const cv.IMWRITE_JPEG_PROGRESSIVE'  '2'  ()  ())
#('const cv.IMWRITE_JPEG_OPTIMIZE'  '3'  ()  ())
#('const cv.IMWRITE_JPEG_RST_INTERVAL'  '4'  ()  ())
#('const cv.IMWRITE_JPEG_LUMA_QUALITY'  '5'  ()  ())
#('const cv.IMWRITE_JPEG_CHROMA_QUALITY'  '6'  ()  ())
#('const cv.IMWRITE_PNG_COMPRESSION'  '16'  ()  ())
#('const cv.IMWRITE_PNG_STRATEGY'  '17'  ()  ())
#('const cv.IMWRITE_PNG_BILEVEL'  '18'  ()  ())
#('const cv.IMWRITE_PXM_BINARY'  '32'  ()  ())
#('const cv.IMWRITE_WEBP_QUALITY'  '64'  ()  ())
#('const cv.IMWRITE_PNG_STRATEGY_DEFAULT'  '0'  ()  ())
#('const cv.IMWRITE_PNG_STRATEGY_FILTERED'  '1'  ()  ())
#('const cv.IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY'  '2'  ()  ())
#('const cv.IMWRITE_PNG_STRATEGY_RLE'  '3'  ()  ())
#('const cv.IMWRITE_PNG_STRATEGY_FIXED'  '4'  ()  ())
#('cv.imread'  'Mat'  ()  (('String'  'filename'  ''  ())  ('int'  'flags'  'IMREAD_COLOR'  ()))  'Mat')
#('cv.imreadmulti'  'bool'  ()  (('String'  'filename'  ''  ())  ('vector_Mat'  'mats'  ''  ())  ('int'  'flags'  'IMREAD_ANYCOLOR'  ()))  'bool')
#('cv.imwrite'  'bool'  ()  (('String'  'filename'  ''  ())  ('Mat'  'img'  ''  ())  ('vector_int'  'params'  'std::vector<int>()'  ()))  'bool')
#('cv.imdecode'  'Mat'  ()  (('Mat'  'buf'  ''  ())  ('int'  'flags'  ''  ()))  'Mat')
#('cv.imencode'  'bool'  ()  (('String'  'ext'  ''  ())  ('Mat'  'img'  ''  ())  ('vector_uchar'  'buf'  ''  ('/O'))  ('vector_int'  'params'  'std::vector<int>()'  ()))  'bool')
#('class cv.HistogramCostExtractor'  ': cv::Algorithm'  ()  ())
#('cv.HistogramCostExtractor.buildCostMatrix'  'void'  ()  (('Mat'  'descriptors1'  ''  ())  ('Mat'  'descriptors2'  ''  ())  ('Mat'  'costMatrix'  ''  ('/O')))  'void')
#('cv.HistogramCostExtractor.setNDummies'  'void'  ()  (('int'  'nDummies'  ''  ()))  'void')
#('cv.HistogramCostExtractor.getNDummies'  'int'  ()  ()  'int')
#('cv.HistogramCostExtractor.setDefaultCost'  'void'  ()  (('float'  'defaultCost'  ''  ()))  'void')
#('cv.HistogramCostExtractor.getDefaultCost'  'float'  ()  ()  'float')
#('class cv.NormHistogramCostExtractor'  ': cv::HistogramCostExtractor'  ()  ())
#('cv.NormHistogramCostExtractor.setNormFlag'  'void'  ()  (('int'  'flag'  ''  ()))  'void')
#('cv.NormHistogramCostExtractor.getNormFlag'  'int'  ()  ()  'int')
#('cv.createNormHistogramCostExtractor'  'Ptr_HistogramCostExtractor'  ()  (('int'  'flag'  'DIST_L2'  ())  ('int'  'nDummies'  '25'  ())  ('float'  'defaultCost'  '0.2f'  ()))  'Ptr<HistogramCostExtractor>')
#('class cv.EMDHistogramCostExtractor'  ': cv::HistogramCostExtractor'  ()  ())
#('cv.EMDHistogramCostExtractor.setNormFlag'  'void'  ()  (('int'  'flag'  ''  ()))  'void')
#('cv.EMDHistogramCostExtractor.getNormFlag'  'int'  ()  ()  'int')
#('cv.createEMDHistogramCostExtractor'  'Ptr_HistogramCostExtractor'  ()  (('int'  'flag'  'DIST_L2'  ())  ('int'  'nDummies'  '25'  ())  ('float'  'defaultCost'  '0.2f'  ()))  'Ptr<HistogramCostExtractor>')
#('class cv.ChiHistogramCostExtractor'  ': cv::HistogramCostExtractor'  ()  ())
#('cv.createChiHistogramCostExtractor'  'Ptr_HistogramCostExtractor'  ()  (('int'  'nDummies'  '25'  ())  ('float'  'defaultCost'  '0.2f'  ()))  'Ptr<HistogramCostExtractor>')
#('class cv.EMDL1HistogramCostExtractor'  ': cv::HistogramCostExtractor'  ()  ())
#('cv.createEMDL1HistogramCostExtractor'  'Ptr_HistogramCostExtractor'  ()  (('int'  'nDummies'  '25'  ())  ('float'  'defaultCost'  '0.2f'  ()))  'Ptr<HistogramCostExtractor>')
#('class cv.ShapeDistanceExtractor'  ': cv::Algorithm'  ()  ())
#('cv.ShapeDistanceExtractor.computeDistance'  'float'  ()  (('Mat'  'contour1'  ''  ())  ('Mat'  'contour2'  ''  ()))  'float')
#('class cv.ShapeContextDistanceExtractor'  ': cv::ShapeDistanceExtractor'  ()  ())
#('cv.ShapeContextDistanceExtractor.setAngularBins'  'void'  ()  (('int'  'nAngularBins'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getAngularBins'  'int'  ()  ()  'int')
#('cv.ShapeContextDistanceExtractor.setRadialBins'  'void'  ()  (('int'  'nRadialBins'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getRadialBins'  'int'  ()  ()  'int')
#('cv.ShapeContextDistanceExtractor.setInnerRadius'  'void'  ()  (('float'  'innerRadius'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getInnerRadius'  'float'  ()  ()  'float')
#('cv.ShapeContextDistanceExtractor.setOuterRadius'  'void'  ()  (('float'  'outerRadius'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getOuterRadius'  'float'  ()  ()  'float')
#('cv.ShapeContextDistanceExtractor.setRotationInvariant'  'void'  ()  (('bool'  'rotationInvariant'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getRotationInvariant'  'bool'  ()  ()  'bool')
#('cv.ShapeContextDistanceExtractor.setShapeContextWeight'  'void'  ()  (('float'  'shapeContextWeight'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getShapeContextWeight'  'float'  ()  ()  'float')
#('cv.ShapeContextDistanceExtractor.setImageAppearanceWeight'  'void'  ()  (('float'  'imageAppearanceWeight'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getImageAppearanceWeight'  'float'  ()  ()  'float')
#('cv.ShapeContextDistanceExtractor.setBendingEnergyWeight'  'void'  ()  (('float'  'bendingEnergyWeight'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getBendingEnergyWeight'  'float'  ()  ()  'float')
#('cv.ShapeContextDistanceExtractor.setImages'  'void'  ()  (('Mat'  'image1'  ''  ())  ('Mat'  'image2'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getImages'  'void'  ()  (('Mat'  'image1'  ''  ('/O'))  ('Mat'  'image2'  ''  ('/O')))  'void')
#('cv.ShapeContextDistanceExtractor.setIterations'  'void'  ()  (('int'  'iterations'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getIterations'  'int'  ()  ()  'int')
#('cv.ShapeContextDistanceExtractor.setCostExtractor'  'void'  ()  (('Ptr_HistogramCostExtractor'  'comparer'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getCostExtractor'  'Ptr_HistogramCostExtractor'  ()  ()  'Ptr<HistogramCostExtractor>')
#('cv.ShapeContextDistanceExtractor.setStdDev'  'void'  ()  (('float'  'sigma'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getStdDev'  'float'  ()  ()  'float')
#('cv.ShapeContextDistanceExtractor.setTransformAlgorithm'  'void'  ()  (('Ptr_ShapeTransformer'  'transformer'  ''  ()))  'void')
#('cv.ShapeContextDistanceExtractor.getTransformAlgorithm'  'Ptr_ShapeTransformer'  ()  ()  'Ptr<ShapeTransformer>')
#('cv.createShapeContextDistanceExtractor'  'Ptr_ShapeContextDistanceExtractor'  ()  (('int'  'nAngularBins'  '12'  ())  ('int'  'nRadialBins'  '4'  ())  ('float'  'innerRadius'  '0.2f'  ())  ('float'  'outerRadius'  '2'  ())  ('int'  'iterations'  '3'  ())  ('Ptr_HistogramCostExtractor'  'comparer'  'createChiHistogramCostExtractor()'  ())  ('Ptr_ShapeTransformer'  'transformer'  'createThinPlateSplineShapeTransformer()'  ()))  'Ptr<ShapeContextDistanceExtractor>')
#('class cv.HausdorffDistanceExtractor'  ': cv::ShapeDistanceExtractor'  ()  ())
#('cv.HausdorffDistanceExtractor.setDistanceFlag'  'void'  ()  (('int'  'distanceFlag'  ''  ()))  'void')
#('cv.HausdorffDistanceExtractor.getDistanceFlag'  'int'  ()  ()  'int')
#('cv.HausdorffDistanceExtractor.setRankProportion'  'void'  ()  (('float'  'rankProportion'  ''  ()))  'void')
#('cv.HausdorffDistanceExtractor.getRankProportion'  'float'  ()  ()  'float')
#('cv.createHausdorffDistanceExtractor'  'Ptr_HausdorffDistanceExtractor'  ()  (('int'  'distanceFlag'  'cv::NORM_L2'  ())  ('float'  'rankProp'  '0.6f'  ()))  'Ptr<HausdorffDistanceExtractor>')
#('class cv.ShapeTransformer'  ': cv::Algorithm'  ()  ())
#('cv.ShapeTransformer.estimateTransformation'  'void'  ()  (('Mat'  'transformingShape'  ''  ())  ('Mat'  'targetShape'  ''  ())  ('vector_DMatch'  'matches'  ''  ()))  'void')
#('cv.ShapeTransformer.applyTransformation'  'float'  ()  (('Mat'  'input'  ''  ())  ('Mat'  'output'  'Mat()'  ('/O')))  'float')
#('cv.ShapeTransformer.warpImage'  'void'  ()  (('Mat'  'transformingImage'  ''  ())  ('Mat'  'output'  ''  ('/O'))  ('int'  'flags'  'INTER_LINEAR'  ())  ('int'  'borderMode'  'BORDER_CONSTANT'  ())  ('Scalar'  'borderValue'  'Scalar()'  ()))  'void')
#('class cv.ThinPlateSplineShapeTransformer'  ': cv::ShapeTransformer'  ()  ())
#('cv.ThinPlateSplineShapeTransformer.setRegularizationParameter'  'void'  ()  (('double'  'beta'  ''  ()))  'void')
#('cv.ThinPlateSplineShapeTransformer.getRegularizationParameter'  'double'  ()  ()  'double')
#('cv.createThinPlateSplineShapeTransformer'  'Ptr_ThinPlateSplineShapeTransformer'  ()  (('double'  'regularizationParameter'  '0'  ()))  'Ptr<ThinPlateSplineShapeTransformer>')
#('class cv.AffineTransformer'  ': cv::ShapeTransformer'  ()  ())
#('cv.AffineTransformer.setFullAffine'  'void'  ()  (('bool'  'fullAffine'  ''  ()))  'void')
#('cv.AffineTransformer.getFullAffine'  'bool'  ()  ()  'bool')
#('cv.createAffineTransformer'  'Ptr_AffineTransformer'  ()  (('bool'  'fullAffine'  ''  ()))  'Ptr<AffineTransformer>')
#('const cv.CAP_ANY'  '0'  ()  ())
#('const cv.CAP_VFW'  '200'  ()  ())
#('const cv.CAP_V4L'  '200'  ()  ())
#('const cv.CAP_V4L2'  'CAP_V4L'  ()  ())
#('const cv.CAP_FIREWARE'  '300'  ()  ())
#('const cv.CAP_FIREWIRE'  'CAP_FIREWARE'  ()  ())
#('const cv.CAP_IEEE1394'  'CAP_FIREWARE'  ()  ())
#('const cv.CAP_DC1394'  'CAP_FIREWARE'  ()  ())
#('const cv.CAP_CMU1394'  'CAP_FIREWARE'  ()  ())
#('const cv.CAP_QT'  '500'  ()  ())
#('const cv.CAP_UNICAP'  '600'  ()  ())
#('const cv.CAP_DSHOW'  '700'  ()  ())
#('const cv.CAP_PVAPI'  '800'  ()  ())
#('const cv.CAP_OPENNI'  '900'  ()  ())
#('const cv.CAP_OPENNI_ASUS'  '910'  ()  ())
#('const cv.CAP_ANDROID'  '1000'  ()  ())
#('const cv.CAP_XIAPI'  '1100'  ()  ())
#('const cv.CAP_AVFOUNDATION'  '1200'  ()  ())
#('const cv.CAP_GIGANETIX'  '1300'  ()  ())
#('const cv.CAP_MSMF'  '1400'  ()  ())
#('const cv.CAP_INTELPERC'  '1500'  ()  ())
#('const cv.CAP_OPENNI2'  '1600'  ()  ())
#('const cv.CAP_OPENNI2_ASUS'  '1610'  ()  ())
#('const cv.CAP_PROP_POS_MSEC'  '0'  ()  ())
#('const cv.CAP_PROP_POS_FRAMES'  '1'  ()  ())
#('const cv.CAP_PROP_POS_AVI_RATIO'  '2'  ()  ())
#('const cv.CAP_PROP_FRAME_WIDTH'  '3'  ()  ())
#('const cv.CAP_PROP_FRAME_HEIGHT'  '4'  ()  ())
#('const cv.CAP_PROP_FPS'  '5'  ()  ())
#('const cv.CAP_PROP_FOURCC'  '6'  ()  ())
#('const cv.CAP_PROP_FRAME_COUNT'  '7'  ()  ())
#('const cv.CAP_PROP_FORMAT'  '8'  ()  ())
#('const cv.CAP_PROP_MODE'  '9'  ()  ())
#('const cv.CAP_PROP_BRIGHTNESS'  '10'  ()  ())
#('const cv.CAP_PROP_CONTRAST'  '11'  ()  ())
#('const cv.CAP_PROP_SATURATION'  '12'  ()  ())
#('const cv.CAP_PROP_HUE'  '13'  ()  ())
#('const cv.CAP_PROP_GAIN'  '14'  ()  ())
#('const cv.CAP_PROP_EXPOSURE'  '15'  ()  ())
#('const cv.CAP_PROP_CONVERT_RGB'  '16'  ()  ())
#('const cv.CAP_PROP_WHITE_BALANCE_BLUE_U'  '17'  ()  ())
#('const cv.CAP_PROP_RECTIFICATION'  '18'  ()  ())
#('const cv.CAP_PROP_MONOCHROME'  '19'  ()  ())
#('const cv.CAP_PROP_SHARPNESS'  '20'  ()  ())
#('const cv.CAP_PROP_AUTO_EXPOSURE'  '21'  ()  ())
#('const cv.CAP_PROP_GAMMA'  '22'  ()  ())
#('const cv.CAP_PROP_TEMPERATURE'  '23'  ()  ())
#('const cv.CAP_PROP_TRIGGER'  '24'  ()  ())
#('const cv.CAP_PROP_TRIGGER_DELAY'  '25'  ()  ())
#('const cv.CAP_PROP_WHITE_BALANCE_RED_V'  '26'  ()  ())
#('const cv.CAP_PROP_ZOOM'  '27'  ()  ())
#('const cv.CAP_PROP_FOCUS'  '28'  ()  ())
#('const cv.CAP_PROP_GUID'  '29'  ()  ())
#('const cv.CAP_PROP_ISO_SPEED'  '30'  ()  ())
#('const cv.CAP_PROP_BACKLIGHT'  '32'  ()  ())
#('const cv.CAP_PROP_PAN'  '33'  ()  ())
#('const cv.CAP_PROP_TILT'  '34'  ()  ())
#('const cv.CAP_PROP_ROLL'  '35'  ()  ())
#('const cv.CAP_PROP_IRIS'  '36'  ()  ())
#('const cv.CAP_PROP_SETTINGS'  '37'  ()  ())
#('const cv.CAP_MODE_BGR'  '0'  ()  ())
#('const cv.CAP_MODE_RGB'  '1'  ()  ())
#('const cv.CAP_MODE_GRAY'  '2'  ()  ())
#('const cv.CAP_MODE_YUYV'  '3'  ()  ())
#('const cv.CAP_PROP_DC1394_OFF'  '-4'  ()  ())
#('const cv.CAP_PROP_DC1394_MODE_MANUAL'  '-3'  ()  ())
#('const cv.CAP_PROP_DC1394_MODE_AUTO'  '-2'  ()  ())
#('const cv.CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO'  '-1'  ()  ())
#('const cv.CAP_PROP_DC1394_MAX'  '31'  ()  ())
#('const cv.CAP_OPENNI_DEPTH_GENERATOR'  '1 << 31'  ()  ())
#('const cv.CAP_OPENNI_IMAGE_GENERATOR'  '1 << 30'  ()  ())
#('const cv.CAP_OPENNI_GENERATORS_MASK'  'CAP_OPENNI_DEPTH_GENERATOR + CAP_OPENNI_IMAGE_GENERATOR'  ()  ())
#('const cv.CAP_PROP_OPENNI_OUTPUT_MODE'  '100'  ()  ())
#('const cv.CAP_PROP_OPENNI_FRAME_MAX_DEPTH'  '101'  ()  ())
#('const cv.CAP_PROP_OPENNI_BASELINE'  '102'  ()  ())
#('const cv.CAP_PROP_OPENNI_FOCAL_LENGTH'  '103'  ()  ())
#('const cv.CAP_PROP_OPENNI_REGISTRATION'  '104'  ()  ())
#('const cv.CAP_PROP_OPENNI_REGISTRATION_ON'  'CAP_PROP_OPENNI_REGISTRATION'  ()  ())
#('const cv.CAP_PROP_OPENNI_APPROX_FRAME_SYNC'  '105'  ()  ())
#('const cv.CAP_PROP_OPENNI_MAX_BUFFER_SIZE'  '106'  ()  ())
#('const cv.CAP_PROP_OPENNI_CIRCLE_BUFFER'  '107'  ()  ())
#('const cv.CAP_PROP_OPENNI_MAX_TIME_DURATION'  '108'  ()  ())
#('const cv.CAP_PROP_OPENNI_GENERATOR_PRESENT'  '109'  ()  ())
#('const cv.CAP_PROP_OPENNI2_SYNC'  '110'  ()  ())
#('const cv.CAP_PROP_OPENNI2_MIRROR'  '111'  ()  ())
#('const cv.CAP_OPENNI_IMAGE_GENERATOR_PRESENT'  'CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT'  ()  ())
#('const cv.CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE'  'CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_OUTPUT_MODE'  ()  ())
#('const cv.CAP_OPENNI_DEPTH_GENERATOR_BASELINE'  'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_BASELINE'  ()  ())
#('const cv.CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH'  'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_FOCAL_LENGTH'  ()  ())
#('const cv.CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION'  'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_REGISTRATION'  ()  ())
#('const cv.CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON'  'CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION'  ()  ())
#('const cv.CAP_OPENNI_DEPTH_MAP'  '0'  ()  ())
#('const cv.CAP_OPENNI_POINT_CLOUD_MAP'  '1'  ()  ())
#('const cv.CAP_OPENNI_DISPARITY_MAP'  '2'  ()  ())
#('const cv.CAP_OPENNI_DISPARITY_MAP_32F'  '3'  ()  ())
#('const cv.CAP_OPENNI_VALID_DEPTH_MASK'  '4'  ()  ())
#('const cv.CAP_OPENNI_BGR_IMAGE'  '5'  ()  ())
#('const cv.CAP_OPENNI_GRAY_IMAGE'  '6'  ()  ())
#('const cv.CAP_OPENNI_VGA_30HZ'  '0'  ()  ())
#('const cv.CAP_OPENNI_SXGA_15HZ'  '1'  ()  ())
#('const cv.CAP_OPENNI_SXGA_30HZ'  '2'  ()  ())
#('const cv.CAP_OPENNI_QVGA_30HZ'  '3'  ()  ())
#('const cv.CAP_OPENNI_QVGA_60HZ'  '4'  ()  ())
#('const cv.CAP_PROP_GSTREAMER_QUEUE_LENGTH'  '200'  ()  ())
#('const cv.CAP_PROP_PVAPI_MULTICASTIP'  '300'  ()  ())
#('const cv.CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE'  '301'  ()  ())
#('const cv.CAP_PROP_PVAPI_DECIMATIONHORIZONTAL'  '302'  ()  ())
#('const cv.CAP_PROP_PVAPI_DECIMATIONVERTICAL'  '303'  ()  ())
#('const cv.CAP_PROP_PVAPI_BINNINGX'  '304'  ()  ())
#('const cv.CAP_PROP_PVAPI_BINNINGY'  '305'  ()  ())
#('const cv.CAP_PROP_PVAPI_PIXELFORMAT'  '306'  ()  ())
#('const cv.CAP_PVAPI_FSTRIGMODE_FREERUN'  '0'  ()  ())
#('const cv.CAP_PVAPI_FSTRIGMODE_SYNCIN1'  '1'  ()  ())
#('const cv.CAP_PVAPI_FSTRIGMODE_SYNCIN2'  '2'  ()  ())
#('const cv.CAP_PVAPI_FSTRIGMODE_FIXEDRATE'  '3'  ()  ())
#('const cv.CAP_PVAPI_FSTRIGMODE_SOFTWARE'  '4'  ()  ())
#('const cv.CAP_PVAPI_DECIMATION_OFF'  '1'  ()  ())
#('const cv.CAP_PVAPI_DECIMATION_2OUTOF4'  '2'  ()  ())
#('const cv.CAP_PVAPI_DECIMATION_2OUTOF8'  '4'  ()  ())
#('const cv.CAP_PVAPI_DECIMATION_2OUTOF16'  '8'  ()  ())
#('const cv.CAP_PVAPI_PIXELFORMAT_MONO8'  '1'  ()  ())
#('const cv.CAP_PVAPI_PIXELFORMAT_MONO16'  '2'  ()  ())
#('const cv.CAP_PVAPI_PIXELFORMAT_BAYER8'  '3'  ()  ())
#('const cv.CAP_PVAPI_PIXELFORMAT_BAYER16'  '4'  ()  ())
#('const cv.CAP_PVAPI_PIXELFORMAT_RGB24'  '5'  ()  ())
#('const cv.CAP_PVAPI_PIXELFORMAT_BGR24'  '6'  ()  ())
#('const cv.CAP_PVAPI_PIXELFORMAT_RGBA32'  '7'  ()  ())
#('const cv.CAP_PVAPI_PIXELFORMAT_BGRA32'  '8'  ()  ())
#('const cv.CAP_PROP_XI_DOWNSAMPLING'  '400'  ()  ())
#('const cv.CAP_PROP_XI_DATA_FORMAT'  '401'  ()  ())
#('const cv.CAP_PROP_XI_OFFSET_X'  '402'  ()  ())
#('const cv.CAP_PROP_XI_OFFSET_Y'  '403'  ()  ())
#('const cv.CAP_PROP_XI_TRG_SOURCE'  '404'  ()  ())
#('const cv.CAP_PROP_XI_TRG_SOFTWARE'  '405'  ()  ())
#('const cv.CAP_PROP_XI_GPI_SELECTOR'  '406'  ()  ())
#('const cv.CAP_PROP_XI_GPI_MODE'  '407'  ()  ())
#('const cv.CAP_PROP_XI_GPI_LEVEL'  '408'  ()  ())
#('const cv.CAP_PROP_XI_GPO_SELECTOR'  '409'  ()  ())
#('const cv.CAP_PROP_XI_GPO_MODE'  '410'  ()  ())
#('const cv.CAP_PROP_XI_LED_SELECTOR'  '411'  ()  ())
#('const cv.CAP_PROP_XI_LED_MODE'  '412'  ()  ())
#('const cv.CAP_PROP_XI_MANUAL_WB'  '413'  ()  ())
#('const cv.CAP_PROP_XI_AUTO_WB'  '414'  ()  ())
#('const cv.CAP_PROP_XI_AEAG'  '415'  ()  ())
#('const cv.CAP_PROP_XI_EXP_PRIORITY'  '416'  ()  ())
#('const cv.CAP_PROP_XI_AE_MAX_LIMIT'  '417'  ()  ())
#('const cv.CAP_PROP_XI_AG_MAX_LIMIT'  '418'  ()  ())
#('const cv.CAP_PROP_XI_AEAG_LEVEL'  '419'  ()  ())
#('const cv.CAP_PROP_XI_TIMEOUT'  '420'  ()  ())
#('const cv.CAP_PROP_ANDROID_AUTOGRAB'  '1024'  ()  ())
#('const cv.CAP_PROP_ANDROID_PREVIEW_SIZES_STRING'  '1025'  ()  ())
#('const cv.CAP_PROP_ANDROID_PREVIEW_FORMAT'  '1026'  ()  ())
#('const cv.CAP_PROP_ANDROID_FLASH_MODE'  '8001'  ()  ())
#('const cv.CAP_PROP_ANDROID_FOCUS_MODE'  '8002'  ()  ())
#('const cv.CAP_PROP_ANDROID_WHITE_BALANCE'  '8003'  ()  ())
#('const cv.CAP_PROP_ANDROID_ANTIBANDING'  '8004'  ()  ())
#('const cv.CAP_PROP_ANDROID_FOCAL_LENGTH'  '8005'  ()  ())
#('const cv.CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR'  '8006'  ()  ())
#('const cv.CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL'  '8007'  ()  ())
#('const cv.CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR'  '8008'  ()  ())
#('const cv.CAP_ANDROID_COLOR_FRAME_BGR'  '0'  ()  ())
#('const cv.CAP_ANDROID_COLOR_FRAME'  'CAP_ANDROID_COLOR_FRAME_BGR'  ()  ())
#('const cv.CAP_ANDROID_GREY_FRAME'  '1'  ()  ())
#('const cv.CAP_ANDROID_GRAY_FRAME'  'CAP_ANDROID_GREY_FRAME'  ()  ())
#('const cv.CAP_ANDROID_COLOR_FRAME_RGB'  '2'  ()  ())
#('const cv.CAP_ANDROID_COLOR_FRAME_BGRA'  '3'  ()  ())
#('const cv.CAP_ANDROID_COLOR_FRAME_RGBA'  '4'  ()  ())
#('const cv.CAP_ANDROID_FLASH_MODE_AUTO'  '0'  ()  ())
#('const cv.CAP_ANDROID_FLASH_MODE_OFF'  '1'  ()  ())
#('const cv.CAP_ANDROID_FLASH_MODE_ON'  '2'  ()  ())
#('const cv.CAP_ANDROID_FLASH_MODE_RED_EYE'  '3'  ()  ())
#('const cv.CAP_ANDROID_FLASH_MODE_TORCH'  '4'  ()  ())
#('const cv.CAP_ANDROID_FOCUS_MODE_AUTO'  '0'  ()  ())
#('const cv.CAP_ANDROID_FOCUS_MODE_CONTINUOUS_VIDEO'  '1'  ()  ())
#('const cv.CAP_ANDROID_FOCUS_MODE_EDOF'  '2'  ()  ())
#('const cv.CAP_ANDROID_FOCUS_MODE_FIXED'  '3'  ()  ())
#('const cv.CAP_ANDROID_FOCUS_MODE_INFINITY'  '4'  ()  ())
#('const cv.CAP_ANDROID_FOCUS_MODE_MACRO'  '5'  ()  ())
#('const cv.CAP_ANDROID_WHITE_BALANCE_AUTO'  '0'  ()  ())
#('const cv.CAP_ANDROID_WHITE_BALANCE_CLOUDY_DAYLIGHT'  '1'  ()  ())
#('const cv.CAP_ANDROID_WHITE_BALANCE_DAYLIGHT'  '2'  ()  ())
#('const cv.CAP_ANDROID_WHITE_BALANCE_FLUORESCENT'  '3'  ()  ())
#('const cv.CAP_ANDROID_WHITE_BALANCE_INCANDESCENT'  '4'  ()  ())
#('const cv.CAP_ANDROID_WHITE_BALANCE_SHADE'  '5'  ()  ())
#('const cv.CAP_ANDROID_WHITE_BALANCE_TWILIGHT'  '6'  ()  ())
#('const cv.CAP_ANDROID_WHITE_BALANCE_WARM_FLUORESCENT'  '7'  ()  ())
#('const cv.CAP_ANDROID_ANTIBANDING_50HZ'  '0'  ()  ())
#('const cv.CAP_ANDROID_ANTIBANDING_60HZ'  '1'  ()  ())
#('const cv.CAP_ANDROID_ANTIBANDING_AUTO'  '2'  ()  ())
#('const cv.CAP_ANDROID_ANTIBANDING_OFF'  '3'  ()  ())
#('const cv.CAP_PROP_IOS_DEVICE_FOCUS'  '9001'  ()  ())
#('const cv.CAP_PROP_IOS_DEVICE_EXPOSURE'  '9002'  ()  ())
#('const cv.CAP_PROP_IOS_DEVICE_FLASH'  '9003'  ()  ())
#('const cv.CAP_PROP_IOS_DEVICE_WHITEBALANCE'  '9004'  ()  ())
#('const cv.CAP_PROP_IOS_DEVICE_TORCH'  '9005'  ()  ())
#('const cv.CAP_PROP_GIGA_FRAME_OFFSET_X'  '10001'  ()  ())
#('const cv.CAP_PROP_GIGA_FRAME_OFFSET_Y'  '10002'  ()  ())
#('const cv.CAP_PROP_GIGA_FRAME_WIDTH_MAX'  '10003'  ()  ())
#('const cv.CAP_PROP_GIGA_FRAME_HEIGH_MAX'  '10004'  ()  ())
#('const cv.CAP_PROP_GIGA_FRAME_SENS_WIDTH'  '10005'  ()  ())
#('const cv.CAP_PROP_GIGA_FRAME_SENS_HEIGH'  '10006'  ()  ())
#('const cv.CAP_PROP_INTELPERC_PROFILE_COUNT'  '11001'  ()  ())
#('const cv.CAP_PROP_INTELPERC_PROFILE_IDX'  '11002'  ()  ())
#('const cv.CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE'  '11003'  ()  ())
#('const cv.CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE'  '11004'  ()  ())
#('const cv.CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD'  '11005'  ()  ())
#('const cv.CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ'  '11006'  ()  ())
#('const cv.CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT'  '11007'  ()  ())
#('const cv.CAP_INTELPERC_DEPTH_GENERATOR'  '1 << 29'  ()  ())
#('const cv.CAP_INTELPERC_IMAGE_GENERATOR'  '1 << 28'  ()  ())
#('const cv.CAP_INTELPERC_GENERATORS_MASK'  'CAP_INTELPERC_DEPTH_GENERATOR + CAP_INTELPERC_IMAGE_GENERATOR'  ()  ())
#('const cv.CAP_INTELPERC_DEPTH_MAP'  '0'  ()  ())
#('const cv.CAP_INTELPERC_UVDEPTH_MAP'  '1'  ()  ())
#('const cv.CAP_INTELPERC_IR_MAP'  '2'  ()  ())
#('const cv.CAP_INTELPERC_IMAGE'  '3'  ()  ())
#('const cv.VIDEOWRITER_PROP_QUALITY'  '1'  ()  ())
#('const cv.VIDEOWRITER_PROP_FRAMEBYTES'  '2'  ()  ())
#('class cv.VideoCapture'  ''  ()  ())
#('cv.VideoCapture.VideoCapture'  ''  ()  ())
#('cv.VideoCapture.VideoCapture'  ''  ()  (('String'  'filename'  ''  ())))
#('cv.VideoCapture.VideoCapture'  ''  ()  (('int'  'device'  ''  ())))
#('cv.VideoCapture.open'  'bool'  ()  (('String'  'filename'  ''  ()))  'bool')
#('cv.VideoCapture.open'  'bool'  ()  (('int'  'device'  ''  ()))  'bool')
#('cv.VideoCapture.isOpened'  'bool'  ()  ()  'bool')
#('cv.VideoCapture.release'  'void'  ()  ()  'void')
#('cv.VideoCapture.grab'  'bool'  ()  ()  'bool')
#('cv.VideoCapture.retrieve'  'bool'  ()  (('Mat'  'image'  ''  ('/O'))  ('int'  'flag'  '0'  ()))  'bool')
#('cv.VideoCapture.read'  'bool'  ()  (('Mat'  'image'  ''  ('/O')))  'bool')
#('cv.VideoCapture.set'  'bool'  ()  (('int'  'propId'  ''  ())  ('double'  'value'  ''  ()))  'bool')
#('cv.VideoCapture.get'  'double'  ()  (('int'  'propId'  ''  ()))  'double')
#('class cv.VideoWriter'  ''  ()  ())
#('cv.VideoWriter.VideoWriter'  ''  ()  ())
#('cv.VideoWriter.VideoWriter'  ''  ()  (('String'  'filename'  ''  ())  ('int'  'fourcc'  ''  ())  ('double'  'fps'  ''  ())  ('Size'  'frameSize'  ''  ())  ('bool'  'isColor'  'true'  ())))
#('cv.VideoWriter.open'  'bool'  ()  (('String'  'filename'  ''  ())  ('int'  'fourcc'  ''  ())  ('double'  'fps'  ''  ())  ('Size'  'frameSize'  ''  ())  ('bool'  'isColor'  'true'  ()))  'bool')
#('cv.VideoWriter.isOpened'  'bool'  ()  ()  'bool')
#('cv.VideoWriter.release'  'void'  ()  ()  'void')
#('cv.VideoWriter.write'  'void'  ()  (('Mat'  'image'  ''  ()))  'void')
#('cv.VideoWriter.set'  'bool'  ()  (('int'  'propId'  ''  ())  ('double'  'value'  ''  ()))  'bool')
#('cv.VideoWriter.get'  'double'  ()  (('int'  'propId'  ''  ()))  'double')
#('cv.VideoWriter.fourcc'  'int'  ('/S')  (('char'  'c1'  ''  ())  ('char'  'c2'  ''  ())  ('char'  'c3'  ''  ())  ('char'  'c4'  ''  ()))  'int')
#('const cv.WINDOW_NORMAL'  '0x00000000'  ()  ())
#('const cv.WINDOW_AUTOSIZE'  '0x00000001'  ()  ())
#('const cv.WINDOW_OPENGL'  '0x00001000'  ()  ())
#('const cv.WINDOW_FULLSCREEN'  '1'  ()  ())
#('const cv.WINDOW_FREERATIO'  '0x00000100'  ()  ())
#('const cv.WINDOW_KEEPRATIO'  '0x00000000'  ()  ())
#('const cv.WND_PROP_FULLSCREEN'  '0'  ()  ())
#('const cv.WND_PROP_AUTOSIZE'  '1'  ()  ())
#('const cv.WND_PROP_ASPECT_RATIO'  '2'  ()  ())
#('const cv.WND_PROP_OPENGL'  '3'  ()  ())
#('const cv.EVENT_MOUSEMOVE'  '0'  ()  ())
#('const cv.EVENT_LBUTTONDOWN'  '1'  ()  ())
#('const cv.EVENT_RBUTTONDOWN'  '2'  ()  ())
#('const cv.EVENT_MBUTTONDOWN'  '3'  ()  ())
#('const cv.EVENT_LBUTTONUP'  '4'  ()  ())
#('const cv.EVENT_RBUTTONUP'  '5'  ()  ())
#('const cv.EVENT_MBUTTONUP'  '6'  ()  ())
#('const cv.EVENT_LBUTTONDBLCLK'  '7'  ()  ())
#('const cv.EVENT_RBUTTONDBLCLK'  '8'  ()  ())
#('const cv.EVENT_MBUTTONDBLCLK'  '9'  ()  ())
#('const cv.EVENT_MOUSEWHEEL'  '10'  ()  ())
#('const cv.EVENT_MOUSEHWHEEL'  '11'  ()  ())
#('const cv.EVENT_FLAG_LBUTTON'  '1'  ()  ())
#('const cv.EVENT_FLAG_RBUTTON'  '2'  ()  ())
#('const cv.EVENT_FLAG_MBUTTON'  '4'  ()  ())
#('const cv.EVENT_FLAG_CTRLKEY'  '8'  ()  ())
#('const cv.EVENT_FLAG_SHIFTKEY'  '16'  ()  ())
#('const cv.EVENT_FLAG_ALTKEY'  '32'  ()  ())
#('const cv.QT_FONT_LIGHT'  '25'  ()  ())
#('const cv.QT_FONT_NORMAL'  '50'  ()  ())
#('const cv.QT_FONT_DEMIBOLD'  '63'  ()  ())
#('const cv.QT_FONT_BOLD'  '75'  ()  ())
#('const cv.QT_FONT_BLACK'  '87'  ()  ())
#('const cv.QT_STYLE_NORMAL'  '0'  ()  ())
#('const cv.QT_STYLE_ITALIC'  '1'  ()  ())
#('const cv.QT_STYLE_OBLIQUE'  '2'  ()  ())
#('const cv.QT_PUSH_BUTTON'  '0'  ()  ())
#('const cv.QT_CHECKBOX'  '1'  ()  ())
#('const cv.QT_RADIOBOX'  '2'  ()  ())
#('cv.namedWindow'  'void'  ()  (('String'  'winname'  ''  ())  ('int'  'flags'  'WINDOW_AUTOSIZE'  ()))  'void')
#('cv.destroyWindow'  'void'  ()  (('String'  'winname'  ''  ()))  'void')
#('cv.destroyAllWindows'  'void'  ()  ()  'void')
#('cv.startWindowThread'  'int'  ()  ()  'int')
#('cv.waitKey'  'int'  ()  (('int'  'delay'  '0'  ()))  'int')
#('cv.imshow'  'void'  ()  (('String'  'winname'  ''  ())  ('Mat'  'mat'  ''  ()))  'void')
#('cv.resizeWindow'  'void'  ()  (('String'  'winname'  ''  ())  ('int'  'width'  ''  ())  ('int'  'height'  ''  ()))  'void')
#('cv.moveWindow'  'void'  ()  (('String'  'winname'  ''  ())  ('int'  'x'  ''  ())  ('int'  'y'  ''  ()))  'void')
#('cv.setWindowProperty'  'void'  ()  (('String'  'winname'  ''  ())  ('int'  'prop_id'  ''  ())  ('double'  'prop_value'  ''  ()))  'void')
#('cv.setWindowTitle'  'void'  ()  (('String'  'winname'  ''  ())  ('String'  'title'  ''  ()))  'void')
#('cv.getWindowProperty'  'double'  ()  (('String'  'winname'  ''  ())  ('int'  'prop_id'  ''  ()))  'double')
#('cv.getTrackbarPos'  'int'  ()  (('String'  'trackbarname'  ''  ())  ('String'  'winname'  ''  ()))  'int')
#('cv.setTrackbarPos'  'void'  ()  (('String'  'trackbarname'  ''  ())  ('String'  'winname'  ''  ())  ('int'  'pos'  ''  ()))  'void')
#('cv.setTrackbarMax'  'void'  ()  (('String'  'trackbarname'  ''  ())  ('String'  'winname'  ''  ())  ('int'  'maxval'  ''  ()))  'void')
#('cv.groupRectangles'  'void'  ()  (('vector_Rect'  'rectList'  ''  ('/IO'))  ('vector_int'  'weights'  ''  ('/O'))  ('int'  'groupThreshold'  ''  ())  ('double'  'eps'  '0.2'  ()))  'void')
#('const cv.CASCADE_DO_CANNY_PRUNING'  '1'  ()  ())
#('const cv.CASCADE_SCALE_IMAGE'  '2'  ()  ())
#('const cv.CASCADE_FIND_BIGGEST_OBJECT'  '4'  ()  ())
#('const cv.CASCADE_DO_ROUGH_SEARCH'  '8'  ()  ())
#('class cv.BaseCascadeClassifier'  ': cv::Algorithm'  ()  ())
#('class cv.CascadeClassifier'  ''  ()  ())
#('cv.CascadeClassifier.CascadeClassifier'  ''  ()  ())
#('cv.CascadeClassifier.CascadeClassifier'  ''  ()  (('String'  'filename'  ''  ())))
#('cv.CascadeClassifier.empty'  'bool'  ()  ()  'bool')
#('cv.CascadeClassifier.load'  'bool'  ()  (('String'  'filename'  ''  ()))  'bool')
#('cv.CascadeClassifier.read'  'bool'  ()  (('FileNode'  'node'  ''  ()))  'bool')
#('cv.CascadeClassifier.detectMultiScale'  'void'  ()  (('Mat'  'image'  ''  ())  ('vector_Rect'  'objects'  ''  ('/O'))  ('double'  'scaleFactor'  '1.1'  ())  ('int'  'minNeighbors'  '3'  ())  ('int'  'flags'  '0'  ())  ('Size'  'minSize'  'Size()'  ())  ('Size'  'maxSize'  'Size()'  ()))  'void')
#('cv.CascadeClassifier.detectMultiScale'  'void'  ('=detectMultiScale2')  (('Mat'  'image'  ''  ())  ('vector_Rect'  'objects'  ''  ('/O'))  ('vector_int'  'numDetections'  ''  ('/O'))  ('double'  'scaleFactor'  '1.1'  ())  ('int'  'minNeighbors'  '3'  ())  ('int'  'flags'  '0'  ())  ('Size'  'minSize'  'Size()'  ())  ('Size'  'maxSize'  'Size()'  ()))  'void')
#('cv.CascadeClassifier.detectMultiScale'  'void'  ('=detectMultiScale3')  (('Mat'  'image'  ''  ())  ('vector_Rect'  'objects'  ''  ('/O'))  ('vector_int'  'rejectLevels'  ''  ('/O'))  ('vector_double'  'levelWeights'  ''  ('/O'))  ('double'  'scaleFactor'  '1.1'  ())  ('int'  'minNeighbors'  '3'  ())  ('int'  'flags'  '0'  ())  ('Size'  'minSize'  'Size()'  ())  ('Size'  'maxSize'  'Size()'  ())  ('bool'  'outputRejectLevels'  'false'  ()))  'void')
#('cv.CascadeClassifier.isOldFormatCascade'  'bool'  ()  ()  'bool')
#('cv.CascadeClassifier.getOriginalWindowSize'  'Size'  ()  ()  'Size')
#('cv.CascadeClassifier.getFeatureType'  'int'  ()  ()  'int')
#('cv.CascadeClassifier.convert'  'bool'  ('/S')  (('String'  'oldcascade'  ''  ())  ('String'  'newcascade'  ''  ()))  'bool')
#('struct cv.HOGDescriptor'  ''  ()  (('Size'  'winSize'  ''  ())  ('Size'  'blockSize'  ''  ())  ('Size'  'blockStride'  ''  ())  ('Size'  'cellSize'  ''  ())  ('int'  'nbins'  ''  ())  ('int'  'derivAperture'  ''  ())  ('double'  'winSigma'  ''  ())  ('int'  'histogramNormType'  ''  ())  ('double'  'L2HysThreshold'  ''  ())  ('bool'  'gammaCorrection'  ''  ())  ('vector_float'  'svmDetector'  ''  ())  ('int'  'nlevels'  ''  ())  ('bool'  'signedGradient'  ''  ())))
#('const cv.HOGDescriptor.L2Hys'  '0'  ()  ())
#('const cv.HOGDescriptor.DEFAULT_NLEVELS'  '64'  ()  ())
#('cv.HOGDescriptor.HOGDescriptor'  ''  ()  ())
#('cv.HOGDescriptor.HOGDescriptor'  ''  ()  (('Size'  '_winSize'  ''  ())  ('Size'  '_blockSize'  ''  ())  ('Size'  '_blockStride'  ''  ())  ('Size'  '_cellSize'  ''  ())  ('int'  '_nbins'  ''  ())  ('int'  '_derivAperture'  '1'  ())  ('double'  '_winSigma'  '-1'  ())  ('int'  '_histogramNormType'  'HOGDescriptor::L2Hys'  ())  ('double'  '_L2HysThreshold'  '0.2'  ())  ('bool'  '_gammaCorrection'  'false'  ())  ('int'  '_nlevels'  'HOGDescriptor::DEFAULT_NLEVELS'  ())  ('bool'  '_signedGradient'  'false'  ())))
#('cv.HOGDescriptor.HOGDescriptor'  ''  ()  (('String'  'filename'  ''  ())))
#('cv.HOGDescriptor.getDescriptorSize'  'size_t'  ()  ()  'size_t')
#('cv.HOGDescriptor.checkDetectorSize'  'bool'  ()  ()  'bool')
#('cv.HOGDescriptor.getWinSigma'  'double'  ()  ()  'double')
#('cv.HOGDescriptor.setSVMDetector'  'void'  ()  (('Mat'  '_svmdetector'  ''  ()))  'void')
#('cv.HOGDescriptor.load'  'bool'  ()  (('String'  'filename'  ''  ())  ('String'  'objname'  'String()'  ()))  'bool')
#('cv.HOGDescriptor.save'  'void'  ()  (('String'  'filename'  ''  ())  ('String'  'objname'  'String()'  ()))  'void')
#('cv.HOGDescriptor.compute'  'void'  ()  (('Mat'  'img'  ''  ())  ('vector_float'  'descriptors'  ''  ('/O'))  ('Size'  'winStride'  'Size()'  ())  ('Size'  'padding'  'Size()'  ())  ('vector_Point'  'locations'  'std::vector<Point>()'  ()))  'void')
#('cv.HOGDescriptor.detect'  'void'  ()  (('Mat'  'img'  ''  ())  ('vector_Point'  'foundLocations'  ''  ('/O'))  ('vector_double'  'weights'  ''  ('/O'))  ('double'  'hitThreshold'  '0'  ())  ('Size'  'winStride'  'Size()'  ())  ('Size'  'padding'  'Size()'  ())  ('vector_Point'  'searchLocations'  'std::vector<Point>()'  ()))  'void')
#('cv.HOGDescriptor.detectMultiScale'  'void'  ()  (('Mat'  'img'  ''  ())  ('vector_Rect'  'foundLocations'  ''  ('/O'))  ('vector_double'  'foundWeights'  ''  ('/O'))  ('double'  'hitThreshold'  '0'  ())  ('Size'  'winStride'  'Size()'  ())  ('Size'  'padding'  'Size()'  ())  ('double'  'scale'  '1.05'  ())  ('double'  'finalThreshold'  '2.0'  ())  ('bool'  'useMeanshiftGrouping'  'false'  ()))  'void')
#('cv.HOGDescriptor.computeGradient'  'void'  ()  (('Mat'  'img'  ''  ())  ('Mat'  'grad'  ''  ('/O'))  ('Mat'  'angleOfs'  ''  ('/O'))  ('Size'  'paddingTL'  'Size()'  ())  ('Size'  'paddingBR'  'Size()'  ()))  'void')
#('cv.HOGDescriptor.getDefaultPeopleDetector'  'vector_float'  ('/S')  ()  'std::vector<float>')
#('cv.HOGDescriptor.getDaimlerPeopleDetector'  'vector_float'  ('/S')  ()  'std::vector<float>')
#('const cv.DetectionBasedTracker.DETECTED_NOT_SHOWN_YET'  '0'  ()  ())
#('const cv.DetectionBasedTracker.DETECTED'  '1'  ()  ())
#('const cv.DetectionBasedTracker.DETECTED_TEMPORARY_LOST'  '2'  ()  ())
#('const cv.DetectionBasedTracker.WRONG_OBJECT'  '3'  ()  ())
#('class cv.Feature2D'  ': cv::Algorithm'  ()  ())
#('cv.Feature2D.detect'  'void'  ()  (('Mat'  'image'  ''  ())  ('vector_KeyPoint'  'keypoints'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.Feature2D.compute'  'void'  ()  (('Mat'  'image'  ''  ())  ('vector_KeyPoint'  'keypoints'  ''  ('/O'  '/IO'))  ('Mat'  'descriptors'  ''  ('/O')))  'void')
#('cv.Feature2D.detectAndCompute'  'void'  ()  (('Mat'  'image'  ''  ())  ('Mat'  'mask'  ''  ())  ('vector_KeyPoint'  'keypoints'  ''  ('/O'))  ('Mat'  'descriptors'  ''  ('/O'))  ('bool'  'useProvidedKeypoints'  'false'  ()))  'void')
#('cv.Feature2D.descriptorSize'  'int'  ()  ()  'int')
#('cv.Feature2D.descriptorType'  'int'  ()  ()  'int')
#('cv.Feature2D.defaultNorm'  'int'  ()  ()  'int')
#('cv.Feature2D.empty'  'bool'  ()  ()  'bool')
#('class cv.BRISK'  ': cv::Feature2D'  ()  ())
#('cv.BRISK.create'  'Ptr_BRISK'  ('/S')  (('int'  'thresh'  '30'  ())  ('int'  'octaves'  '3'  ())  ('float'  'patternScale'  '1.0f'  ()))  'Ptr<BRISK>')
#('cv.BRISK.create'  'Ptr_BRISK'  ('/S')  (('vector_float'  'radiusList'  ''  ())  ('vector_int'  'numberList'  ''  ())  ('float'  'dMax'  '5.85f'  ())  ('float'  'dMin'  '8.2f'  ())  ('vector_int'  'indexChange'  'std::vector<int>()'  ()))  'Ptr<BRISK>')
#('class cv.ORB'  ': cv::Feature2D'  ()  ())
#('const cv.ORB.kBytes'  '32'  ()  ())
#('const cv.ORB.HARRIS_SCORE'  '0'  ()  ())
#('const cv.ORB.FAST_SCORE'  '1'  ()  ())
#('cv.ORB.create'  'Ptr_ORB'  ('/S')  (('int'  'nfeatures'  '500'  ())  ('float'  'scaleFactor'  '1.2f'  ())  ('int'  'nlevels'  '8'  ())  ('int'  'edgeThreshold'  '31'  ())  ('int'  'firstLevel'  '0'  ())  ('int'  'WTA_K'  '2'  ())  ('int'  'scoreType'  'ORB::HARRIS_SCORE'  ())  ('int'  'patchSize'  '31'  ())  ('int'  'fastThreshold'  '20'  ()))  'Ptr<ORB>')
#('cv.ORB.setMaxFeatures'  'void'  ()  (('int'  'maxFeatures'  ''  ()))  'void')
#('cv.ORB.getMaxFeatures'  'int'  ()  ()  'int')
#('cv.ORB.setScaleFactor'  'void'  ()  (('double'  'scaleFactor'  ''  ()))  'void')
#('cv.ORB.getScaleFactor'  'double'  ()  ()  'double')
#('cv.ORB.setNLevels'  'void'  ()  (('int'  'nlevels'  ''  ()))  'void')
#('cv.ORB.getNLevels'  'int'  ()  ()  'int')
#('cv.ORB.setEdgeThreshold'  'void'  ()  (('int'  'edgeThreshold'  ''  ()))  'void')
#('cv.ORB.getEdgeThreshold'  'int'  ()  ()  'int')
#('cv.ORB.setFirstLevel'  'void'  ()  (('int'  'firstLevel'  ''  ()))  'void')
#('cv.ORB.getFirstLevel'  'int'  ()  ()  'int')
#('cv.ORB.setWTA_K'  'void'  ()  (('int'  'wta_k'  ''  ()))  'void')
#('cv.ORB.getWTA_K'  'int'  ()  ()  'int')
#('cv.ORB.setScoreType'  'void'  ()  (('int'  'scoreType'  ''  ()))  'void')
#('cv.ORB.getScoreType'  'int'  ()  ()  'int')
#('cv.ORB.setPatchSize'  'void'  ()  (('int'  'patchSize'  ''  ()))  'void')
#('cv.ORB.getPatchSize'  'int'  ()  ()  'int')
#('cv.ORB.setFastThreshold'  'void'  ()  (('int'  'fastThreshold'  ''  ()))  'void')
#('cv.ORB.getFastThreshold'  'int'  ()  ()  'int')
#('class cv.MSER'  ': cv::Feature2D'  ()  ())
#('cv.MSER.create'  'Ptr_MSER'  ('/S')  (('int'  '_delta'  '5'  ())  ('int'  '_min_area'  '60'  ())  ('int'  '_max_area'  '14400'  ())  ('double'  '_max_variation'  '0.25'  ())  ('double'  '_min_diversity'  '.2'  ())  ('int'  '_max_evolution'  '200'  ())  ('double'  '_area_threshold'  '1.01'  ())  ('double'  '_min_margin'  '0.003'  ())  ('int'  '_edge_blur_size'  '5'  ()))  'Ptr<MSER>')
#('cv.MSER.detectRegions'  'void'  ()  (('Mat'  'image'  ''  ())  ('vector_vector_Point'  'msers'  ''  ('/O'))  ('vector_Rect'  'bboxes'  ''  ()))  'void')
#('cv.MSER.setDelta'  'void'  ()  (('int'  'delta'  ''  ()))  'void')
#('cv.MSER.getDelta'  'int'  ()  ()  'int')
#('cv.MSER.setMinArea'  'void'  ()  (('int'  'minArea'  ''  ()))  'void')
#('cv.MSER.getMinArea'  'int'  ()  ()  'int')
#('cv.MSER.setMaxArea'  'void'  ()  (('int'  'maxArea'  ''  ()))  'void')
#('cv.MSER.getMaxArea'  'int'  ()  ()  'int')
#('cv.MSER.setPass2Only'  'void'  ()  (('bool'  'f'  ''  ()))  'void')
#('cv.MSER.getPass2Only'  'bool'  ()  ()  'bool')
#('class cv.FastFeatureDetector'  ': cv::Feature2D'  ()  ())
#('const cv.FastFeatureDetector.TYPE_5_8'  '0'  ()  ())
#('const cv.FastFeatureDetector.TYPE_7_12'  '1'  ()  ())
#('const cv.FastFeatureDetector.TYPE_9_16'  '2'  ()  ())
#('const cv.FastFeatureDetector.THRESHOLD'  '10000'  ()  ())
#('const cv.FastFeatureDetector.NONMAX_SUPPRESSION'  '10001'  ()  ())
#('const cv.FastFeatureDetector.FAST_N'  '10002'  ()  ())
#('cv.FastFeatureDetector.create'  'Ptr_FastFeatureDetector'  ('/S')  (('int'  'threshold'  '10'  ())  ('bool'  'nonmaxSuppression'  'true'  ())  ('int'  'type'  'FastFeatureDetector::TYPE_9_16'  ()))  'Ptr<FastFeatureDetector>')
#('cv.FastFeatureDetector.setThreshold'  'void'  ()  (('int'  'threshold'  ''  ()))  'void')
#('cv.FastFeatureDetector.getThreshold'  'int'  ()  ()  'int')
#('cv.FastFeatureDetector.setNonmaxSuppression'  'void'  ()  (('bool'  'f'  ''  ()))  'void')
#('cv.FastFeatureDetector.getNonmaxSuppression'  'bool'  ()  ()  'bool')
#('cv.FastFeatureDetector.setType'  'void'  ()  (('int'  'type'  ''  ()))  'void')
#('cv.FastFeatureDetector.getType'  'int'  ()  ()  'int')
#('class cv.AgastFeatureDetector'  ': cv::Feature2D'  ()  ())
#('const cv.AgastFeatureDetector.AGAST_5_8'  '0'  ()  ())
#('const cv.AgastFeatureDetector.AGAST_7_12d'  '1'  ()  ())
#('const cv.AgastFeatureDetector.AGAST_7_12s'  '2'  ()  ())
#('const cv.AgastFeatureDetector.OAST_9_16'  '3'  ()  ())
#('const cv.AgastFeatureDetector.THRESHOLD'  '10000'  ()  ())
#('const cv.AgastFeatureDetector.NONMAX_SUPPRESSION'  '10001'  ()  ())
#('cv.AgastFeatureDetector.create'  'Ptr_AgastFeatureDetector'  ('/S')  (('int'  'threshold'  '10'  ())  ('bool'  'nonmaxSuppression'  'true'  ())  ('int'  'type'  'AgastFeatureDetector::OAST_9_16'  ()))  'Ptr<AgastFeatureDetector>')
#('cv.AgastFeatureDetector.setThreshold'  'void'  ()  (('int'  'threshold'  ''  ()))  'void')
#('cv.AgastFeatureDetector.getThreshold'  'int'  ()  ()  'int')
#('cv.AgastFeatureDetector.setNonmaxSuppression'  'void'  ()  (('bool'  'f'  ''  ()))  'void')
#('cv.AgastFeatureDetector.getNonmaxSuppression'  'bool'  ()  ()  'bool')
#('cv.AgastFeatureDetector.setType'  'void'  ()  (('int'  'type'  ''  ()))  'void')
#('cv.AgastFeatureDetector.getType'  'int'  ()  ()  'int')
#('class cv.GFTTDetector'  ': cv::Feature2D'  ()  ())
#('cv.GFTTDetector.create'  'Ptr_GFTTDetector'  ('/S')  (('int'  'maxCorners'  '1000'  ())  ('double'  'qualityLevel'  '0.01'  ())  ('double'  'minDistance'  '1'  ())  ('int'  'blockSize'  '3'  ())  ('bool'  'useHarrisDetector'  'false'  ())  ('double'  'k'  '0.04'  ()))  'Ptr<GFTTDetector>')
#('cv.GFTTDetector.setMaxFeatures'  'void'  ()  (('int'  'maxFeatures'  ''  ()))  'void')
#('cv.GFTTDetector.getMaxFeatures'  'int'  ()  ()  'int')
#('cv.GFTTDetector.setQualityLevel'  'void'  ()  (('double'  'qlevel'  ''  ()))  'void')
#('cv.GFTTDetector.getQualityLevel'  'double'  ()  ()  'double')
#('cv.GFTTDetector.setMinDistance'  'void'  ()  (('double'  'minDistance'  ''  ()))  'void')
#('cv.GFTTDetector.getMinDistance'  'double'  ()  ()  'double')
#('cv.GFTTDetector.setBlockSize'  'void'  ()  (('int'  'blockSize'  ''  ()))  'void')
#('cv.GFTTDetector.getBlockSize'  'int'  ()  ()  'int')
#('cv.GFTTDetector.setHarrisDetector'  'void'  ()  (('bool'  'val'  ''  ()))  'void')
#('cv.GFTTDetector.getHarrisDetector'  'bool'  ()  ()  'bool')
#('cv.GFTTDetector.setK'  'void'  ()  (('double'  'k'  ''  ()))  'void')
#('cv.GFTTDetector.getK'  'double'  ()  ()  'double')
#('class cv.SimpleBlobDetector'  ': cv::Feature2D'  ()  ())
#('struct cv.SimpleBlobDetector.Params'  ''  ('/Simple')  (('float'  'thresholdStep'  ''  ('/RW'))  ('float'  'minThreshold'  ''  ('/RW'))  ('float'  'maxThreshold'  ''  ('/RW'))  ('size_t'  'minRepeatability'  ''  ('/RW'))  ('float'  'minDistBetweenBlobs'  ''  ('/RW'))  ('bool'  'filterByColor'  ''  ('/RW'))  ('uchar'  'blobColor'  ''  ('/RW'))  ('bool'  'filterByArea'  ''  ('/RW'))  ('float'  'minArea'  ''  ('/RW'))  ('float'  'maxArea'  ''  ('/RW'))  ('bool'  'filterByCircularity'  ''  ('/RW'))  ('float'  'minCircularity'  ''  ('/RW'))  ('float'  'maxCircularity'  ''  ('/RW'))  ('bool'  'filterByInertia'  ''  ('/RW'))  ('float'  'minInertiaRatio'  ''  ('/RW'))  ('float'  'maxInertiaRatio'  ''  ('/RW'))  ('bool'  'filterByConvexity'  ''  ('/RW'))  ('float'  'minConvexity'  ''  ('/RW'))  ('float'  'maxConvexity'  ''  ('/RW'))))
#('cv.SimpleBlobDetector.Params.Params'  ''  ()  ())
#('cv.SimpleBlobDetector.create'  'Ptr_SimpleBlobDetector'  ('/S')  (('SimpleBlobDetector_Params'  'parameters'  'SimpleBlobDetector::Params()'  ()))  'Ptr<SimpleBlobDetector>')
#('class cv.KAZE'  ': cv::Feature2D'  ()  ())
#('const cv.KAZE.DIFF_PM_G1'  '0'  ()  ())
#('const cv.KAZE.DIFF_PM_G2'  '1'  ()  ())
#('const cv.KAZE.DIFF_WEICKERT'  '2'  ()  ())
#('const cv.KAZE.DIFF_CHARBONNIER'  '3'  ()  ())
#('cv.KAZE.create'  'Ptr_KAZE'  ('/S')  (('bool'  'extended'  'false'  ())  ('bool'  'upright'  'false'  ())  ('float'  'threshold'  '0.001f'  ())  ('int'  'nOctaves'  '4'  ())  ('int'  'nOctaveLayers'  '4'  ())  ('int'  'diffusivity'  'KAZE::DIFF_PM_G2'  ()))  'Ptr<KAZE>')
#('cv.KAZE.setExtended'  'void'  ()  (('bool'  'extended'  ''  ()))  'void')
#('cv.KAZE.getExtended'  'bool'  ()  ()  'bool')
#('cv.KAZE.setUpright'  'void'  ()  (('bool'  'upright'  ''  ()))  'void')
#('cv.KAZE.getUpright'  'bool'  ()  ()  'bool')
#('cv.KAZE.setThreshold'  'void'  ()  (('double'  'threshold'  ''  ()))  'void')
#('cv.KAZE.getThreshold'  'double'  ()  ()  'double')
#('cv.KAZE.setNOctaves'  'void'  ()  (('int'  'octaves'  ''  ()))  'void')
#('cv.KAZE.getNOctaves'  'int'  ()  ()  'int')
#('cv.KAZE.setNOctaveLayers'  'void'  ()  (('int'  'octaveLayers'  ''  ()))  'void')
#('cv.KAZE.getNOctaveLayers'  'int'  ()  ()  'int')
#('cv.KAZE.setDiffusivity'  'void'  ()  (('int'  'diff'  ''  ()))  'void')
#('cv.KAZE.getDiffusivity'  'int'  ()  ()  'int')
#('class cv.AKAZE'  ': cv::Feature2D'  ()  ())
#('const cv.AKAZE.DESCRIPTOR_KAZE_UPRIGHT'  '2'  ()  ())
#('const cv.AKAZE.DESCRIPTOR_KAZE'  '3'  ()  ())
#('const cv.AKAZE.DESCRIPTOR_MLDB_UPRIGHT'  '4'  ()  ())
#('const cv.AKAZE.DESCRIPTOR_MLDB'  '5'  ()  ())
#('cv.AKAZE.create'  'Ptr_AKAZE'  ('/S')  (('int'  'descriptor_type'  'AKAZE::DESCRIPTOR_MLDB'  ())  ('int'  'descriptor_size'  '0'  ())  ('int'  'descriptor_channels'  '3'  ())  ('float'  'threshold'  '0.001f'  ())  ('int'  'nOctaves'  '4'  ())  ('int'  'nOctaveLayers'  '4'  ())  ('int'  'diffusivity'  'KAZE::DIFF_PM_G2'  ()))  'Ptr<AKAZE>')
#('cv.AKAZE.setDescriptorType'  'void'  ()  (('int'  'dtype'  ''  ()))  'void')
#('cv.AKAZE.getDescriptorType'  'int'  ()  ()  'int')
#('cv.AKAZE.setDescriptorSize'  'void'  ()  (('int'  'dsize'  ''  ()))  'void')
#('cv.AKAZE.getDescriptorSize'  'int'  ()  ()  'int')
#('cv.AKAZE.setDescriptorChannels'  'void'  ()  (('int'  'dch'  ''  ()))  'void')
#('cv.AKAZE.getDescriptorChannels'  'int'  ()  ()  'int')
#('cv.AKAZE.setThreshold'  'void'  ()  (('double'  'threshold'  ''  ()))  'void')
#('cv.AKAZE.getThreshold'  'double'  ()  ()  'double')
#('cv.AKAZE.setNOctaves'  'void'  ()  (('int'  'octaves'  ''  ()))  'void')
#('cv.AKAZE.getNOctaves'  'int'  ()  ()  'int')
#('cv.AKAZE.setNOctaveLayers'  'void'  ()  (('int'  'octaveLayers'  ''  ()))  'void')
#('cv.AKAZE.getNOctaveLayers'  'int'  ()  ()  'int')
#('cv.AKAZE.setDiffusivity'  'void'  ()  (('int'  'diff'  ''  ()))  'void')
#('cv.AKAZE.getDiffusivity'  'int'  ()  ()  'int')
#('class cv.DescriptorMatcher'  ': cv::Algorithm'  ()  ())
#('cv.DescriptorMatcher.add'  'void'  ()  (('vector_Mat'  'descriptors'  ''  ()))  'void')
#('cv.DescriptorMatcher.getTrainDescriptors'  'vector_Mat'  ()  ()  'std::vector<Mat>')
#('cv.DescriptorMatcher.clear'  'void'  ()  ()  'void')
#('cv.DescriptorMatcher.empty'  'bool'  ()  ()  'bool')
#('cv.DescriptorMatcher.isMaskSupported'  'bool'  ()  ()  'bool')
#('cv.DescriptorMatcher.train'  'void'  ()  ()  'void')
#('cv.DescriptorMatcher.match'  'void'  ()  (('Mat'  'queryDescriptors'  ''  ())  ('Mat'  'trainDescriptors'  ''  ())  ('vector_DMatch'  'matches'  ''  ('/O'))  ('Mat'  'mask'  'Mat()'  ()))  'void')
#('cv.DescriptorMatcher.knnMatch'  'void'  ()  (('Mat'  'queryDescriptors'  ''  ())  ('Mat'  'trainDescriptors'  ''  ())  ('vector_vector_DMatch'  'matches'  ''  ('/O'))  ('int'  'k'  ''  ())  ('Mat'  'mask'  'Mat()'  ())  ('bool'  'compactResult'  'false'  ()))  'void')
#('cv.DescriptorMatcher.match'  'void'  ()  (('Mat'  'queryDescriptors'  ''  ())  ('vector_DMatch'  'matches'  ''  ('/O'))  ('vector_Mat'  'masks'  'vector_Mat()'  ()))  'void')
#('cv.DescriptorMatcher.knnMatch'  'void'  ()  (('Mat'  'queryDescriptors'  ''  ())  ('vector_vector_DMatch'  'matches'  ''  ('/O'))  ('int'  'k'  ''  ())  ('vector_Mat'  'masks'  'vector_Mat()'  ())  ('bool'  'compactResult'  'false'  ()))  'void')
#('cv.DescriptorMatcher.create'  'Ptr_DescriptorMatcher'  ('/S')  (('String'  'descriptorMatcherType'  ''  ()))  'Ptr<DescriptorMatcher>')
#('class cv.BFMatcher'  ': cv::DescriptorMatcher'  ()  ())
#('cv.BFMatcher.BFMatcher'  ''  ()  (('int'  'normType'  'NORM_L2'  ())  ('bool'  'crossCheck'  'false'  ())))
#('class cv.FlannBasedMatcher'  ': cv::DescriptorMatcher'  ()  ())
#('cv.FlannBasedMatcher.FlannBasedMatcher'  ''  ()  (('Ptr_flann_IndexParams'  'indexParams'  'makePtr<flann::KDTreeIndexParams>()'  ())  ('Ptr_flann_SearchParams'  'searchParams'  'makePtr<flann::SearchParams>()'  ())))
#('const cv.DrawMatchesFlags.DEFAULT'  '0'  ()  ())
#('const cv.DrawMatchesFlags.DRAW_OVER_OUTIMG'  '1'  ()  ())
#('const cv.DrawMatchesFlags.NOT_DRAW_SINGLE_POINTS'  '2'  ()  ())
#('const cv.DrawMatchesFlags.DRAW_RICH_KEYPOINTS'  '4'  ()  ())
#('cv.drawKeypoints'  'void'  ()  (('Mat'  'image'  ''  ())  ('vector_KeyPoint'  'keypoints'  ''  ())  ('Mat'  'outImage'  ''  ('/IO'))  ('Scalar'  'color'  'Scalar::all(-1)'  ())  ('int'  'flags'  'DrawMatchesFlags::DEFAULT'  ()))  'void')
#('cv.drawMatches'  'void'  ()  (('Mat'  'img1'  ''  ())  ('vector_KeyPoint'  'keypoints1'  ''  ())  ('Mat'  'img2'  ''  ())  ('vector_KeyPoint'  'keypoints2'  ''  ())  ('vector_DMatch'  'matches1to2'  ''  ())  ('Mat'  'outImg'  ''  ('/IO'))  ('Scalar'  'matchColor'  'Scalar::all(-1)'  ())  ('Scalar'  'singlePointColor'  'Scalar::all(-1)'  ())  ('vector_char'  'matchesMask'  'std::vector<char>()'  ())  ('int'  'flags'  'DrawMatchesFlags::DEFAULT'  ()))  'void')
#('cv.drawMatches'  'void'  ('=drawMatchesKnn')  (('Mat'  'img1'  ''  ())  ('vector_KeyPoint'  'keypoints1'  ''  ())  ('Mat'  'img2'  ''  ())  ('vector_KeyPoint'  'keypoints2'  ''  ())  ('vector_vector_DMatch'  'matches1to2'  ''  ())  ('Mat'  'outImg'  ''  ('/IO'))  ('Scalar'  'matchColor'  'Scalar::all(-1)'  ())  ('Scalar'  'singlePointColor'  'Scalar::all(-1)'  ())  ('vector_vector_char'  'matchesMask'  'std::vector<std::vector<char> >()'  ())  ('int'  'flags'  'DrawMatchesFlags::DEFAULT'  ()))  'void')
#('class cv.BOWTrainer'  ''  ()  ())
#('cv.BOWTrainer.add'  'void'  ()  (('Mat'  'descriptors'  ''  ()))  'void')
#('cv.BOWTrainer.getDescriptors'  'vector_Mat'  ()  ()  'std::vector<Mat>')
#('cv.BOWTrainer.descriptorsCount'  'int'  ()  ()  'int')
#('cv.BOWTrainer.clear'  'void'  ()  ()  'void')
#('cv.BOWTrainer.cluster'  'Mat'  ()  ()  'Mat')
#('cv.BOWTrainer.cluster'  'Mat'  ()  (('Mat'  'descriptors'  ''  ()))  'Mat')
#('class cv.BOWKMeansTrainer'  ': cv::BOWTrainer'  ()  ())
#('cv.BOWKMeansTrainer.BOWKMeansTrainer'  ''  ()  (('int'  'clusterCount'  ''  ())  ('TermCriteria'  'termcrit'  'TermCriteria()'  ())  ('int'  'attempts'  '3'  ())  ('int'  'flags'  'KMEANS_PP_CENTERS'  ())))
#('cv.BOWKMeansTrainer.cluster'  'Mat'  ()  ()  'Mat')
#('cv.BOWKMeansTrainer.cluster'  'Mat'  ()  (('Mat'  'descriptors'  ''  ()))  'Mat')
#('class cv.BOWImgDescriptorExtractor'  ''  ()  ())
#('cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor'  ''  ()  (('Ptr_DescriptorExtractor'  'dextractor'  ''  ())  ('Ptr_DescriptorMatcher'  'dmatcher'  ''  ())))
#('cv.BOWImgDescriptorExtractor.setVocabulary'  'void'  ()  (('Mat'  'vocabulary'  ''  ()))  'void')
#('cv.BOWImgDescriptorExtractor.getVocabulary'  'Mat'  ()  ()  'Mat')
#('cv.BOWImgDescriptorExtractor.compute2'  'void'  ('=compute')  (('Mat'  'image'  ''  ())  ('vector_KeyPoint'  'keypoints'  ''  ())  ('Mat'  'imgDescriptor'  ''  ('/O')))  'void')
#('cv.BOWImgDescriptorExtractor.descriptorSize'  'int'  ()  ()  'int')
#('cv.BOWImgDescriptorExtractor.descriptorType'  'int'  ()  ()  'int')
#('const cv.LMEDS'  '4'  ()  ())
#('const cv.RANSAC'  '8'  ()  ())
#('const cv.RHO'  '16'  ()  ())
#('const cv.SOLVEPNP_ITERATIVE'  '0'  ()  ())
#('const cv.SOLVEPNP_EPNP'  '1'  ()  ())
#('const cv.SOLVEPNP_P3P'  '2'  ()  ())
#('const cv.SOLVEPNP_DLS'  '3'  ()  ())
#('const cv.SOLVEPNP_UPNP'  '4'  ()  ())
#('const cv.CALIB_CB_ADAPTIVE_THRESH'  '1'  ()  ())
#('const cv.CALIB_CB_NORMALIZE_IMAGE'  '2'  ()  ())
#('const cv.CALIB_CB_FILTER_QUADS'  '4'  ()  ())
#('const cv.CALIB_CB_FAST_CHECK'  '8'  ()  ())
#('const cv.CALIB_CB_SYMMETRIC_GRID'  '1'  ()  ())
#('const cv.CALIB_CB_ASYMMETRIC_GRID'  '2'  ()  ())
#('const cv.CALIB_CB_CLUSTERING'  '4'  ()  ())
#('const cv.CALIB_USE_INTRINSIC_GUESS'  '0x00001'  ()  ())
#('const cv.CALIB_FIX_ASPECT_RATIO'  '0x00002'  ()  ())
#('const cv.CALIB_FIX_PRINCIPAL_POINT'  '0x00004'  ()  ())
#('const cv.CALIB_ZERO_TANGENT_DIST'  '0x00008'  ()  ())
#('const cv.CALIB_FIX_FOCAL_LENGTH'  '0x00010'  ()  ())
#('const cv.CALIB_FIX_K1'  '0x00020'  ()  ())
#('const cv.CALIB_FIX_K2'  '0x00040'  ()  ())
#('const cv.CALIB_FIX_K3'  '0x00080'  ()  ())
#('const cv.CALIB_FIX_K4'  '0x00800'  ()  ())
#('const cv.CALIB_FIX_K5'  '0x01000'  ()  ())
#('const cv.CALIB_FIX_K6'  '0x02000'  ()  ())
#('const cv.CALIB_RATIONAL_MODEL'  '0x04000'  ()  ())
#('const cv.CALIB_THIN_PRISM_MODEL'  '0x08000'  ()  ())
#('const cv.CALIB_FIX_S1_S2_S3_S4'  '0x10000'  ()  ())
#('const cv.CALIB_FIX_INTRINSIC'  '0x00100'  ()  ())
#('const cv.CALIB_SAME_FOCAL_LENGTH'  '0x00200'  ()  ())
#('const cv.CALIB_ZERO_DISPARITY'  '0x00400'  ()  ())
#('const cv.FM_7POINT'  '1'  ()  ())
#('const cv.FM_8POINT'  '2'  ()  ())
#('const cv.FM_LMEDS'  '4'  ()  ())
#('const cv.FM_RANSAC'  '8'  ()  ())
#('cv.Rodrigues'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O'))  ('Mat'  'jacobian'  'Mat()'  ('/O')))  'void')
#('cv.findHomography'  'Mat'  ()  (('Mat'  'srcPoints'  ''  ())  ('Mat'  'dstPoints'  ''  ())  ('int'  'method'  '0'  ())  ('double'  'ransacReprojThreshold'  '3'  ())  ('Mat'  'mask'  'Mat()'  ('/O'))  ('int'  'maxIters'  '2000'  ())  ('double'  'confidence'  '0.995'  ()))  'Mat')
#('cv.RQDecomp3x3'  'Vec3d'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'mtxR'  ''  ('/O'))  ('Mat'  'mtxQ'  ''  ('/O'))  ('Mat'  'Qx'  'Mat()'  ('/O'))  ('Mat'  'Qy'  'Mat()'  ('/O'))  ('Mat'  'Qz'  'Mat()'  ('/O')))  'Vec3d')
#('cv.decomposeProjectionMatrix'  'void'  ()  (('Mat'  'projMatrix'  ''  ())  ('Mat'  'cameraMatrix'  ''  ('/O'))  ('Mat'  'rotMatrix'  ''  ('/O'))  ('Mat'  'transVect'  ''  ('/O'))  ('Mat'  'rotMatrixX'  'Mat()'  ('/O'))  ('Mat'  'rotMatrixY'  'Mat()'  ('/O'))  ('Mat'  'rotMatrixZ'  'Mat()'  ('/O'))  ('Mat'  'eulerAngles'  'Mat()'  ('/O')))  'void')
#('cv.matMulDeriv'  'void'  ()  (('Mat'  'A'  ''  ())  ('Mat'  'B'  ''  ())  ('Mat'  'dABdA'  ''  ('/O'))  ('Mat'  'dABdB'  ''  ('/O')))  'void')
#('cv.composeRT'  'void'  ()  (('Mat'  'rvec1'  ''  ())  ('Mat'  'tvec1'  ''  ())  ('Mat'  'rvec2'  ''  ())  ('Mat'  'tvec2'  ''  ())  ('Mat'  'rvec3'  ''  ('/O'))  ('Mat'  'tvec3'  ''  ('/O'))  ('Mat'  'dr3dr1'  'Mat()'  ('/O'))  ('Mat'  'dr3dt1'  'Mat()'  ('/O'))  ('Mat'  'dr3dr2'  'Mat()'  ('/O'))  ('Mat'  'dr3dt2'  'Mat()'  ('/O'))  ('Mat'  'dt3dr1'  'Mat()'  ('/O'))  ('Mat'  'dt3dt1'  'Mat()'  ('/O'))  ('Mat'  'dt3dr2'  'Mat()'  ('/O'))  ('Mat'  'dt3dt2'  'Mat()'  ('/O')))  'void')
#('cv.projectPoints'  'void'  ()  (('Mat'  'objectPoints'  ''  ())  ('Mat'  'rvec'  ''  ())  ('Mat'  'tvec'  ''  ())  ('Mat'  'cameraMatrix'  ''  ())  ('Mat'  'distCoeffs'  ''  ())  ('Mat'  'imagePoints'  ''  ('/O'))  ('Mat'  'jacobian'  'Mat()'  ('/O'))  ('double'  'aspectRatio'  '0'  ()))  'void')
#('cv.solvePnP'  'bool'  ()  (('Mat'  'objectPoints'  ''  ())  ('Mat'  'imagePoints'  ''  ())  ('Mat'  'cameraMatrix'  ''  ())  ('Mat'  'distCoeffs'  ''  ())  ('Mat'  'rvec'  ''  ('/O'))  ('Mat'  'tvec'  ''  ('/O'))  ('bool'  'useExtrinsicGuess'  'false'  ())  ('int'  'flags'  'SOLVEPNP_ITERATIVE'  ()))  'bool')
#('cv.solvePnPRansac'  'bool'  ()  (('Mat'  'objectPoints'  ''  ())  ('Mat'  'imagePoints'  ''  ())  ('Mat'  'cameraMatrix'  ''  ())  ('Mat'  'distCoeffs'  ''  ())  ('Mat'  'rvec'  ''  ('/O'))  ('Mat'  'tvec'  ''  ('/O'))  ('bool'  'useExtrinsicGuess'  'false'  ())  ('int'  'iterationsCount'  '100'  ())  ('float'  'reprojectionError'  '8.0'  ())  ('double'  'confidence'  '0.99'  ())  ('Mat'  'inliers'  'Mat()'  ('/O'))  ('int'  'flags'  'SOLVEPNP_ITERATIVE'  ()))  'bool')
#('cv.initCameraMatrix2D'  'Mat'  ()  (('vector_Mat'  'objectPoints'  ''  ())  ('vector_Mat'  'imagePoints'  ''  ())  ('Size'  'imageSize'  ''  ())  ('double'  'aspectRatio'  '1.0'  ()))  'Mat')
#('cv.findChessboardCorners'  'bool'  ()  (('Mat'  'image'  ''  ())  ('Size'  'patternSize'  ''  ())  ('Mat'  'corners'  ''  ('/O'))  ('int'  'flags'  'CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE'  ()))  'bool')
#('cv.drawChessboardCorners'  'void'  ()  (('Mat'  'image'  ''  ('/IO'))  ('Size'  'patternSize'  ''  ())  ('Mat'  'corners'  ''  ())  ('bool'  'patternWasFound'  ''  ()))  'void')
#('cv.findCirclesGrid'  'bool'  ()  (('Mat'  'image'  ''  ())  ('Size'  'patternSize'  ''  ())  ('Mat'  'centers'  ''  ('/O'))  ('int'  'flags'  'CALIB_CB_SYMMETRIC_GRID'  ())  ('Ptr_FeatureDetector'  'blobDetector'  'SimpleBlobDetector::create()'  ()))  'bool')
#('cv.calibrateCamera'  'double'  ()  (('vector_Mat'  'objectPoints'  ''  ())  ('vector_Mat'  'imagePoints'  ''  ())  ('Size'  'imageSize'  ''  ())  ('Mat'  'cameraMatrix'  ''  ('/IO'))  ('Mat'  'distCoeffs'  ''  ('/IO'))  ('vector_Mat'  'rvecs'  ''  ('/O'))  ('vector_Mat'  'tvecs'  ''  ('/O'))  ('int'  'flags'  '0'  ())  ('TermCriteria'  'criteria'  'TermCriteria( TermCriteria::COUNT + TermCriteria::EPS  30  DBL_EPSILON)'  ()))  'double')
#('cv.calibrationMatrixValues'  'void'  ()  (('Mat'  'cameraMatrix'  ''  ())  ('Size'  'imageSize'  ''  ())  ('double'  'apertureWidth'  ''  ())  ('double'  'apertureHeight'  ''  ())  ('double'  'fovx'  ''  ('/O'))  ('double'  'fovy'  ''  ('/O'))  ('double'  'focalLength'  ''  ('/O'))  ('Point2d'  'principalPoint'  ''  ('/O'))  ('double'  'aspectRatio'  ''  ('/O')))  'void')
#('cv.stereoCalibrate'  'double'  ()  (('vector_Mat'  'objectPoints'  ''  ())  ('vector_Mat'  'imagePoints1'  ''  ())  ('vector_Mat'  'imagePoints2'  ''  ())  ('Mat'  'cameraMatrix1'  ''  ('/IO'))  ('Mat'  'distCoeffs1'  ''  ('/IO'))  ('Mat'  'cameraMatrix2'  ''  ('/IO'))  ('Mat'  'distCoeffs2'  ''  ('/IO'))  ('Size'  'imageSize'  ''  ())  ('Mat'  'R'  ''  ('/O'))  ('Mat'  'T'  ''  ('/O'))  ('Mat'  'E'  ''  ('/O'))  ('Mat'  'F'  ''  ('/O'))  ('int'  'flags'  'CALIB_FIX_INTRINSIC'  ())  ('TermCriteria'  'criteria'  'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS  30  1e-6)'  ()))  'double')
#('cv.stereoRectify'  'void'  ()  (('Mat'  'cameraMatrix1'  ''  ())  ('Mat'  'distCoeffs1'  ''  ())  ('Mat'  'cameraMatrix2'  ''  ())  ('Mat'  'distCoeffs2'  ''  ())  ('Size'  'imageSize'  ''  ())  ('Mat'  'R'  ''  ())  ('Mat'  'T'  ''  ())  ('Mat'  'R1'  ''  ('/O'))  ('Mat'  'R2'  ''  ('/O'))  ('Mat'  'P1'  ''  ('/O'))  ('Mat'  'P2'  ''  ('/O'))  ('Mat'  'Q'  ''  ('/O'))  ('int'  'flags'  'CALIB_ZERO_DISPARITY'  ())  ('double'  'alpha'  '-1'  ())  ('Size'  'newImageSize'  'Size()'  ())  ('Rect*'  'validPixROI1'  '0'  ('/O'))  ('Rect*'  'validPixROI2'  '0'  ('/O')))  'void')
#('cv.stereoRectifyUncalibrated'  'bool'  ()  (('Mat'  'points1'  ''  ())  ('Mat'  'points2'  ''  ())  ('Mat'  'F'  ''  ())  ('Size'  'imgSize'  ''  ())  ('Mat'  'H1'  ''  ('/O'))  ('Mat'  'H2'  ''  ('/O'))  ('double'  'threshold'  '5'  ()))  'bool')
#('cv.rectify3Collinear'  'float'  ()  (('Mat'  'cameraMatrix1'  ''  ())  ('Mat'  'distCoeffs1'  ''  ())  ('Mat'  'cameraMatrix2'  ''  ())  ('Mat'  'distCoeffs2'  ''  ())  ('Mat'  'cameraMatrix3'  ''  ())  ('Mat'  'distCoeffs3'  ''  ())  ('vector_Mat'  'imgpt1'  ''  ())  ('vector_Mat'  'imgpt3'  ''  ())  ('Size'  'imageSize'  ''  ())  ('Mat'  'R12'  ''  ())  ('Mat'  'T12'  ''  ())  ('Mat'  'R13'  ''  ())  ('Mat'  'T13'  ''  ())  ('Mat'  'R1'  ''  ('/O'))  ('Mat'  'R2'  ''  ('/O'))  ('Mat'  'R3'  ''  ('/O'))  ('Mat'  'P1'  ''  ('/O'))  ('Mat'  'P2'  ''  ('/O'))  ('Mat'  'P3'  ''  ('/O'))  ('Mat'  'Q'  ''  ('/O'))  ('double'  'alpha'  ''  ())  ('Size'  'newImgSize'  ''  ())  ('Rect*'  'roi1'  ''  ('/O'))  ('Rect*'  'roi2'  ''  ('/O'))  ('int'  'flags'  ''  ()))  'float')
#('cv.getOptimalNewCameraMatrix'  'Mat'  ()  (('Mat'  'cameraMatrix'  ''  ())  ('Mat'  'distCoeffs'  ''  ())  ('Size'  'imageSize'  ''  ())  ('double'  'alpha'  ''  ())  ('Size'  'newImgSize'  'Size()'  ())  ('Rect*'  'validPixROI'  '0'  ('/O'))  ('bool'  'centerPrincipalPoint'  'false'  ()))  'Mat')
#('cv.convertPointsToHomogeneous'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.convertPointsFromHomogeneous'  'void'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ('/O')))  'void')
#('cv.findFundamentalMat'  'Mat'  ()  (('Mat'  'points1'  ''  ())  ('Mat'  'points2'  ''  ())  ('int'  'method'  'FM_RANSAC'  ())  ('double'  'param1'  '3.'  ())  ('double'  'param2'  '0.99'  ())  ('Mat'  'mask'  'Mat()'  ('/O')))  'Mat')
#('cv.findEssentialMat'  'Mat'  ()  (('Mat'  'points1'  ''  ())  ('Mat'  'points2'  ''  ())  ('double'  'focal'  '1.0'  ())  ('Point2d'  'pp'  'Point2d(0  0)'  ())  ('int'  'method'  'RANSAC'  ())  ('double'  'prob'  '0.999'  ())  ('double'  'threshold'  '1.0'  ())  ('Mat'  'mask'  'Mat()'  ('/O')))  'Mat')
#('cv.decomposeEssentialMat'  'void'  ()  (('Mat'  'E'  ''  ())  ('Mat'  'R1'  ''  ('/O'))  ('Mat'  'R2'  ''  ('/O'))  ('Mat'  't'  ''  ('/O')))  'void')
#('cv.recoverPose'  'int'  ()  (('Mat'  'E'  ''  ())  ('Mat'  'points1'  ''  ())  ('Mat'  'points2'  ''  ())  ('Mat'  'R'  ''  ('/O'))  ('Mat'  't'  ''  ('/O'))  ('double'  'focal'  '1.0'  ())  ('Point2d'  'pp'  'Point2d(0  0)'  ())  ('Mat'  'mask'  'Mat()'  ('/IO')))  'int')
#('cv.computeCorrespondEpilines'  'void'  ()  (('Mat'  'points'  ''  ())  ('int'  'whichImage'  ''  ())  ('Mat'  'F'  ''  ())  ('Mat'  'lines'  ''  ('/O')))  'void')
#('cv.triangulatePoints'  'void'  ()  (('Mat'  'projMatr1'  ''  ())  ('Mat'  'projMatr2'  ''  ())  ('Mat'  'projPoints1'  ''  ())  ('Mat'  'projPoints2'  ''  ())  ('Mat'  'points4D'  ''  ('/O')))  'void')
#('cv.correctMatches'  'void'  ()  (('Mat'  'F'  ''  ())  ('Mat'  'points1'  ''  ())  ('Mat'  'points2'  ''  ())  ('Mat'  'newPoints1'  ''  ('/O'))  ('Mat'  'newPoints2'  ''  ('/O')))  'void')
#('cv.filterSpeckles'  'void'  ()  (('Mat'  'img'  ''  ('/IO'))  ('double'  'newVal'  ''  ())  ('int'  'maxSpeckleSize'  ''  ())  ('double'  'maxDiff'  ''  ())  ('Mat'  'buf'  'Mat()'  ('/IO')))  'void')
#('cv.getValidDisparityROI'  'Rect'  ()  (('Rect'  'roi1'  ''  ())  ('Rect'  'roi2'  ''  ())  ('int'  'minDisparity'  ''  ())  ('int'  'numberOfDisparities'  ''  ())  ('int'  'SADWindowSize'  ''  ()))  'Rect')
#('cv.validateDisparity'  'void'  ()  (('Mat'  'disparity'  ''  ('/IO'))  ('Mat'  'cost'  ''  ())  ('int'  'minDisparity'  ''  ())  ('int'  'numberOfDisparities'  ''  ())  ('int'  'disp12MaxDisp'  '1'  ()))  'void')
#('cv.reprojectImageTo3D'  'void'  ()  (('Mat'  'disparity'  ''  ())  ('Mat'  '_3dImage'  ''  ('/O'))  ('Mat'  'Q'  ''  ())  ('bool'  'handleMissingValues'  'false'  ())  ('int'  'ddepth'  '-1'  ()))  'void')
#('cv.estimateAffine3D'  'int'  ()  (('Mat'  'src'  ''  ())  ('Mat'  'dst'  ''  ())  ('Mat'  'out'  ''  ('/O'))  ('Mat'  'inliers'  ''  ('/O'))  ('double'  'ransacThreshold'  '3'  ())  ('double'  'confidence'  '0.99'  ()))  'int')
#('cv.decomposeHomographyMat'  'int'  ()  (('Mat'  'H'  ''  ())  ('Mat'  'K'  ''  ())  ('vector_Mat'  'rotations'  ''  ('/O'))  ('vector_Mat'  'translations'  ''  ('/O'))  ('vector_Mat'  'normals'  ''  ('/O')))  'int')
#('class cv.StereoMatcher'  ': cv::Algorithm'  ()  ())
#('const cv.StereoMatcher.DISP_SHIFT'  '4'  ()  ())
#('const cv.StereoMatcher.DISP_SCALE'  '(1 << DISP_SHIFT)'  ()  ())
#('cv.StereoMatcher.compute'  'void'  ()  (('Mat'  'left'  ''  ())  ('Mat'  'right'  ''  ())  ('Mat'  'disparity'  ''  ('/O')))  'void')
#('cv.StereoMatcher.getMinDisparity'  'int'  ()  ()  'int')
#('cv.StereoMatcher.setMinDisparity'  'void'  ()  (('int'  'minDisparity'  ''  ()))  'void')
#('cv.StereoMatcher.getNumDisparities'  'int'  ()  ()  'int')
#('cv.StereoMatcher.setNumDisparities'  'void'  ()  (('int'  'numDisparities'  ''  ()))  'void')
#('cv.StereoMatcher.getBlockSize'  'int'  ()  ()  'int')
#('cv.StereoMatcher.setBlockSize'  'void'  ()  (('int'  'blockSize'  ''  ()))  'void')
#('cv.StereoMatcher.getSpeckleWindowSize'  'int'  ()  ()  'int')
#('cv.StereoMatcher.setSpeckleWindowSize'  'void'  ()  (('int'  'speckleWindowSize'  ''  ()))  'void')
#('cv.StereoMatcher.getSpeckleRange'  'int'  ()  ()  'int')
#('cv.StereoMatcher.setSpeckleRange'  'void'  ()  (('int'  'speckleRange'  ''  ()))  'void')
#('cv.StereoMatcher.getDisp12MaxDiff'  'int'  ()  ()  'int')
#('cv.StereoMatcher.setDisp12MaxDiff'  'void'  ()  (('int'  'disp12MaxDiff'  ''  ()))  'void')
#('class cv.StereoBM'  ': cv::StereoMatcher'  ()  ())
#('const cv.StereoBM.PREFILTER_NORMALIZED_RESPONSE'  '0'  ()  ())
#('const cv.StereoBM.PREFILTER_XSOBEL'  '1'  ()  ())
#('cv.StereoBM.getPreFilterType'  'int'  ()  ()  'int')
#('cv.StereoBM.setPreFilterType'  'void'  ()  (('int'  'preFilterType'  ''  ()))  'void')
#('cv.StereoBM.getPreFilterSize'  'int'  ()  ()  'int')
#('cv.StereoBM.setPreFilterSize'  'void'  ()  (('int'  'preFilterSize'  ''  ()))  'void')
#('cv.StereoBM.getPreFilterCap'  'int'  ()  ()  'int')
#('cv.StereoBM.setPreFilterCap'  'void'  ()  (('int'  'preFilterCap'  ''  ()))  'void')
#('cv.StereoBM.getTextureThreshold'  'int'  ()  ()  'int')
#('cv.StereoBM.setTextureThreshold'  'void'  ()  (('int'  'textureThreshold'  ''  ()))  'void')
#('cv.StereoBM.getUniquenessRatio'  'int'  ()  ()  'int')
#('cv.StereoBM.setUniquenessRatio'  'void'  ()  (('int'  'uniquenessRatio'  ''  ()))  'void')
#('cv.StereoBM.getSmallerBlockSize'  'int'  ()  ()  'int')
#('cv.StereoBM.setSmallerBlockSize'  'void'  ()  (('int'  'blockSize'  ''  ()))  'void')
#('cv.StereoBM.getROI1'  'Rect'  ()  ()  'Rect')
#('cv.StereoBM.setROI1'  'void'  ()  (('Rect'  'roi1'  ''  ()))  'void')
#('cv.StereoBM.getROI2'  'Rect'  ()  ()  'Rect')
#('cv.StereoBM.setROI2'  'void'  ()  (('Rect'  'roi2'  ''  ()))  'void')
#('cv.StereoBM.create'  'Ptr_StereoBM'  ('/S')  (('int'  'numDisparities'  '0'  ())  ('int'  'blockSize'  '21'  ()))  'Ptr<StereoBM>')
#('class cv.StereoSGBM'  ': cv::StereoMatcher'  ()  ())
#('const cv.StereoSGBM.MODE_SGBM'  '0'  ()  ())
#('const cv.StereoSGBM.MODE_HH'  '1'  ()  ())
#('cv.StereoSGBM.getPreFilterCap'  'int'  ()  ()  'int')
#('cv.StereoSGBM.setPreFilterCap'  'void'  ()  (('int'  'preFilterCap'  ''  ()))  'void')
#('cv.StereoSGBM.getUniquenessRatio'  'int'  ()  ()  'int')
#('cv.StereoSGBM.setUniquenessRatio'  'void'  ()  (('int'  'uniquenessRatio'  ''  ()))  'void')
#('cv.StereoSGBM.getP1'  'int'  ()  ()  'int')
#('cv.StereoSGBM.setP1'  'void'  ()  (('int'  'P1'  ''  ()))  'void')
#('cv.StereoSGBM.getP2'  'int'  ()  ()  'int')
#('cv.StereoSGBM.setP2'  'void'  ()  (('int'  'P2'  ''  ()))  'void')
#('cv.StereoSGBM.getMode'  'int'  ()  ()  'int')
#('cv.StereoSGBM.setMode'  'void'  ()  (('int'  'mode'  ''  ()))  'void')
#('cv.StereoSGBM.create'  'Ptr_StereoSGBM'  ('/S')  (('int'  'minDisparity'  ''  ())  ('int'  'numDisparities'  ''  ())  ('int'  'blockSize'  ''  ())  ('int'  'P1'  '0'  ())  ('int'  'P2'  '0'  ())  ('int'  'disp12MaxDiff'  '0'  ())  ('int'  'preFilterCap'  '0'  ())  ('int'  'uniquenessRatio'  '0'  ())  ('int'  'speckleWindowSize'  '0'  ())  ('int'  'speckleRange'  '0'  ())  ('int'  'mode'  'StereoSGBM::MODE_SGBM'  ()))  'Ptr<StereoSGBM>')
#('const cv.fisheye.CALIB_USE_INTRINSIC_GUESS'  '1'  ()  ())
#('const cv.fisheye.CALIB_RECOMPUTE_EXTRINSIC'  '2'  ()  ())
#('const cv.fisheye.CALIB_CHECK_COND'  '4'  ()  ())
#('const cv.fisheye.CALIB_FIX_SKEW'  '8'  ()  ())
#('const cv.fisheye.CALIB_FIX_K1'  '16'  ()  ())
#('const cv.fisheye.CALIB_FIX_K2'  '32'  ()  ())
#('const cv.fisheye.CALIB_FIX_K3'  '64'  ()  ())
#('const cv.fisheye.CALIB_FIX_K4'  '128'  ()  ())
#('const cv.fisheye.CALIB_FIX_INTRINSIC'  '256'  ()  ())
#('cv.fisheye.projectPoints'  'void'  ()  (('Mat'  'objectPoints'  ''  ())  ('Mat'  'imagePoints'  ''  ('/O'))  ('Mat'  'rvec'  ''  ())  ('Mat'  'tvec'  ''  ())  ('Mat'  'K'  ''  ())  ('Mat'  'D'  ''  ())  ('double'  'alpha'  '0'  ())  ('Mat'  'jacobian'  'Mat()'  ('/O')))  'void')
#('cv.fisheye.distortPoints'  'void'  ()  (('Mat'  'undistorted'  ''  ())  ('Mat'  'distorted'  ''  ('/O'))  ('Mat'  'K'  ''  ())  ('Mat'  'D'  ''  ())  ('double'  'alpha'  '0'  ()))  'void')
#('cv.fisheye.undistortPoints'  'void'  ()  (('Mat'  'distorted'  ''  ())  ('Mat'  'undistorted'  ''  ('/O'))  ('Mat'  'K'  ''  ())  ('Mat'  'D'  ''  ())  ('Mat'  'R'  'Mat()'  ())  ('Mat'  'P'  'Mat()'  ()))  'void')
#('cv.fisheye.initUndistortRectifyMap'  'void'  ()  (('Mat'  'K'  ''  ())  ('Mat'  'D'  ''  ())  ('Mat'  'R'  ''  ())  ('Mat'  'P'  ''  ())  ('Size'  'size'  ''  ())  ('int'  'm1type'  ''  ())  ('Mat'  'map1'  ''  ('/O'))  ('Mat'  'map2'  ''  ('/O')))  'void')
#('cv.fisheye.undistortImage'  'void'  ()  (('Mat'  'distorted'  ''  ())  ('Mat'  'undistorted'  ''  ('/O'))  ('Mat'  'K'  ''  ())  ('Mat'  'D'  ''  ())  ('Mat'  'Knew'  'cv::Mat()'  ())  ('Size'  'new_size'  'Size()'  ()))  'void')
#('cv.fisheye.estimateNewCameraMatrixForUndistortRectify'  'void'  ()  (('Mat'  'K'  ''  ())  ('Mat'  'D'  ''  ())  ('Size'  'image_size'  ''  ())  ('Mat'  'R'  ''  ())  ('Mat'  'P'  ''  ('/O'))  ('double'  'balance'  '0.0'  ())  ('Size'  'new_size'  'Size()'  ())  ('double'  'fov_scale'  '1.0'  ()))  'void')
#('cv.fisheye.calibrate'  'double'  ()  (('vector_Mat'  'objectPoints'  ''  ())  ('vector_Mat'  'imagePoints'  ''  ())  ('Size'  'image_size'  ''  ())  ('Mat'  'K'  ''  ('/IO'))  ('Mat'  'D'  ''  ('/IO'))  ('vector_Mat'  'rvecs'  ''  ('/O'))  ('vector_Mat'  'tvecs'  ''  ('/O'))  ('int'  'flags'  '0'  ())  ('TermCriteria'  'criteria'  'TermCriteria(TermCriteria::COUNT + TermCriteria::EPS  100  DBL_EPSILON)'  ()))  'double')
#('cv.fisheye.stereoRectify'  'void'  ()  (('Mat'  'K1'  ''  ())  ('Mat'  'D1'  ''  ())  ('Mat'  'K2'  ''  ())  ('Mat'  'D2'  ''  ())  ('Size'  'imageSize'  ''  ())  ('Mat'  'R'  ''  ())  ('Mat'  'tvec'  ''  ())  ('Mat'  'R1'  ''  ('/O'))  ('Mat'  'R2'  ''  ('/O'))  ('Mat'  'P1'  ''  ('/O'))  ('Mat'  'P2'  ''  ('/O'))  ('Mat'  'Q'  ''  ('/O'))  ('int'  'flags'  ''  ())  ('Size'  'newImageSize'  'Size()'  ())  ('double'  'balance'  '0.0'  ())  ('double'  'fov_scale'  '1.0'  ()))  'void')
#('cv.fisheye.stereoCalibrate'  'double'  ()  (('vector_Mat'  'objectPoints'  ''  ())  ('vector_Mat'  'imagePoints1'  ''  ())  ('vector_Mat'  'imagePoints2'  ''  ())  ('Mat'  'K1'  ''  ('/IO'))  ('Mat'  'D1'  ''  ('/IO'))  ('Mat'  'K2'  ''  ('/IO'))  ('Mat'  'D2'  ''  ('/IO'))  ('Size'  'imageSize'  ''  ())  ('Mat'  'R'  ''  ('/O'))  ('Mat'  'T'  ''  ('/O'))  ('int'  'flags'  'fisheye::CALIB_FIX_INTRINSIC'  ())  ('TermCriteria'  'criteria'  'TermCriteria(TermCriteria::COUNT + TermCriteria::EPS  100  DBL_EPSILON)'  ()))  'double')
#('class cv.Stitcher'  ''  ()  ())
#('const cv.Stitcher.ORIG_RESOL'  '-1'  ()  ())
#('const cv.Stitcher.OK'  '0'  ()  ())
#('const cv.Stitcher.ERR_NEED_MORE_IMGS'  '1'  ()  ())
#('const cv.Stitcher.ERR_HOMOGRAPHY_EST_FAIL'  '2'  ()  ())
#('const cv.Stitcher.ERR_CAMERA_PARAMS_ADJUST_FAIL'  '3'  ()  ())
#('cv.Stitcher.registrationResol'  'double'  ()  ()  'double')
#('cv.Stitcher.setRegistrationResol'  'void'  ()  (('double'  'resol_mpx'  ''  ()))  'void')
#('cv.Stitcher.seamEstimationResol'  'double'  ()  ()  'double')
#('cv.Stitcher.setSeamEstimationResol'  'void'  ()  (('double'  'resol_mpx'  ''  ()))  'void')
#('cv.Stitcher.compositingResol'  'double'  ()  ()  'double')
#('cv.Stitcher.setCompositingResol'  'void'  ()  (('double'  'resol_mpx'  ''  ()))  'void')
#('cv.Stitcher.panoConfidenceThresh'  'double'  ()  ()  'double')
#('cv.Stitcher.setPanoConfidenceThresh'  'void'  ()  (('double'  'conf_thresh'  ''  ()))  'void')
#('cv.Stitcher.waveCorrection'  'bool'  ()  ()  'bool')
#('cv.Stitcher.setWaveCorrection'  'void'  ()  (('bool'  'flag'  ''  ()))  'void')
#('cv.Stitcher.estimateTransform'  'Status'  ()  (('vector_Mat'  'images'  ''  ()))  'Status')
#('cv.Stitcher.composePanorama'  'Status'  ()  (('Mat'  'pano'  ''  ('/O')))  'Status')
#('cv.Stitcher.stitch'  'Status'  ()  (('vector_Mat'  'images'  ''  ())  ('Mat'  'pano'  ''  ('/O')))  'Status')
#('cv.Stitcher.workScale'  'double'  ()  ()  'double')
#('cv.createStitcher'  'Ptr_Stitcher'  ()  (('bool'  'try_use_gpu'  'false'  ()))  'Ptr<Stitcher>')
#('const cv.detail.Blender.NO'  '0'  ()  ())
#('const cv.detail.Blender.FEATHER'  '1'  ()  ())
#('const cv.detail.Blender.MULTI_BAND'  '2'  ()  ())
#('const cv.detail.ExposureCompensator.NO'  '0'  ()  ())
#('const cv.detail.ExposureCompensator.GAIN'  '1'  ()  ())
#('const cv.detail.ExposureCompensator.GAIN_BLOCKS'  '2'  ()  ())
#('const cv.detail.WAVE_CORRECT_HORIZ'  '0'  ()  ())
#('const cv.detail.WAVE_CORRECT_VERT'  '1'  ()  ())
#('const cv.detail.DpSeamFinder.COLOR'  '0'  ()  ())
#('const cv.detail.DpSeamFinder.COLOR_GRAD'  '1'  ()  ())
#('const cv.detail.GraphCutSeamFinderBase.COST_COLOR'  '0'  ()  ())
#('const cv.detail.GraphCutSeamFinderBase.COST_COLOR_GRAD'  '1'  ()  ())
#('const cv.detail.Timelapser.AS_IS'  '0'  ()  ())
#('const cv.detail.Timelapser.CROP'  '1'  ()  ())
#('const cv.videostab.MM_TRANSLATION'  '0'  ()  ())
#('const cv.videostab.MM_TRANSLATION_AND_SCALE'  '1'  ()  ())
#('const cv.videostab.MM_ROTATION'  '2'  ()  ())
#('const cv.videostab.MM_RIGID'  '3'  ()  ())
#('const cv.videostab.MM_SIMILARITY'  '4'  ()  ())
#('const cv.videostab.MM_AFFINE'  '5'  ()  ())
#('const cv.videostab.MM_HOMOGRAPHY'  '6'  ()  ())
#('const cv.videostab.MM_UNKNOWN'  '7'  ()  ())
)
